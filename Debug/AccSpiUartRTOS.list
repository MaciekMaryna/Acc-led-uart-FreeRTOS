
AccSpiUartRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b688  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800b828  0800b828  0001b828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd94  0800bd94  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd9c  0800bd9c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae8  200001f0  0800bf94  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd8  0800bf94  00024cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f8e  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004201  00000000  00000000  000421ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  000463b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  00047b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab4d  00000000  00000000  000491b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b04d  00000000  00000000  00063d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c9f8  00000000  00000000  0007ed52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011b74a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073cc  00000000  00000000  0011b7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b810 	.word	0x0800b810

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b810 	.word	0x0800b810

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <LIS302DL_WriteIO>:
static float zScale = 1.0f;

//Private functions
//Write IO
void LIS302DL_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	73fb      	strb	r3, [r7, #15]
	_LIS302DL_CS_ENBALE;
 8000f04:	2200      	movs	r2, #0
 8000f06:	2108      	movs	r1, #8
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LIS302DL_WriteIO+0x4c>)
 8000f0a:	f002 fda7 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000f0e:	f107 010f 	add.w	r1, r7, #15
 8000f12:	230a      	movs	r3, #10
 8000f14:	2201      	movs	r2, #1
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <LIS302DL_WriteIO+0x50>)
 8000f18:	f003 fad7 	bl	80044ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	230a      	movs	r3, #10
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <LIS302DL_WriteIO+0x50>)
 8000f26:	f003 fad0 	bl	80044ca <HAL_SPI_Transmit>
	_LIS302DL_CS_DISABLE;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <LIS302DL_WriteIO+0x4c>)
 8000f30:	f002 fd94 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	2000020c 	.word	0x2000020c

08000f44 <LIS302DL_ReadIO>:

//Read IO
void LIS302DL_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	723b      	strb	r3, [r7, #8]
	_LIS302DL_CS_ENBALE;
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2108      	movs	r1, #8
 8000f62:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <LIS302DL_ReadIO+0x84>)
 8000f64:	f002 fd7a 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000f68:	f107 0108 	add.w	r1, r7, #8
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <LIS302DL_ReadIO+0x88>)
 8000f72:	f003 faaa 	bl	80044ca <HAL_SPI_Transmit>
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f107 0108 	add.w	r1, r7, #8
 8000f7e:	230a      	movs	r3, #10
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <LIS302DL_ReadIO+0x88>)
 8000f82:	f003 fbde 	bl	8004742 <HAL_SPI_Receive>
	_LIS302DL_CS_DISABLE;
 8000f86:	2201      	movs	r2, #1
 8000f88:	2108      	movs	r1, #8
 8000f8a:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <LIS302DL_ReadIO+0x84>)
 8000f8c:	f002 fd66 	bl	8003a5c <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e00c      	b.n	8000fb0 <LIS302DL_ReadIO+0x6c>
	{
		dataR[i] = spiBuf[i];
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f107 0110 	add.w	r1, r7, #16
 8000fa2:	440a      	add	r2, r1
 8000fa4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000fa8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3301      	adds	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbec      	blt.n	8000f96 <LIS302DL_ReadIO+0x52>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	2000020c 	.word	0x2000020c

08000fd0 <LIS302DL_Init>:

//Accelerometer initialise function
void LIS302DL_Init(SPI_HandleTypeDef *accSPI, LIS302DL_InitTypeDef *accInitDef)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]

	uint8_t spiData;

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000fda:	2258      	movs	r2, #88	; 0x58
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	483a      	ldr	r0, [pc, #232]	; (80010c8 <LIS302DL_Init+0xf8>)
 8000fe0:	f007 ff3e 	bl	8008e60 <memcpy>
	//CTRL_REG1 forming
	spiData = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->dataRate) spiData |= 0x80;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <LIS302DL_Init+0x2a>
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->powerDown) spiData |= 0x40;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <LIS302DL_Init+0x3c>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->fullScale) spiData |= 0x20;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	789b      	ldrb	r3, [r3, #2]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <LIS302DL_Init+0x4e>
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f043 0320 	orr.w	r3, r3, #32
 800101a:	b2db      	uxtb	r3, r3
 800101c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->enableAxes & 0x07);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	78db      	ldrb	r3, [r3, #3]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	b25a      	sxtb	r2, r3
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]


	//Write CTRL_REG1 and UART echo
	LIS302DL_WriteIO(LIS302DL_CTRL_REG1_ADDR, &spiData, 1);
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	2020      	movs	r0, #32
 8001040:	f7ff ff56 	bl	8000ef0 <LIS302DL_WriteIO>
//	sprintf(uartBuffer ,"REG1: 0x%0X\n\r", spiData);
//	uartLog(uartBuffer);

	//CTRL_REG2 forming
	spiData = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->serialInterfaceMode) spiData |= 0x80;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	791b      	ldrb	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <LIS302DL_Init+0x8a>
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->rebootMemory) spiData |= 0x40;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	795b      	ldrb	r3, [r3, #5]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <LIS302DL_Init+0x9c>
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	b2db      	uxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->filterConfig) spiData |= 0x1F;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	799b      	ldrb	r3, [r3, #6]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <LIS302DL_Init+0xae>
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f043 031f 	orr.w	r3, r3, #31
 800107a:	b2db      	uxtb	r3, r3
 800107c:	73fb      	strb	r3, [r7, #15]
	LIS302DL_WriteIO(LIS302DL_CTRL_REG2_ADDR, &spiData, 1);
 800107e:	f107 030f 	add.w	r3, r7, #15
 8001082:	2201      	movs	r2, #1
 8001084:	4619      	mov	r1, r3
 8001086:	2021      	movs	r0, #33	; 0x21
 8001088:	f7ff ff32 	bl	8000ef0 <LIS302DL_WriteIO>
	//Write CTRL_REG2 and UART echo
//	sprintf(uartBuffer ,"REG2: 0x%0X\n\r", spiData);
//	uartLog(uartBuffer);

	if (accInitDef->interruptConfig)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	79db      	ldrb	r3, [r3, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <LIS302DL_Init+0xd8>
		{
			//CTRL_REG3 forming
			spiData = accInitDef->interruptConfig;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	79db      	ldrb	r3, [r3, #7]
 8001098:	73fb      	strb	r3, [r7, #15]
			//Write CTRL_REG3 and UART echo
			LIS302DL_WriteIO(LIS302DL_CTRL_REG3_ADDR, &spiData, 1);
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	2022      	movs	r0, #34	; 0x22
 80010a4:	f7ff ff24 	bl	8000ef0 <LIS302DL_WriteIO>
//			sprintf(uartBuffer ,"REG3: 0x%0X\n\r", spiData);
//			uartLog(uartBuffer);
		}
	//Assign sensor sensitivity
	if (accInitDef->fullScale)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <LIS302DL_Init+0xe8>
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_018G;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <LIS302DL_Init+0xfc>)
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <LIS302DL_Init+0x100>)
 80010b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
	}
}
 80010b6:	e002      	b.n	80010be <LIS302DL_Init+0xee>
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <LIS302DL_Init+0xfc>)
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <LIS302DL_Init+0x104>)
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000020c 	.word	0x2000020c
 80010cc:	20000000 	.word	0x20000000
 80010d0:	3c9374bc 	.word	0x3c9374bc
 80010d4:	3d9374bc 	.word	0x3d9374bc

080010d8 <LIS302DL_GetDataRaw>:

//Get Accelerometer raw data
LIS302DL_DataRaw LIS302DL_GetDataRaw(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	LIS302DL_DataRaw tempDataRaw;
	LIS302DL_ReadIO(LIS302DL_OUT_X_ADDR, &tempDataRaw.x, 1);
 80010de:	463b      	mov	r3, r7
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	2029      	movs	r0, #41	; 0x29
 80010e6:	f7ff ff2d 	bl	8000f44 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Y_ADDR, &tempDataRaw.y, 1);
 80010ea:	463b      	mov	r3, r7
 80010ec:	3301      	adds	r3, #1
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	202b      	movs	r0, #43	; 0x2b
 80010f4:	f7ff ff26 	bl	8000f44 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Z_ADDR, &tempDataRaw.z, 1);
 80010f8:	463b      	mov	r3, r7
 80010fa:	3302      	adds	r3, #2
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	202d      	movs	r0, #45	; 0x2d
 8001102:	f7ff ff1f 	bl	8000f44 <LIS302DL_ReadIO>
	return tempDataRaw;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	463a      	mov	r2, r7
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4611      	mov	r1, r2
 800110e:	8019      	strh	r1, [r3, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	0c12      	lsrs	r2, r2, #16
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	793a      	ldrb	r2, [r7, #4]
 800111a:	f362 0307 	bfi	r3, r2, #0, #8
 800111e:	797a      	ldrb	r2, [r7, #5]
 8001120:	f362 230f 	bfi	r3, r2, #8, #8
 8001124:	79ba      	ldrb	r2, [r7, #6]
 8001126:	f362 4317 	bfi	r3, r2, #16, #8
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <LIS302DL_GetDataScaled>:
//Get Accelerometer scaled data [g]
LIS302DL_DataScaled LIS302DL_GetDataScaled(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0

	LIS302DL_DataRaw tempRawData = LIS302DL_GetDataRaw();
 800113a:	f7ff ffcd 	bl	80010d8 <LIS302DL_GetDataRaw>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	f887 2020 	strb.w	r2, [r7, #32]
 8001146:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800114a:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800114e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	LIS302DL_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * LIS302DL_Sensitivity * xScale) + 0.0f - xOffset;
 8001156:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <LIS302DL_GetDataScaled+0xf8>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <LIS302DL_GetDataScaled+0xfc>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001234 <LIS302DL_GetDataScaled+0x100>
 800117a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <LIS302DL_GetDataScaled+0x104>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.y = (tempRawData.y * LIS302DL_Sensitivity * yScale) + 0.0f - yOffset;
 800118c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <LIS302DL_GetDataScaled+0xf8>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <LIS302DL_GetDataScaled+0x108>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001234 <LIS302DL_GetDataScaled+0x100>
 80011b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <LIS302DL_GetDataScaled+0x10c>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a06 	vstr	s15, [r7, #24]
	tempScaledData.z = (tempRawData.z * LIS302DL_Sensitivity * zScale) + 0.0f - zOffset;
 80011c2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <LIS302DL_GetDataScaled+0xf8>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <LIS302DL_GetDataScaled+0x110>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001234 <LIS302DL_GetDataScaled+0x100>
 80011e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <LIS302DL_GetDataScaled+0x114>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	edc7 7a07 	vstr	s15, [r7, #28]

	return tempScaledData;
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	f107 0214 	add.w	r2, r7, #20
 8001200:	ca07      	ldmia	r2, {r0, r1, r2}
 8001202:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	ee06 1a90 	vmov	s13, r1
 8001210:	ee07 2a10 	vmov	s14, r2
 8001214:	ee07 3a90 	vmov	s15, r3
}
 8001218:	eeb0 0a66 	vmov.f32	s0, s13
 800121c:	eef0 0a47 	vmov.f32	s1, s14
 8001220:	eeb0 1a67 	vmov.f32	s2, s15
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	20000004 	.word	0x20000004
 8001234:	00000000 	.word	0x00000000
 8001238:	20000264 	.word	0x20000264
 800123c:	20000008 	.word	0x20000008
 8001240:	20000268 	.word	0x20000268
 8001244:	2000000c 	.word	0x2000000c
 8001248:	2000026c 	.word	0x2000026c

0800124c <LIS302DL_X_calibrate>:
}

//** Calibration functions **//
//X-Axis calibrate
void LIS302DL_X_calibrate(float x_min, float x_max)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	ed87 0a01 	vstr	s0, [r7, #4]
 8001256:	edc7 0a00 	vstr	s1, [r7]
	xOffset = (x_max + x_min) / 2.0f;
 800125a:	ed97 7a00 	vldr	s14, [r7]
 800125e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001266:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800126a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <LIS302DL_X_calibrate+0x50>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	xScale = 2.0f / (x_max - x_min);
 8001274:	ed97 7a00 	vldr	s14, [r7]
 8001278:	edd7 7a01 	vldr	s15, [r7, #4]
 800127c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001280:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <LIS302DL_X_calibrate+0x54>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000264 	.word	0x20000264
 80012a0:	20000004 	.word	0x20000004

080012a4 <LIS302DL_Y_calibrate>:
//Y-Axis calibrate
void LIS302DL_Y_calibrate(float y_min, float y_max)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ae:	edc7 0a00 	vstr	s1, [r7]
	yOffset = (y_max + y_min) / 2.0f;
 80012b2:	ed97 7a00 	vldr	s14, [r7]
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <LIS302DL_Y_calibrate+0x50>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
	yScale = 2.0f / (y_max - y_min);
 80012cc:	ed97 7a00 	vldr	s14, [r7]
 80012d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <LIS302DL_Y_calibrate+0x54>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000268 	.word	0x20000268
 80012f8:	20000008 	.word	0x20000008

080012fc <LIS302DL_Z_calibrate>:
//Z-Axis calibrate
void LIS302DL_Z_calibrate(float z_min, float z_max)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
 8001306:	edc7 0a00 	vstr	s1, [r7]
	zOffset = (z_max + z_min) / 2.0f;
 800130a:	ed97 7a00 	vldr	s14, [r7]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001316:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <LIS302DL_Z_calibrate+0x50>)
 8001320:	edc3 7a00 	vstr	s15, [r3]
	zScale = 2.0f / (z_max - z_min);
 8001324:	ed97 7a00 	vldr	s14, [r7]
 8001328:	edd7 7a01 	vldr	s15, [r7, #4]
 800132c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <LIS302DL_Z_calibrate+0x54>)
 800133a:	edc3 7a00 	vstr	s15, [r3]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000026c 	.word	0x2000026c
 8001350:	2000000c 	.word	0x2000000c

08001354 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of PrintUartMutex */
  PrintUartMutexHandle = osMutexNew(&PrintUartMutex_attributes);
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_FREERTOS_Init+0x54>)
 800135a:	f004 fc8b 	bl	8005c74 <osMutexNew>
 800135e:	4603      	mov	r3, r0
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_FREERTOS_Init+0x58>)
 8001362:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PrintSemaphore */
  PrintSemaphoreHandle = osSemaphoreNew(1, 1, &PrintSemaphore_attributes);
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_FREERTOS_Init+0x5c>)
 8001366:	2101      	movs	r1, #1
 8001368:	2001      	movs	r0, #1
 800136a:	f004 fd09 	bl	8005d80 <osSemaphoreNew>
 800136e:	4603      	mov	r3, r0
 8001370:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <MX_FREERTOS_Init+0x60>)
 8001372:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led4Task */
  Led4TaskHandle = osThreadNew(StartLed4Task, NULL, &Led4Task_attributes);
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <MX_FREERTOS_Init+0x64>)
 8001376:	2100      	movs	r1, #0
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_FREERTOS_Init+0x68>)
 800137a:	f004 fbe9 	bl	8005b50 <osThreadNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <MX_FREERTOS_Init+0x6c>)
 8001382:	6013      	str	r3, [r2, #0]

  /* creation of HardBitTask */
  HardBitTaskHandle = osThreadNew(StartHardBitTask, NULL, &HardBitTask_attributes);
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <MX_FREERTOS_Init+0x70>)
 8001386:	2100      	movs	r1, #0
 8001388:	480f      	ldr	r0, [pc, #60]	; (80013c8 <MX_FREERTOS_Init+0x74>)
 800138a:	f004 fbe1 	bl	8005b50 <osThreadNew>
 800138e:	4603      	mov	r3, r0
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <MX_FREERTOS_Init+0x78>)
 8001392:	6013      	str	r3, [r2, #0]

  /* creation of AccTask */
  AccTaskHandle = osThreadNew(StartAccTask, NULL, &AccTask_attributes);
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <MX_FREERTOS_Init+0x7c>)
 8001396:	2100      	movs	r1, #0
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <MX_FREERTOS_Init+0x80>)
 800139a:	f004 fbd9 	bl	8005b50 <osThreadNew>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <MX_FREERTOS_Init+0x84>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	0800b928 	.word	0x0800b928
 80013ac:	20004b94 	.word	0x20004b94
 80013b0:	0800b938 	.word	0x0800b938
 80013b4:	20004b9c 	.word	0x20004b9c
 80013b8:	0800b8bc 	.word	0x0800b8bc
 80013bc:	080013dd 	.word	0x080013dd
 80013c0:	20004b90 	.word	0x20004b90
 80013c4:	0800b8e0 	.word	0x0800b8e0
 80013c8:	080013ed 	.word	0x080013ed
 80013cc:	20004b8c 	.word	0x20004b8c
 80013d0:	0800b904 	.word	0x0800b904
 80013d4:	08001459 	.word	0x08001459
 80013d8:	20004b98 	.word	0x20004b98

080013dc <StartLed4Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLed4Task */
void StartLed4Task(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed4Task */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(100 / portTICK_PERIOD_MS);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f005 ff2d 	bl	8007244 <vTaskDelay>
 80013ea:	e7fb      	b.n	80013e4 <StartLed4Task+0x8>

080013ec <StartHardBitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHardBitTask */
void StartHardBitTask(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardBitTask */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <StartHardBitTask+0x60>)
 80013fa:	f002 fb48 	bl	8003a8e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80013fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001402:	4812      	ldr	r0, [pc, #72]	; (800144c <StartHardBitTask+0x60>)
 8001404:	f002 fb43 	bl	8003a8e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140c:	480f      	ldr	r0, [pc, #60]	; (800144c <StartHardBitTask+0x60>)
 800140e:	f002 fb3e 	bl	8003a8e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <StartHardBitTask+0x60>)
 8001418:	f002 fb39 	bl	8003a8e <HAL_GPIO_TogglePin>

		if (pdTRUE == xSemaphoreTake(PrintSemaphoreHandle, 0))
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <StartHardBitTask+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fa8c 	bl	8006940 <xQueueSemaphoreTake>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d109      	bne.n	8001442 <StartHardBitTask+0x56>
		{
			printf(".");
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <StartHardBitTask+0x68>)
 8001430:	f001 fdba 	bl	8002fa8 <printf_>
			xSemaphoreGive(PrintSemaphoreHandle);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <StartHardBitTask+0x64>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	f005 f805 	bl	800644c <xQueueGenericSend>
		}

		vTaskDelay(100 / portTICK_PERIOD_MS);
 8001442:	2064      	movs	r0, #100	; 0x64
 8001444:	f005 fefe 	bl	8007244 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001448:	e7d4      	b.n	80013f4 <StartHardBitTask+0x8>
 800144a:	bf00      	nop
 800144c:	40020c00 	.word	0x40020c00
 8001450:	20004b9c 	.word	0x20004b9c
 8001454:	0800b868 	.word	0x0800b868

08001458 <StartAccTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccTask */
void StartAccTask(void *argument)
{
 8001458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800145c:	b08c      	sub	sp, #48	; 0x30
 800145e:	af04      	add	r7, sp, #16
 8001460:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccTask */
	LIS302DL_DataScaled myData;
	LIS302DL_InitTypeDef myAccel;

	taskENTER_CRITICAL();
 8001462:	f007 f9c7 	bl	80087f4 <vPortEnterCritical>

	myAccel.dataRate=LIS302DL_DATARATE_400;
 8001466:	2301      	movs	r3, #1
 8001468:	733b      	strb	r3, [r7, #12]
	myAccel.powerDown=LIS302DL_ACTIVE;
 800146a:	2301      	movs	r3, #1
 800146c:	737b      	strb	r3, [r7, #13]
	myAccel.fullScale=LIS302DL_FULLSCALE_2;
 800146e:	2300      	movs	r3, #0
 8001470:	73bb      	strb	r3, [r7, #14]
	myAccel.enableAxes=LIS302DL_XYZ_ENABLE;
 8001472:	2307      	movs	r3, #7
 8001474:	73fb      	strb	r3, [r7, #15]
	myAccel.serialInterfaceMode=LIS302DL_SERIAL_INTERFACE_4WIRE;
 8001476:	2300      	movs	r3, #0
 8001478:	743b      	strb	r3, [r7, #16]
	myAccel.rebootMemory=LIS302DL_BOOT_NORMAL_MODE;
 800147a:	2300      	movs	r3, #0
 800147c:	747b      	strb	r3, [r7, #17]
	myAccel.filterConfig=LIS302DL_FILTERING_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	74bb      	strb	r3, [r7, #18]
	myAccel.interruptConfig=LIS302DL_INTERRUPT_NONE;
 8001482:	2300      	movs	r3, #0
 8001484:	74fb      	strb	r3, [r7, #19]
	LIS302DL_Init(&hspi1, &myAccel);
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4619      	mov	r1, r3
 800148c:	4828      	ldr	r0, [pc, #160]	; (8001530 <StartAccTask+0xd8>)
 800148e:	f7ff fd9f 	bl	8000fd0 <LIS302DL_Init>

	//calibration to meas range
	LIS302DL_X_calibrate(4.0, -4.0);
 8001492:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8001496:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800149a:	f7ff fed7 	bl	800124c <LIS302DL_X_calibrate>
	LIS302DL_Y_calibrate(4.0, -4.0);
 800149e:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 80014a2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80014a6:	f7ff fefd 	bl	80012a4 <LIS302DL_Y_calibrate>
	LIS302DL_Z_calibrate(4.0, -4.0);
 80014aa:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 80014ae:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80014b2:	f7ff ff23 	bl	80012fc <LIS302DL_Z_calibrate>
	taskEXIT_CRITICAL();
 80014b6:	f007 f9cd 	bl	8008854 <vPortExitCritical>
  /* Infinite loop */
  for(;;)
  {


	  myData = LIS302DL_GetDataScaled();
 80014ba:	f7ff fe3b 	bl	8001134 <LIS302DL_GetDataScaled>
 80014be:	eef0 6a40 	vmov.f32	s13, s0
 80014c2:	eeb0 7a60 	vmov.f32	s14, s1
 80014c6:	eef0 7a41 	vmov.f32	s15, s2
 80014ca:	edc7 6a05 	vstr	s13, [r7, #20]
 80014ce:	ed87 7a06 	vstr	s14, [r7, #24]
 80014d2:	edc7 7a07 	vstr	s15, [r7, #28]

	  xSemaphoreTake(PrintSemaphoreHandle, portMAX_DELAY);
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <StartAccTask+0xdc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f04f 31ff 	mov.w	r1, #4294967295
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 fa2e 	bl	8006940 <xQueueSemaphoreTake>

	  printf("\n\rx: %4.1f y: %4.1f z: %4.1f ", myData.x, myData.y, myData.z);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f836 	bl	8000558 <__aeabi_f2d>
 80014ec:	4680      	mov	r8, r0
 80014ee:	4689      	mov	r9, r1
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f830 	bl	8000558 <__aeabi_f2d>
 80014f8:	4604      	mov	r4, r0
 80014fa:	460d      	mov	r5, r1
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f82a 	bl	8000558 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800150c:	e9cd 4500 	strd	r4, r5, [sp]
 8001510:	4642      	mov	r2, r8
 8001512:	464b      	mov	r3, r9
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <StartAccTask+0xe0>)
 8001516:	f001 fd47 	bl	8002fa8 <printf_>

	  xSemaphoreGive(PrintSemaphoreHandle);
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <StartAccTask+0xdc>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	f004 ff92 	bl	800644c <xQueueGenericSend>

	  vTaskDelay(100 / portTICK_PERIOD_MS);
 8001528:	2064      	movs	r0, #100	; 0x64
 800152a:	f005 fe8b 	bl	8007244 <vTaskDelay>
	  myData = LIS302DL_GetDataScaled();
 800152e:	e7c4      	b.n	80014ba <StartAccTask+0x62>
 8001530:	20004ba0 	.word	0x20004ba0
 8001534:	20004b9c 	.word	0x20004b9c
 8001538:	0800b86c 	.word	0x0800b86c

0800153c <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]

	xSemaphoreTake(PrintUartMutexHandle, portMAX_DELAY);
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <_putchar+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 31ff 	mov.w	r1, #4294967295
 800154e:	4618      	mov	r0, r3
 8001550:	f005 f9f6 	bl	8006940 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2, (uint8_t*) &character, 1, 1000);
 8001554:	1df9      	adds	r1, r7, #7
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	2201      	movs	r2, #1
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <_putchar+0x40>)
 800155e:	f003 ffa0 	bl	80054a2 <HAL_UART_Transmit>
	xSemaphoreGive(PrintUartMutexHandle);
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <_putchar+0x3c>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	2300      	movs	r3, #0
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	f004 ff6e 	bl	800644c <xQueueGenericSend>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20004b94 	.word	0x20004b94
 800157c:	20004c40 	.word	0x20004c40

08001580 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_GPIO_Init+0xc4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a29      	ldr	r2, [pc, #164]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a22      	ldr	r2, [pc, #136]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_GPIO_Init+0xc4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2108      	movs	r1, #8
 80015ee:	4816      	ldr	r0, [pc, #88]	; (8001648 <MX_GPIO_Init+0xc8>)
 80015f0:	f002 fa34 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <MX_GPIO_Init+0xcc>)
 80015fc:	f002 fa2e 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001600:	2308      	movs	r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4619      	mov	r1, r3
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <MX_GPIO_Init+0xc8>)
 8001618:	f002 f89c 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800161c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_GPIO_Init+0xcc>)
 8001636:	f002 f88d 	bl	8003754 <HAL_GPIO_Init>

}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40021000 	.word	0x40021000
 800164c:	40020c00 	.word	0x40020c00

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001654:	f001 ff5a 	bl	800350c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001658:	f000 f80e 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165c:	f7ff ff90 	bl	8001580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001660:	f001 feb8 	bl	80033d4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001664:	f001 fcbc 	bl	8002fe0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001668:	f004 fa28 	bl	8005abc <osKernelInitialize>
  MX_FREERTOS_Init();
 800166c:	f7ff fe72 	bl	8001354 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001670:	f004 fa48 	bl	8005b04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001674:	e7fe      	b.n	8001674 <main+0x24>
	...

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2230      	movs	r2, #48	; 0x30
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f007 fbf8 	bl	8008e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <SystemClock_Config+0xb4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <SystemClock_Config+0xb4>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <SystemClock_Config+0xb4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <SystemClock_Config+0xb8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <SystemClock_Config+0xb8>)
 80016c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <SystemClock_Config+0xb8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	2310      	movs	r3, #16
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 f9eb 	bl	8003ac4 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80016f4:	f000 f830 	bl	8001758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fc4e 	bl	8003fb4 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800171e:	f000 f81b 	bl	8001758 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001746:	f001 ff03 	bl	8003550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40014400 	.word	0x40014400

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>

08001762 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <_out_char+0x1e>
    _putchar(character);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fed0 	bl	800153c <_putchar>
  }
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e002      	b.n	80017ba <_strnlen_s+0x16>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d004      	beq.n	80017cc <_strnlen_s+0x28>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	1e5a      	subs	r2, r3, #1
 80017c6:	603a      	str	r2, [r7, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f3      	bne.n	80017b4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1ad3      	subs	r3, r2, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	2b2f      	cmp	r3, #47	; 0x2f
 80017ec:	d904      	bls.n	80017f8 <_is_digit+0x1a>
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b39      	cmp	r3, #57	; 0x39
 80017f2:	d801      	bhi.n	80017f8 <_is_digit+0x1a>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <_is_digit+0x1c>
 80017f8:	2300      	movs	r3, #0
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001818:	e00e      	b.n	8001838 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4618      	mov	r0, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1c59      	adds	r1, r3, #1
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6011      	str	r1, [r2, #0]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4403      	add	r3, r0
 8001834:	3b30      	subs	r3, #48	; 0x30
 8001836:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ffcd 	bl	80017de <_is_digit>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1e7      	bne.n	800181a <_atoi+0xe>
  }
  return i;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d125      	bne.n	80018bc <_out_rev+0x68>
 8001870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d120      	bne.n	80018bc <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00a      	b.n	8001896 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	1c53      	adds	r3, r2, #1
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	68fc      	ldr	r4, [r7, #12]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	2020      	movs	r0, #32
 800188e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	429a      	cmp	r2, r3
 800189c:	d3f0      	bcc.n	8001880 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800189e:	e00d      	b.n	80018bc <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80018a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a2:	3b01      	subs	r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	4413      	add	r3, r2
 80018ac:	7818      	ldrb	r0, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	1c53      	adds	r3, r2, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	68fc      	ldr	r4, [r7, #12]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	47a0      	blx	r4
  while (len) {
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ee      	bne.n	80018a0 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80018c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00e      	beq.n	80018ea <_out_rev+0x96>
    while (idx - start_idx < width) {
 80018cc:	e007      	b.n	80018de <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	1c53      	adds	r3, r2, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	68fc      	ldr	r4, [r7, #12]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	2020      	movs	r0, #32
 80018dc:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d8f1      	bhi.n	80018ce <_out_rev+0x7a>
    }
  }

  return idx;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}

080018f4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d136      	bne.n	800197a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d018      	beq.n	8001944 <_ntoa_format+0x50>
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <_ntoa_format+0x50>
 800191c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <_ntoa_format+0x3a>
 8001924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00a      	beq.n	8001944 <_ntoa_format+0x50>
      width--;
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	3b01      	subs	r3, #1
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001934:	e006      	b.n	8001944 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	61fa      	str	r2, [r7, #28]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4413      	add	r3, r2
 8001940:	2230      	movs	r2, #48	; 0x30
 8001942:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	429a      	cmp	r2, r3
 800194a:	d20a      	bcs.n	8001962 <_ntoa_format+0x6e>
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b1f      	cmp	r3, #31
 8001950:	d9f1      	bls.n	8001936 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001952:	e006      	b.n	8001962 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	61fa      	str	r2, [r7, #28]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4413      	add	r3, r2
 800195e:	2230      	movs	r2, #48	; 0x30
 8001960:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <_ntoa_format+0x86>
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d202      	bcs.n	800197a <_ntoa_format+0x86>
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b1f      	cmp	r3, #31
 8001978:	d9ec      	bls.n	8001954 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d058      	beq.n	8001a36 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <_ntoa_format+0xc8>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <_ntoa_format+0xc8>
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	429a      	cmp	r2, r3
 800199a:	d003      	beq.n	80019a4 <_ntoa_format+0xb0>
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d10b      	bne.n	80019bc <_ntoa_format+0xc8>
      len--;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <_ntoa_format+0xc8>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d102      	bne.n	80019bc <_ntoa_format+0xc8>
        len--;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d10f      	bne.n	80019e2 <_ntoa_format+0xee>
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <_ntoa_format+0xee>
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b1f      	cmp	r3, #31
 80019d0:	d807      	bhi.n	80019e2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	61fa      	str	r2, [r7, #28]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4413      	add	r3, r2
 80019dc:	2278      	movs	r2, #120	; 0x78
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e01f      	b.n	8001a22 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d10f      	bne.n	8001a08 <_ntoa_format+0x114>
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00a      	beq.n	8001a08 <_ntoa_format+0x114>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b1f      	cmp	r3, #31
 80019f6:	d807      	bhi.n	8001a08 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	61fa      	str	r2, [r7, #28]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4413      	add	r3, r2
 8001a02:	2258      	movs	r2, #88	; 0x58
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e00c      	b.n	8001a22 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d109      	bne.n	8001a22 <_ntoa_format+0x12e>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	2b1f      	cmp	r3, #31
 8001a12:	d806      	bhi.n	8001a22 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	61fa      	str	r2, [r7, #28]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2262      	movs	r2, #98	; 0x62
 8001a20:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	2b1f      	cmp	r3, #31
 8001a26:	d806      	bhi.n	8001a36 <_ntoa_format+0x142>
      buf[len++] = '0';
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	61fa      	str	r2, [r7, #28]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4413      	add	r3, r2
 8001a32:	2230      	movs	r2, #48	; 0x30
 8001a34:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2b1f      	cmp	r3, #31
 8001a3a:	d824      	bhi.n	8001a86 <_ntoa_format+0x192>
    if (negative) {
 8001a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	61fa      	str	r2, [r7, #28]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	222d      	movs	r2, #45	; 0x2d
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e018      	b.n	8001a86 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	61fa      	str	r2, [r7, #28]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4413      	add	r3, r2
 8001a68:	222b      	movs	r2, #43	; 0x2b
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e00b      	b.n	8001a86 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	61fa      	str	r2, [r7, #28]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4413      	add	r3, r2
 8001a82:	2220      	movs	r2, #32
 8001a84:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff fed9 	bl	8001854 <_out_rev>
 8001aa2:	4603      	mov	r3, r0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	af08      	add	r7, sp, #32
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d103      	bne.n	8001acc <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac6:	f023 0310 	bic.w	r3, r3, #16
 8001aca:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <_ntoa_long+0x30>
 8001ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d033      	beq.n	8001b44 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8001adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ae0:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ae4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ae6:	fb01 f202 	mul.w	r2, r1, r2
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	d804      	bhi.n	8001b02 <_ntoa_long+0x56>
 8001af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001afc:	3330      	adds	r3, #48	; 0x30
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	e00d      	b.n	8001b1e <_ntoa_long+0x72>
 8001b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <_ntoa_long+0x64>
 8001b0c:	2241      	movs	r2, #65	; 0x41
 8001b0e:	e000      	b.n	8001b12 <_ntoa_long+0x66>
 8001b10:	2261      	movs	r2, #97	; 0x61
 8001b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3b0a      	subs	r3, #10
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	6379      	str	r1, [r7, #52]	; 0x34
 8001b24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b28:	440b      	add	r3, r1
 8001b2a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <_ntoa_long+0x98>
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b40:	2b1f      	cmp	r3, #31
 8001b42:	d9cb      	bls.n	8001adc <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b46:	9306      	str	r3, [sp, #24]
 8001b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b4a:	9305      	str	r3, [sp, #20]
 8001b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4e:	9304      	str	r3, [sp, #16]
 8001b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7ff fec2 	bl	80018f4 <_ntoa_format>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3738      	adds	r7, #56	; 0x38
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b096      	sub	sp, #88	; 0x58
 8001b7e:	af08      	add	r7, sp, #32
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001b8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b90:	4313      	orrs	r3, r2
 8001b92:	d103      	bne.n	8001b9c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b96:	f023 0310 	bic.w	r3, r3, #16
 8001b9a:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <_ntoa_long_long+0x34>
 8001ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001baa:	4313      	orrs	r3, r2
 8001bac:	d038      	beq.n	8001c20 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 8001bae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bb6:	f7ff f81f 	bl	8000bf8 <__aeabi_uldivmod>
 8001bba:	4613      	mov	r3, r2
 8001bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	d804      	bhi.n	8001bd2 <_ntoa_long_long+0x58>
 8001bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bcc:	3330      	adds	r3, #48	; 0x30
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	e00d      	b.n	8001bee <_ntoa_long_long+0x74>
 8001bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <_ntoa_long_long+0x66>
 8001bdc:	2241      	movs	r2, #65	; 0x41
 8001bde:	e000      	b.n	8001be2 <_ntoa_long_long+0x68>
 8001be0:	2261      	movs	r2, #97	; 0x61
 8001be2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001be6:	4413      	add	r3, r2
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	3b0a      	subs	r3, #10
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	6379      	str	r1, [r7, #52]	; 0x34
 8001bf4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001bfe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c06:	f7fe fff7 	bl	8000bf8 <__aeabi_uldivmod>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c16:	4313      	orrs	r3, r2
 8001c18:	d002      	beq.n	8001c20 <_ntoa_long_long+0xa6>
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	2b1f      	cmp	r3, #31
 8001c1e:	d9c6      	bls.n	8001bae <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c24:	9206      	str	r2, [sp, #24]
 8001c26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c28:	9205      	str	r2, [sp, #20]
 8001c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c2c:	9204      	str	r2, [sp, #16]
 8001c2e:	9303      	str	r3, [sp, #12]
 8001c30:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7ff fe54 	bl	80018f4 <_ntoa_format>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3738      	adds	r7, #56	; 0x38
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b09d      	sub	sp, #116	; 0x74
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	6178      	str	r0, [r7, #20]
 8001c60:	6139      	str	r1, [r7, #16]
 8001c62:	60fa      	str	r2, [r7, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c82:	f7fe ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10f      	bne.n	8001cac <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c8e:	9303      	str	r3, [sp, #12]
 8001c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2303      	movs	r3, #3
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	4ba9      	ldr	r3, [pc, #676]	; (8001f40 <_ftoa+0x2e8>)
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	6939      	ldr	r1, [r7, #16]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff fdd6 	bl	8001854 <_out_rev>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	e22b      	b.n	8002104 <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb8:	f7fe ff18 	bl	8000aec <__aeabi_dcmplt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00f      	beq.n	8001ce2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc4:	9303      	str	r3, [sp, #12]
 8001cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2304      	movs	r3, #4
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	4b9d      	ldr	r3, [pc, #628]	; (8001f44 <_ftoa+0x2ec>)
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7ff fdbb 	bl	8001854 <_out_rev>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	e210      	b.n	8002104 <_ftoa+0x4ac>
  if (value > DBL_MAX)
 8001ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce6:	4b98      	ldr	r3, [pc, #608]	; (8001f48 <_ftoa+0x2f0>)
 8001ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cec:	f7fe ff1c 	bl	8000b28 <__aeabi_dcmpgt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01d      	beq.n	8001d32 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <_ftoa+0xac>
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <_ftoa+0x2f4>)
 8001d02:	e000      	b.n	8001d06 <_ftoa+0xae>
 8001d04:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <_ftoa+0x2f8>)
 8001d06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d08:	f002 0204 	and.w	r2, r2, #4
 8001d0c:	2a00      	cmp	r2, #0
 8001d0e:	d001      	beq.n	8001d14 <_ftoa+0xbc>
 8001d10:	2204      	movs	r2, #4
 8001d12:	e000      	b.n	8001d16 <_ftoa+0xbe>
 8001d14:	2203      	movs	r2, #3
 8001d16:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001d18:	9103      	str	r1, [sp, #12]
 8001d1a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001d1c:	9102      	str	r1, [sp, #8]
 8001d1e:	9201      	str	r2, [sp, #4]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	6939      	ldr	r1, [r7, #16]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7ff fd93 	bl	8001854 <_out_rev>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	e1e8      	b.n	8002104 <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001d32:	a37f      	add	r3, pc, #508	; (adr r3, 8001f30 <_ftoa+0x2d8>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d3c:	f7fe fef4 	bl	8000b28 <__aeabi_dcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <_ftoa+0x102>
 8001d46:	a37c      	add	r3, pc, #496	; (adr r3, 8001f38 <_ftoa+0x2e0>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d50:	f7fe fecc 	bl	8000aec <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00f      	beq.n	8001d7a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	ed97 0b00 	vldr	d0, [r7]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	6939      	ldr	r1, [r7, #16]
 8001d70:	6978      	ldr	r0, [r7, #20]
 8001d72:	f000 f9d1 	bl	8002118 <_etoa>
 8001d76:	4603      	mov	r3, r0
 8001d78:	e1c4      	b.n	8002104 <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d8c:	f7fe feae 	bl	8000aec <__aeabi_dcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00e      	beq.n	8001db4 <_ftoa+0x15c>
    negative = true;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	f7fe fa76 	bl	8000298 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10e      	bne.n	8001ddc <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001dc2:	e00b      	b.n	8001ddc <_ftoa+0x184>
    buf[len++] = '0';
 8001dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dce:	4413      	add	r3, r2
 8001dd0:	2230      	movs	r2, #48	; 0x30
 8001dd2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dde:	2b1f      	cmp	r3, #31
 8001de0:	d802      	bhi.n	8001de8 <_ftoa+0x190>
 8001de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d8ed      	bhi.n	8001dc4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dec:	f7fe febc 	bl	8000b68 <__aeabi_d2iz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001df4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001df6:	f7fe fb9d 	bl	8000534 <__aeabi_i2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e02:	f7fe fa49 	bl	8000298 <__aeabi_dsub>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4a51      	ldr	r2, [pc, #324]	; (8001f54 <_ftoa+0x2fc>)
 8001e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fbf5 	bl	8000608 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001e26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e2a:	f7fe fec5 	bl	8000bb8 <__aeabi_d2uiz>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001e32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e34:	f7fe fb6e 	bl	8000514 <__aeabi_ui2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e40:	f7fe fa2a 	bl	8000298 <__aeabi_dsub>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <_ftoa+0x300>)
 8001e52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e56:	f7fe fe67 	bl	8000b28 <__aeabi_dcmpgt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d016      	beq.n	8001e8e <_ftoa+0x236>
    ++frac;
 8001e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e62:	3301      	adds	r3, #1
 8001e64:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001e66:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e68:	f7fe fb54 	bl	8000514 <__aeabi_ui2d>
 8001e6c:	4a39      	ldr	r2, [pc, #228]	; (8001f54 <_ftoa+0x2fc>)
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fe4c 	bl	8000b14 <__aeabi_dcmpge>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01a      	beq.n	8001eb8 <_ftoa+0x260>
      frac = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e88:	3301      	adds	r3, #1
 8001e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8001e8c:	e014      	b.n	8001eb8 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <_ftoa+0x300>)
 8001e94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e98:	f7fe fe28 	bl	8000aec <__aeabi_dcmplt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <_ftoa+0x25a>
 8001ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d134      	bne.n	8001f28 <_ftoa+0x2d0>
    diff = value - (double)whole;
 8001ebe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ec0:	f7fe fb38 	bl	8000534 <__aeabi_i2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ecc:	f7fe f9e4 	bl	8000298 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001ed8:	2301      	movs	r3, #1
 8001eda:	461c      	mov	r4, r3
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <_ftoa+0x300>)
 8001ee2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ee6:	f7fe fe01 	bl	8000aec <__aeabi_dcmplt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <_ftoa+0x29c>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	461c      	mov	r4, r3
 8001ef4:	b2e3      	uxtb	r3, r4
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <_ftoa+0x2bc>
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <_ftoa+0x300>)
 8001f06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f0a:	f7fe fe0d 	bl	8000b28 <__aeabi_dcmpgt>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d067      	beq.n	8001fe4 <_ftoa+0x38c>
 8001f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8085 	beq.w	800202a <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f22:	3301      	adds	r3, #1
 8001f24:	657b      	str	r3, [r7, #84]	; 0x54
 8001f26:	e080      	b.n	800202a <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8001f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001f2c:	e037      	b.n	8001f9e <_ftoa+0x346>
 8001f2e:	bf00      	nop
 8001f30:	00000000 	.word	0x00000000
 8001f34:	41cdcd65 	.word	0x41cdcd65
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	c1cdcd65 	.word	0xc1cdcd65
 8001f40:	0800b88c 	.word	0x0800b88c
 8001f44:	0800b890 	.word	0x0800b890
 8001f48:	7fefffff 	.word	0x7fefffff
 8001f4c:	0800b898 	.word	0x0800b898
 8001f50:	0800b8a0 	.word	0x0800b8a0
 8001f54:	0800b948 	.word	0x0800b948
 8001f58:	3fe00000 	.word	0x3fe00000
      --count;
 8001f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f64:	4b69      	ldr	r3, [pc, #420]	; (800210c <_ftoa+0x4b4>)
 8001f66:	fba3 2301 	umull	r2, r3, r3, r1
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	1aca      	subs	r2, r1, r3
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001f7e:	3230      	adds	r2, #48	; 0x30
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f86:	440b      	add	r3, r1
 8001f88:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	; (800210c <_ftoa+0x4b4>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	653b      	str	r3, [r7, #80]	; 0x50
 8001f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa0:	2b1f      	cmp	r3, #31
 8001fa2:	d9db      	bls.n	8001f5c <_ftoa+0x304>
 8001fa4:	e00a      	b.n	8001fbc <_ftoa+0x364>
        break;
 8001fa6:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001fa8:	e008      	b.n	8001fbc <_ftoa+0x364>
      buf[len++] = '0';
 8001faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2230      	movs	r2, #48	; 0x30
 8001fb8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbe:	2b1f      	cmp	r3, #31
 8001fc0:	d804      	bhi.n	8001fcc <_ftoa+0x374>
 8001fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ee      	bne.n	8001faa <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fce:	2b1f      	cmp	r3, #31
 8001fd0:	d82b      	bhi.n	800202a <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8001fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fdc:	4413      	add	r3, r2
 8001fde:	222e      	movs	r2, #46	; 0x2e
 8001fe0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001fe4:	e021      	b.n	800202a <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 8001fe6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fe8:	4b49      	ldr	r3, [pc, #292]	; (8002110 <_ftoa+0x4b8>)
 8001fea:	fb83 1302 	smull	r1, r3, r3, r2
 8001fee:	1099      	asrs	r1, r3, #2
 8001ff0:	17d3      	asrs	r3, r2, #31
 8001ff2:	1ac9      	subs	r1, r1, r3
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	1ad1      	subs	r1, r2, r3
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002006:	3230      	adds	r2, #48	; 0x30
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800200e:	440b      	add	r3, r1
 8002010:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002016:	4a3e      	ldr	r2, [pc, #248]	; (8002110 <_ftoa+0x4b8>)
 8002018:	fb82 1203 	smull	r1, r2, r2, r3
 800201c:	1092      	asrs	r2, r2, #2
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	657b      	str	r3, [r7, #84]	; 0x54
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800202a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202c:	2b1f      	cmp	r3, #31
 800202e:	d9da      	bls.n	8001fe6 <_ftoa+0x38e>
 8002030:	e000      	b.n	8002034 <_ftoa+0x3dc>
      break;
 8002032:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d124      	bne.n	8002088 <_ftoa+0x430>
 800203e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01f      	beq.n	8002088 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204a:	2b00      	cmp	r3, #0
 800204c:	d015      	beq.n	800207a <_ftoa+0x422>
 800204e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002052:	2b00      	cmp	r3, #0
 8002054:	d104      	bne.n	8002060 <_ftoa+0x408>
 8002056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00c      	beq.n	800207a <_ftoa+0x422>
      width--;
 8002060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002062:	3b01      	subs	r3, #1
 8002064:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002066:	e008      	b.n	800207a <_ftoa+0x422>
      buf[len++] = '0';
 8002068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800206e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002072:	4413      	add	r3, r2
 8002074:	2230      	movs	r2, #48	; 0x30
 8002076:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800207a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800207c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800207e:	429a      	cmp	r2, r3
 8002080:	d202      	bcs.n	8002088 <_ftoa+0x430>
 8002082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002084:	2b1f      	cmp	r3, #31
 8002086:	d9ef      	bls.n	8002068 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208a:	2b1f      	cmp	r3, #31
 800208c:	d82a      	bhi.n	80020e4 <_ftoa+0x48c>
    if (negative) {
 800208e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <_ftoa+0x452>
      buf[len++] = '-';
 8002096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800209c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020a0:	4413      	add	r3, r2
 80020a2:	222d      	movs	r2, #45	; 0x2d
 80020a4:	f803 2c48 	strb.w	r2, [r3, #-72]
 80020a8:	e01c      	b.n	80020e4 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 80020aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020be:	4413      	add	r3, r2
 80020c0:	222b      	movs	r2, #43	; 0x2b
 80020c2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80020c6:	e00d      	b.n	80020e4 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 80020c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <_ftoa+0x48c>
      buf[len++] = ' ';
 80020d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020dc:	4413      	add	r3, r2
 80020de:	2220      	movs	r2, #32
 80020e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80020e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e6:	9303      	str	r3, [sp, #12]
 80020e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6939      	ldr	r1, [r7, #16]
 80020fc:	6978      	ldr	r0, [r7, #20]
 80020fe:	f7ff fba9 	bl	8001854 <_out_rev>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3764      	adds	r7, #100	; 0x64
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}
 800210c:	cccccccd 	.word	0xcccccccd
 8002110:	66666667 	.word	0x66666667
 8002114:	00000000 	.word	0x00000000

08002118 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	b09d      	sub	sp, #116	; 0x74
 800211e:	af06      	add	r7, sp, #24
 8002120:	61f8      	str	r0, [r7, #28]
 8002122:	61b9      	str	r1, [r7, #24]
 8002124:	617a      	str	r2, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800212c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002130:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002134:	f7fe fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d014      	beq.n	8002168 <_etoa+0x50>
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	4bc3      	ldr	r3, [pc, #780]	; (8002450 <_etoa+0x338>)
 8002144:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002148:	f7fe fcee 	bl	8000b28 <__aeabi_dcmpgt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <_etoa+0x50>
 8002152:	f04f 32ff 	mov.w	r2, #4294967295
 8002156:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800215a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800215e:	f7fe fcc5 	bl	8000aec <__aeabi_dcmplt>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	ed97 0b02 	vldr	d0, [r7, #8]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	69f8      	ldr	r0, [r7, #28]
 8002186:	f7ff fd67 	bl	8001c58 <_ftoa>
 800218a:	4603      	mov	r3, r0
 800218c:	e245      	b.n	800261a <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 800218e:	2301      	movs	r3, #1
 8002190:	461e      	mov	r6, r3
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219e:	f7fe fca5 	bl	8000aec <__aeabi_dcmplt>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <_etoa+0x94>
 80021a8:	2300      	movs	r3, #0
 80021aa:	461e      	mov	r6, r3
 80021ac:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 80021b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <_etoa+0xac>
    value = -value;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80021c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80021d0:	2306      	movs	r3, #6
 80021d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80021d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021da:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80021de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	0d0a      	lsrs	r2, r1, #20
 80021ec:	2300      	movs	r3, #0
 80021ee:	4613      	mov	r3, r2
 80021f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80021fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002202:	4994      	ldr	r1, [pc, #592]	; (8002454 <_etoa+0x33c>)
 8002204:	ea02 0400 	and.w	r4, r2, r0
 8002208:	ea03 0501 	and.w	r5, r3, r1
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b91      	ldr	r3, [pc, #580]	; (8002458 <_etoa+0x340>)
 8002212:	ea44 0802 	orr.w	r8, r4, r2
 8002216:	ea45 0903 	orr.w	r9, r5, r3
 800221a:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800221e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002220:	f7fe f988 	bl	8000534 <__aeabi_i2d>
 8002224:	a37e      	add	r3, pc, #504	; (adr r3, 8002420 <_etoa+0x308>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fe f9ed 	bl	8000608 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	a37c      	add	r3, pc, #496	; (adr r3, 8002428 <_etoa+0x310>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe f82e 	bl	800029c <__adddf3>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4614      	mov	r4, r2
 8002246:	461d      	mov	r5, r3
 8002248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b82      	ldr	r3, [pc, #520]	; (800245c <_etoa+0x344>)
 8002252:	f7fe f821 	bl	8000298 <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	a374      	add	r3, pc, #464	; (adr r3, 8002430 <_etoa+0x318>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f9d0 	bl	8000608 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f814 	bl	800029c <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc74 	bl	8000b68 <__aeabi_d2iz>
 8002280:	4603      	mov	r3, r0
 8002282:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002284:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002286:	f7fe f955 	bl	8000534 <__aeabi_i2d>
 800228a:	a36b      	add	r3, pc, #428	; (adr r3, 8002438 <_etoa+0x320>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	f7fe f9ba 	bl	8000608 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <_etoa+0x348>)
 80022a2:	f7fd fffb 	bl	800029c <__adddf3>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc5b 	bl	8000b68 <__aeabi_d2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80022b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80022b8:	f7fe f93c 	bl	8000534 <__aeabi_i2d>
 80022bc:	a360      	add	r3, pc, #384	; (adr r3, 8002440 <_etoa+0x328>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fe f9a1 	bl	8000608 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4614      	mov	r4, r2
 80022cc:	461d      	mov	r5, r3
 80022ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022d0:	f7fe f930 	bl	8000534 <__aeabi_i2d>
 80022d4:	a35c      	add	r3, pc, #368	; (adr r3, 8002448 <_etoa+0x330>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe f995 	bl	8000608 <__aeabi_dmul>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4620      	mov	r0, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7fd ffd7 	bl	8000298 <__aeabi_dsub>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80022f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022fa:	f7fe f985 	bl	8000608 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002308:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800230c:	4618      	mov	r0, r3
 800230e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	0503      	lsls	r3, r0, #20
 800231c:	2200      	movs	r2, #0
 800231e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002322:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002326:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	f7fd ffb5 	bl	800029c <__adddf3>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800233e:	f04f 0000 	mov.w	r0, #0
 8002342:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002346:	f7fd ffa7 	bl	8000298 <__aeabi_dsub>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4692      	mov	sl, r2
 8002350:	469b      	mov	fp, r3
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <_etoa+0x34c>)
 8002358:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800235c:	f7fe fa7e 	bl	800085c <__aeabi_ddiv>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <_etoa+0x350>)
 800236e:	f7fd ff95 	bl	800029c <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800237a:	f7fe fa6f 	bl	800085c <__aeabi_ddiv>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <_etoa+0x354>)
 800238c:	f7fd ff86 	bl	800029c <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002398:	f7fe fa60 	bl	800085c <__aeabi_ddiv>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4650      	mov	r0, sl
 80023a2:	4659      	mov	r1, fp
 80023a4:	f7fd ff7a 	bl	800029c <__adddf3>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4640      	mov	r0, r8
 80023ae:	4649      	mov	r1, r9
 80023b0:	f7fe fa54 	bl	800085c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <_etoa+0x340>)
 80023c2:	f7fd ff6b 	bl	800029c <__adddf3>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fe f91b 	bl	8000608 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80023da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e2:	f7fe fb83 	bl	8000aec <__aeabi_dcmplt>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <_etoa+0x2f0>
    expval--;
 80023ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ee:	3b01      	subs	r3, #1
 80023f0:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80023f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <_etoa+0x350>)
 80023fc:	f7fe fa2e 	bl	800085c <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240a:	2b63      	cmp	r3, #99	; 0x63
 800240c:	dc30      	bgt.n	8002470 <_etoa+0x358>
 800240e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002410:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002414:	db2c      	blt.n	8002470 <_etoa+0x358>
 8002416:	2304      	movs	r3, #4
 8002418:	e02b      	b.n	8002472 <_etoa+0x35a>
 800241a:	bf00      	nop
 800241c:	f3af 8000 	nop.w
 8002420:	509f79fb 	.word	0x509f79fb
 8002424:	3fd34413 	.word	0x3fd34413
 8002428:	8b60c8b3 	.word	0x8b60c8b3
 800242c:	3fc68a28 	.word	0x3fc68a28
 8002430:	636f4361 	.word	0x636f4361
 8002434:	3fd287a7 	.word	0x3fd287a7
 8002438:	0979a371 	.word	0x0979a371
 800243c:	400a934f 	.word	0x400a934f
 8002440:	bbb55516 	.word	0xbbb55516
 8002444:	40026bb1 	.word	0x40026bb1
 8002448:	fefa39ef 	.word	0xfefa39ef
 800244c:	3fe62e42 	.word	0x3fe62e42
 8002450:	7fefffff 	.word	0x7fefffff
 8002454:	000fffff 	.word	0x000fffff
 8002458:	3ff00000 	.word	0x3ff00000
 800245c:	3ff80000 	.word	0x3ff80000
 8002460:	3fe00000 	.word	0x3fe00000
 8002464:	402c0000 	.word	0x402c0000
 8002468:	40240000 	.word	0x40240000
 800246c:	40180000 	.word	0x40180000
 8002470:	2305      	movs	r3, #5
 8002472:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03d      	beq.n	80024fc <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002480:	a369      	add	r3, pc, #420	; (adr r3, 8002628 <_etoa+0x510>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800248a:	f7fe fb43 	bl	8000b14 <__aeabi_dcmpge>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d024      	beq.n	80024de <_etoa+0x3c6>
 8002494:	a366      	add	r3, pc, #408	; (adr r3, 8002630 <_etoa+0x518>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800249e:	f7fe fb25 	bl	8000aec <__aeabi_dcmplt>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01a      	beq.n	80024de <_etoa+0x3c6>
      if ((int)prec > expval) {
 80024a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ae:	429a      	cmp	r2, r3
 80024b0:	da07      	bge.n	80024c2 <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 80024b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024c0:	e002      	b.n	80024c8 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80024c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	657b      	str	r3, [r7, #84]	; 0x54
 80024dc:	e00e      	b.n	80024fc <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80024de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <_etoa+0x3e4>
 80024e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <_etoa+0x3e4>
        --prec;
 80024f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80024fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002500:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8002502:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002508:	429a      	cmp	r2, r3
 800250a:	d904      	bls.n	8002516 <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800250c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800250e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002514:	e001      	b.n	800251a <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800251a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <_etoa+0x418>
 8002526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <_etoa+0x432>
    value /= conv.F;
 8002536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800253a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800253e:	f7fe f98d 	bl	800085c <__aeabi_ddiv>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800254e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <_etoa+0x44c>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	e003      	b.n	800256c <_etoa+0x454>
 8002564:	ed97 7b02 	vldr	d7, [r7, #8]
 8002568:	ed87 7b00 	vstr	d7, [r7]
 800256c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	ed97 0b00 	vldr	d0, [r7]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	69b9      	ldr	r1, [r7, #24]
 800258a:	69f8      	ldr	r0, [r7, #28]
 800258c:	f7ff fb64 	bl	8001c58 <_ftoa>
 8002590:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03f      	beq.n	8002618 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <_etoa+0x490>
 80025a4:	2045      	movs	r0, #69	; 0x45
 80025a6:	e000      	b.n	80025aa <_etoa+0x492>
 80025a8:	2065      	movs	r0, #101	; 0x65
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	1c53      	adds	r3, r2, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	69fc      	ldr	r4, [r7, #28]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80025b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bfb8      	it	lt
 80025be:	425b      	neglt	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	0fdb      	lsrs	r3, r3, #31
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025ca:	3a01      	subs	r2, #1
 80025cc:	2105      	movs	r1, #5
 80025ce:	9105      	str	r1, [sp, #20]
 80025d0:	9204      	str	r2, [sp, #16]
 80025d2:	2200      	movs	r2, #0
 80025d4:	9203      	str	r2, [sp, #12]
 80025d6:	220a      	movs	r2, #10
 80025d8:	9202      	str	r2, [sp, #8]
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	9000      	str	r0, [sp, #0]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	69f8      	ldr	r0, [r7, #28]
 80025e6:	f7ff fa61 	bl	8001aac <_ntoa_long>
 80025ea:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80025ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00f      	beq.n	8002618 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80025f8:	e007      	b.n	800260a <_etoa+0x4f2>
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	1c53      	adds	r3, r2, #1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	69fc      	ldr	r4, [r7, #28]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	69b9      	ldr	r1, [r7, #24]
 8002606:	2020      	movs	r0, #32
 8002608:	47a0      	blx	r4
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002614:	429a      	cmp	r2, r3
 8002616:	d8f0      	bhi.n	80025fa <_etoa+0x4e2>
    }
  }
  return idx;
 8002618:	697b      	ldr	r3, [r7, #20]
}
 800261a:	4618      	mov	r0, r3
 800261c:	375c      	adds	r7, #92	; 0x5c
 800261e:	46bd      	mov	sp, r7
 8002620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002624:	f3af 8000 	nop.w
 8002628:	eb1c432d 	.word	0xeb1c432d
 800262c:	3f1a36e2 	.word	0x3f1a36e2
 8002630:	00000000 	.word	0x00000000
 8002634:	412e8480 	.word	0x412e8480

08002638 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b0a0      	sub	sp, #128	; 0x80
 800263c:	af0a      	add	r7, sp, #40	; 0x28
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 8494 	bne.w	8002f7a <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 8002652:	4ba0      	ldr	r3, [pc, #640]	; (80028d4 <_vsnprintf+0x29c>)
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002656:	f000 bc90 	b.w	8002f7a <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b25      	cmp	r3, #37	; 0x25
 8002660:	d00d      	beq.n	800267e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7818      	ldrb	r0, [r3, #0]
 8002666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002668:	1c53      	adds	r3, r2, #1
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
 800266c:	68fc      	ldr	r4, [r7, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	47a0      	blx	r4
      format++;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	603b      	str	r3, [r7, #0]
      continue;
 800267a:	f000 bc7e 	b.w	8002f7a <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	3b20      	subs	r3, #32
 800268e:	2b10      	cmp	r3, #16
 8002690:	d856      	bhi.n	8002740 <_vsnprintf+0x108>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <_vsnprintf+0x60>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	08002719 	.word	0x08002719
 800269c:	08002741 	.word	0x08002741
 80026a0:	08002741 	.word	0x08002741
 80026a4:	0800272d 	.word	0x0800272d
 80026a8:	08002741 	.word	0x08002741
 80026ac:	08002741 	.word	0x08002741
 80026b0:	08002741 	.word	0x08002741
 80026b4:	08002741 	.word	0x08002741
 80026b8:	08002741 	.word	0x08002741
 80026bc:	08002741 	.word	0x08002741
 80026c0:	08002741 	.word	0x08002741
 80026c4:	08002705 	.word	0x08002705
 80026c8:	08002741 	.word	0x08002741
 80026cc:	080026f1 	.word	0x080026f1
 80026d0:	08002741 	.word	0x08002741
 80026d4:	08002741 	.word	0x08002741
 80026d8:	080026dd 	.word	0x080026dd
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	657b      	str	r3, [r7, #84]	; 0x54
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	2301      	movs	r3, #1
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ee:	e02a      	b.n	8002746 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80026f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	657b      	str	r3, [r7, #84]	; 0x54
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	2301      	movs	r3, #1
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
 8002702:	e020      	b.n	8002746 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	657b      	str	r3, [r7, #84]	; 0x54
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
 8002716:	e016      	b.n	8002746 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	657b      	str	r3, [r7, #84]	; 0x54
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	2301      	movs	r3, #1
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
 800272a:	e00c      	b.n	8002746 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272e:	f043 0310 	orr.w	r3, r3, #16
 8002732:	657b      	str	r3, [r7, #84]	; 0x54
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	2301      	movs	r3, #1
 800273c:	64bb      	str	r3, [r7, #72]	; 0x48
 800273e:	e002      	b.n	8002746 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002740:	2300      	movs	r3, #0
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48
 8002744:	bf00      	nop
      }
    } while (n);
 8002746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002748:	2b00      	cmp	r3, #0
 800274a:	d19d      	bne.n	8002688 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f842 	bl	80017de <_is_digit>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <_vsnprintf+0x134>
      width = _atoi(&format);
 8002760:	463b      	mov	r3, r7
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f852 	bl	800180c <_atoi>
 8002768:	6538      	str	r0, [r7, #80]	; 0x50
 800276a:	e018      	b.n	800279e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b2a      	cmp	r3, #42	; 0x2a
 8002772:	d114      	bne.n	800279e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8002774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	66ba      	str	r2, [r7, #104]	; 0x68
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	2b00      	cmp	r3, #0
 8002782:	da07      	bge.n	8002794 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	425b      	negs	r3, r3
 8002790:	653b      	str	r3, [r7, #80]	; 0x50
 8002792:	e001      	b.n	8002798 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b2e      	cmp	r3, #46	; 0x2e
 80027a8:	d124      	bne.n	80027f4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b0:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff f80e 	bl	80017de <_is_digit>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80027c8:	463b      	mov	r3, r7
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f81e 	bl	800180c <_atoi>
 80027d0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80027d2:	e00f      	b.n	80027f4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b2a      	cmp	r3, #42	; 0x2a
 80027da:	d10b      	bne.n	80027f4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80027dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027de:	1d1a      	adds	r2, r3, #4
 80027e0:	66ba      	str	r2, [r7, #104]	; 0x68
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80027ec:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	3b68      	subs	r3, #104	; 0x68
 80027fa:	2b12      	cmp	r3, #18
 80027fc:	d866      	bhi.n	80028cc <_vsnprintf+0x294>
 80027fe:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <_vsnprintf+0x1cc>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002877 	.word	0x08002877
 8002808:	080028cd 	.word	0x080028cd
 800280c:	080028ad 	.word	0x080028ad
 8002810:	080028cd 	.word	0x080028cd
 8002814:	08002851 	.word	0x08002851
 8002818:	080028cd 	.word	0x080028cd
 800281c:	080028cd 	.word	0x080028cd
 8002820:	080028cd 	.word	0x080028cd
 8002824:	080028cd 	.word	0x080028cd
 8002828:	080028cd 	.word	0x080028cd
 800282c:	080028cd 	.word	0x080028cd
 8002830:	080028cd 	.word	0x080028cd
 8002834:	0800289d 	.word	0x0800289d
 8002838:	080028cd 	.word	0x080028cd
 800283c:	080028cd 	.word	0x080028cd
 8002840:	080028cd 	.word	0x080028cd
 8002844:	080028cd 	.word	0x080028cd
 8002848:	080028cd 	.word	0x080028cd
 800284c:	080028bd 	.word	0x080028bd
      case 'l' :
        flags |= FLAGS_LONG;
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b6c      	cmp	r3, #108	; 0x6c
 8002864:	d134      	bne.n	80028d0 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	603b      	str	r3, [r7, #0]
        }
        break;
 8002874:	e02c      	b.n	80028d0 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b68      	cmp	r3, #104	; 0x68
 800288a:	d125      	bne.n	80028d8 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002892:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	603b      	str	r3, [r7, #0]
        }
        break;
 800289a:	e01d      	b.n	80028d8 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800289c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
        break;
 80028aa:	e016      	b.n	80028da <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	603b      	str	r3, [r7, #0]
        break;
 80028ba:	e00e      	b.n	80028da <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80028bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	603b      	str	r3, [r7, #0]
        break;
 80028ca:	e006      	b.n	80028da <_vsnprintf+0x2a2>
      default :
        break;
 80028cc:	bf00      	nop
 80028ce:	e004      	b.n	80028da <_vsnprintf+0x2a2>
        break;
 80028d0:	bf00      	nop
 80028d2:	e002      	b.n	80028da <_vsnprintf+0x2a2>
 80028d4:	08001763 	.word	0x08001763
        break;
 80028d8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3b25      	subs	r3, #37	; 0x25
 80028e0:	2b53      	cmp	r3, #83	; 0x53
 80028e2:	f200 833d 	bhi.w	8002f60 <_vsnprintf+0x928>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <_vsnprintf+0x2b4>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	08002f49 	.word	0x08002f49
 80028f0:	08002f61 	.word	0x08002f61
 80028f4:	08002f61 	.word	0x08002f61
 80028f8:	08002f61 	.word	0x08002f61
 80028fc:	08002f61 	.word	0x08002f61
 8002900:	08002f61 	.word	0x08002f61
 8002904:	08002f61 	.word	0x08002f61
 8002908:	08002f61 	.word	0x08002f61
 800290c:	08002f61 	.word	0x08002f61
 8002910:	08002f61 	.word	0x08002f61
 8002914:	08002f61 	.word	0x08002f61
 8002918:	08002f61 	.word	0x08002f61
 800291c:	08002f61 	.word	0x08002f61
 8002920:	08002f61 	.word	0x08002f61
 8002924:	08002f61 	.word	0x08002f61
 8002928:	08002f61 	.word	0x08002f61
 800292c:	08002f61 	.word	0x08002f61
 8002930:	08002f61 	.word	0x08002f61
 8002934:	08002f61 	.word	0x08002f61
 8002938:	08002f61 	.word	0x08002f61
 800293c:	08002f61 	.word	0x08002f61
 8002940:	08002f61 	.word	0x08002f61
 8002944:	08002f61 	.word	0x08002f61
 8002948:	08002f61 	.word	0x08002f61
 800294c:	08002f61 	.word	0x08002f61
 8002950:	08002f61 	.word	0x08002f61
 8002954:	08002f61 	.word	0x08002f61
 8002958:	08002f61 	.word	0x08002f61
 800295c:	08002f61 	.word	0x08002f61
 8002960:	08002f61 	.word	0x08002f61
 8002964:	08002f61 	.word	0x08002f61
 8002968:	08002f61 	.word	0x08002f61
 800296c:	08002d17 	.word	0x08002d17
 8002970:	08002ccb 	.word	0x08002ccb
 8002974:	08002d17 	.word	0x08002d17
 8002978:	08002f61 	.word	0x08002f61
 800297c:	08002f61 	.word	0x08002f61
 8002980:	08002f61 	.word	0x08002f61
 8002984:	08002f61 	.word	0x08002f61
 8002988:	08002f61 	.word	0x08002f61
 800298c:	08002f61 	.word	0x08002f61
 8002990:	08002f61 	.word	0x08002f61
 8002994:	08002f61 	.word	0x08002f61
 8002998:	08002f61 	.word	0x08002f61
 800299c:	08002f61 	.word	0x08002f61
 80029a0:	08002f61 	.word	0x08002f61
 80029a4:	08002f61 	.word	0x08002f61
 80029a8:	08002f61 	.word	0x08002f61
 80029ac:	08002f61 	.word	0x08002f61
 80029b0:	08002f61 	.word	0x08002f61
 80029b4:	08002f61 	.word	0x08002f61
 80029b8:	08002a3d 	.word	0x08002a3d
 80029bc:	08002f61 	.word	0x08002f61
 80029c0:	08002f61 	.word	0x08002f61
 80029c4:	08002f61 	.word	0x08002f61
 80029c8:	08002f61 	.word	0x08002f61
 80029cc:	08002f61 	.word	0x08002f61
 80029d0:	08002f61 	.word	0x08002f61
 80029d4:	08002f61 	.word	0x08002f61
 80029d8:	08002f61 	.word	0x08002f61
 80029dc:	08002f61 	.word	0x08002f61
 80029e0:	08002a3d 	.word	0x08002a3d
 80029e4:	08002d83 	.word	0x08002d83
 80029e8:	08002a3d 	.word	0x08002a3d
 80029ec:	08002d17 	.word	0x08002d17
 80029f0:	08002ccb 	.word	0x08002ccb
 80029f4:	08002d17 	.word	0x08002d17
 80029f8:	08002f61 	.word	0x08002f61
 80029fc:	08002a3d 	.word	0x08002a3d
 8002a00:	08002f61 	.word	0x08002f61
 8002a04:	08002f61 	.word	0x08002f61
 8002a08:	08002f61 	.word	0x08002f61
 8002a0c:	08002f61 	.word	0x08002f61
 8002a10:	08002f61 	.word	0x08002f61
 8002a14:	08002a3d 	.word	0x08002a3d
 8002a18:	08002ebb 	.word	0x08002ebb
 8002a1c:	08002f61 	.word	0x08002f61
 8002a20:	08002f61 	.word	0x08002f61
 8002a24:	08002df7 	.word	0x08002df7
 8002a28:	08002f61 	.word	0x08002f61
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002f61 	.word	0x08002f61
 8002a34:	08002f61 	.word	0x08002f61
 8002a38:	08002a3d 	.word	0x08002a3d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b78      	cmp	r3, #120	; 0x78
 8002a42:	d003      	beq.n	8002a4c <_vsnprintf+0x414>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b58      	cmp	r3, #88	; 0x58
 8002a4a:	d102      	bne.n	8002a52 <_vsnprintf+0x41a>
          base = 16U;
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a50:	e013      	b.n	8002a7a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b6f      	cmp	r3, #111	; 0x6f
 8002a58:	d102      	bne.n	8002a60 <_vsnprintf+0x428>
          base =  8U;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5e:	e00c      	b.n	8002a7a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b62      	cmp	r3, #98	; 0x62
 8002a66:	d102      	bne.n	8002a6e <_vsnprintf+0x436>
          base =  2U;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a6c:	e005      	b.n	8002a7a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002a6e:	230a      	movs	r3, #10
 8002a70:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	f023 0310 	bic.w	r3, r3, #16
 8002a78:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b58      	cmp	r3, #88	; 0x58
 8002a80:	d103      	bne.n	8002a8a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8002a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a84:	f043 0320 	orr.w	r3, r3, #32
 8002a88:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b69      	cmp	r3, #105	; 0x69
 8002a90:	d007      	beq.n	8002aa2 <_vsnprintf+0x46a>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d003      	beq.n	8002aa2 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	f023 030c 	bic.w	r3, r3, #12
 8002aa0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8002aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b69      	cmp	r3, #105	; 0x69
 8002aba:	d004      	beq.n	8002ac6 <_vsnprintf+0x48e>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	f040 808e 	bne.w	8002be2 <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02f      	beq.n	8002b30 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad2:	3307      	adds	r3, #7
 8002ad4:	f023 0307 	bic.w	r3, r3, #7
 8002ad8:	f103 0208 	add.w	r2, r3, #8
 8002adc:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002ae6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	f173 0100 	sbcs.w	r1, r3, #0
 8002af0:	da02      	bge.n	8002af8 <_vsnprintf+0x4c0>
 8002af2:	4252      	negs	r2, r2
 8002af4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	0fdb      	lsrs	r3, r3, #31
 8002b00:	b2dc      	uxtb	r4, r3
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	461a      	mov	r2, r3
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002b0c:	9508      	str	r5, [sp, #32]
 8002b0e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002b10:	9507      	str	r5, [sp, #28]
 8002b12:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002b14:	9506      	str	r5, [sp, #24]
 8002b16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b1a:	9402      	str	r4, [sp, #8]
 8002b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f7ff f827 	bl	8001b7a <_ntoa_long_long>
 8002b2c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002b2e:	e0c8      	b.n	8002cc2 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01e      	beq.n	8002b78 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8002b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b3c:	1d1a      	adds	r2, r3, #4
 8002b3e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bfb8      	it	lt
 8002b4a:	425b      	neglt	r3, r3
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	0fdb      	lsrs	r3, r3, #31
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b56:	9205      	str	r2, [sp, #20]
 8002b58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b5a:	9204      	str	r2, [sp, #16]
 8002b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b5e:	9203      	str	r2, [sp, #12]
 8002b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b62:	9202      	str	r2, [sp, #8]
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	9100      	str	r1, [sp, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7fe ff9c 	bl	8001aac <_ntoa_long>
 8002b74:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002b76:	e0a4      	b.n	8002cc2 <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <_vsnprintf+0x556>
 8002b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b84:	1d1a      	adds	r2, r3, #4
 8002b86:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e00e      	b.n	8002bac <_vsnprintf+0x574>
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <_vsnprintf+0x56c>
 8002b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9a:	1d1a      	adds	r2, r3, #4
 8002b9c:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b21b      	sxth	r3, r3
 8002ba2:	e003      	b.n	8002bac <_vsnprintf+0x574>
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba6:	1d1a      	adds	r2, r3, #4
 8002ba8:	66ba      	str	r2, [r7, #104]	; 0x68
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bfb8      	it	lt
 8002bb4:	425b      	neglt	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	0fdb      	lsrs	r3, r3, #31
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bc0:	9205      	str	r2, [sp, #20]
 8002bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bc4:	9204      	str	r2, [sp, #16]
 8002bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc8:	9203      	str	r2, [sp, #12]
 8002bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bcc:	9202      	str	r2, [sp, #8]
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	9100      	str	r1, [sp, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7fe ff67 	bl	8001aac <_ntoa_long>
 8002bde:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002be0:	e06f      	b.n	8002cc2 <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bee:	3307      	adds	r3, #7
 8002bf0:	f023 0307 	bic.w	r3, r3, #7
 8002bf4:	f103 0208 	add.w	r2, r3, #8
 8002bf8:	66ba      	str	r2, [r7, #104]	; 0x68
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c00:	4608      	mov	r0, r1
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002c08:	9408      	str	r4, [sp, #32]
 8002c0a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002c0c:	9407      	str	r4, [sp, #28]
 8002c0e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002c10:	9406      	str	r4, [sp, #24]
 8002c12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c16:	2100      	movs	r1, #0
 8002c18:	9102      	str	r1, [sp, #8]
 8002c1a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7fe ffa8 	bl	8001b7a <_ntoa_long_long>
 8002c2a:	6478      	str	r0, [r7, #68]	; 0x44
 8002c2c:	e049      	b.n	8002cc2 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d016      	beq.n	8002c66 <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c42:	9205      	str	r2, [sp, #20]
 8002c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c46:	9204      	str	r2, [sp, #16]
 8002c48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c4a:	9203      	str	r2, [sp, #12]
 8002c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c4e:	9202      	str	r2, [sp, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	9201      	str	r2, [sp, #4]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7fe ff25 	bl	8001aac <_ntoa_long>
 8002c62:	6478      	str	r0, [r7, #68]	; 0x44
 8002c64:	e02d      	b.n	8002cc2 <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <_vsnprintf+0x644>
 8002c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c72:	1d1a      	adds	r2, r3, #4
 8002c74:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e00e      	b.n	8002c9a <_vsnprintf+0x662>
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <_vsnprintf+0x65a>
 8002c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c88:	1d1a      	adds	r2, r3, #4
 8002c8a:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	e003      	b.n	8002c9a <_vsnprintf+0x662>
 8002c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c94:	1d1a      	adds	r2, r3, #4
 8002c96:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9e:	9305      	str	r3, [sp, #20]
 8002ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7fe fef6 	bl	8001aac <_ntoa_long>
 8002cc0:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	603b      	str	r3, [r7, #0]
        break;
 8002cc8:	e157      	b.n	8002f7a <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b46      	cmp	r3, #70	; 0x46
 8002cd0:	d103      	bne.n	8002cda <_vsnprintf+0x6a2>
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd4:	f043 0320 	orr.w	r3, r3, #32
 8002cd8:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cdc:	3307      	adds	r3, #7
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	f103 0208 	add.w	r2, r3, #8
 8002ce6:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ce8:	ed93 7b00 	vldr	d7, [r3]
 8002cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cee:	9302      	str	r3, [sp, #8]
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cfc:	eef0 0a67 	vmov.f32	s1, s15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7fe ffa6 	bl	8001c58 <_ftoa>
 8002d0c:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	603b      	str	r3, [r7, #0]
        break;
 8002d14:	e131      	b.n	8002f7a <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b67      	cmp	r3, #103	; 0x67
 8002d1c:	d003      	beq.n	8002d26 <_vsnprintf+0x6ee>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b47      	cmp	r3, #71	; 0x47
 8002d24:	d103      	bne.n	8002d2e <_vsnprintf+0x6f6>
 8002d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d2c:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b45      	cmp	r3, #69	; 0x45
 8002d34:	d003      	beq.n	8002d3e <_vsnprintf+0x706>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b47      	cmp	r3, #71	; 0x47
 8002d3c:	d103      	bne.n	8002d46 <_vsnprintf+0x70e>
 8002d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d40:	f043 0320 	orr.w	r3, r3, #32
 8002d44:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d48:	3307      	adds	r3, #7
 8002d4a:	f023 0307 	bic.w	r3, r3, #7
 8002d4e:	f103 0208 	add.w	r2, r3, #8
 8002d52:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d54:	ed93 7b00 	vldr	d7, [r3]
 8002d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5a:	9302      	str	r3, [sp, #8]
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	eeb0 0a47 	vmov.f32	s0, s14
 8002d68:	eef0 0a67 	vmov.f32	s1, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff f9d0 	bl	8002118 <_etoa>
 8002d78:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	603b      	str	r3, [r7, #0]
        break;
 8002d80:	e0fb      	b.n	8002f7a <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002d82:	2301      	movs	r3, #1
 8002d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10e      	bne.n	8002dae <_vsnprintf+0x776>
          while (l++ < width) {
 8002d90:	e007      	b.n	8002da2 <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8002d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d94:	1c53      	adds	r3, r2, #1
 8002d96:	647b      	str	r3, [r7, #68]	; 0x44
 8002d98:	68fc      	ldr	r4, [r7, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	2020      	movs	r0, #32
 8002da0:	47a0      	blx	r4
          while (l++ < width) {
 8002da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002da8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d8f1      	bhi.n	8002d92 <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	66ba      	str	r2, [r7, #104]	; 0x68
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b2d8      	uxtb	r0, r3
 8002db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dba:	1c53      	adds	r3, r2, #1
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dbe:	68fc      	ldr	r4, [r7, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00e      	beq.n	8002dee <_vsnprintf+0x7b6>
          while (l++ < width) {
 8002dd0:	e007      	b.n	8002de2 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dd4:	1c53      	adds	r3, r2, #1
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd8:	68fc      	ldr	r4, [r7, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	2020      	movs	r0, #32
 8002de0:	47a0      	blx	r4
          while (l++ < width) {
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002de8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d8f1      	bhi.n	8002dd2 <_vsnprintf+0x79a>
          }
        }
        format++;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	603b      	str	r3, [r7, #0]
        break;
 8002df4:	e0c1      	b.n	8002f7a <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df8:	1d1a      	adds	r2, r3, #4
 8002dfa:	66ba      	str	r2, [r7, #104]	; 0x68
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <_vsnprintf+0x7d2>
 8002e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e08:	e001      	b.n	8002e0e <_vsnprintf+0x7d6>
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e12:	f7fe fcc7 	bl	80017a4 <_strnlen_s>
 8002e16:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 8002e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e26:	4293      	cmp	r3, r2
 8002e28:	bf28      	it	cs
 8002e2a:	4613      	movcs	r3, r2
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11a      	bne.n	8002e6e <_vsnprintf+0x836>
          while (l++ < width) {
 8002e38:	e007      	b.n	8002e4a <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8002e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e3c:	1c53      	adds	r3, r2, #1
 8002e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e40:	68fc      	ldr	r4, [r7, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	2020      	movs	r0, #32
 8002e48:	47a0      	blx	r4
          while (l++ < width) {
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d8f1      	bhi.n	8002e3a <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002e56:	e00a      	b.n	8002e6e <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e5e:	7818      	ldrb	r0, [r3, #0]
 8002e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e62:	1c53      	adds	r3, r2, #1
 8002e64:	647b      	str	r3, [r7, #68]	; 0x44
 8002e66:	68fc      	ldr	r4, [r7, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <_vsnprintf+0x852>
 8002e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0eb      	beq.n	8002e58 <_vsnprintf+0x820>
 8002e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e6      	bne.n	8002e58 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00e      	beq.n	8002eb2 <_vsnprintf+0x87a>
          while (l++ < width) {
 8002e94:	e007      	b.n	8002ea6 <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 8002e96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e98:	1c53      	adds	r3, r2, #1
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9c:	68fc      	ldr	r4, [r7, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	2020      	movs	r0, #32
 8002ea4:	47a0      	blx	r4
          while (l++ < width) {
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	637a      	str	r2, [r7, #52]	; 0x34
 8002eac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d8f1      	bhi.n	8002e96 <_vsnprintf+0x85e>
          }
        }
        format++;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	603b      	str	r3, [r7, #0]
        break;
 8002eb8:	e05f      	b.n	8002f7a <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002ec4:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8002ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01e      	beq.n	8002f12 <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed6:	1d1a      	adds	r2, r3, #4
 8002ed8:	66ba      	str	r2, [r7, #104]	; 0x68
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ee4:	9108      	str	r1, [sp, #32]
 8002ee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002ee8:	9107      	str	r1, [sp, #28]
 8002eea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002eec:	9106      	str	r1, [sp, #24]
 8002eee:	f04f 0010 	mov.w	r0, #16
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002efa:	2100      	movs	r1, #0
 8002efc:	9102      	str	r1, [sp, #8]
 8002efe:	e9cd 2300 	strd	r2, r3, [sp]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7fe fe36 	bl	8001b7a <_ntoa_long_long>
 8002f0e:	6478      	str	r0, [r7, #68]	; 0x44
 8002f10:	e016      	b.n	8002f40 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1e:	9305      	str	r3, [sp, #20]
 8002f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f22:	9304      	str	r3, [sp, #16]
 8002f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f26:	9303      	str	r3, [sp, #12]
 8002f28:	2310      	movs	r3, #16
 8002f2a:	9302      	str	r3, [sp, #8]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	9200      	str	r2, [sp, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7fe fdb7 	bl	8001aac <_ntoa_long>
 8002f3e:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	603b      	str	r3, [r7, #0]
        break;
 8002f46:	e018      	b.n	8002f7a <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4a:	1c53      	adds	r3, r2, #1
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4e:	68fc      	ldr	r4, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	2025      	movs	r0, #37	; 0x25
 8002f56:	47a0      	blx	r4
        format++;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	603b      	str	r3, [r7, #0]
        break;
 8002f5e:	e00c      	b.n	8002f7a <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	7818      	ldrb	r0, [r3, #0]
 8002f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f66:	1c53      	adds	r3, r2, #1
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
 8002f6a:	68fc      	ldr	r4, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	47a0      	blx	r4
        format++;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	603b      	str	r3, [r7, #0]
        break;
 8002f78:	bf00      	nop
  while (*format)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f47f ab6b 	bne.w	800265a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <_vsnprintf+0x95a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	e000      	b.n	8002f94 <_vsnprintf+0x95c>
 8002f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f94:	68fc      	ldr	r4, [r7, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3758      	adds	r7, #88	; 0x58
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bdb0      	pop	{r4, r5, r7, pc}

08002fa8 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002fa8:	b40f      	push	{r0, r1, r2, r3}
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002fb6:	1d39      	adds	r1, r7, #4
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc2:	4806      	ldr	r0, [pc, #24]	; (8002fdc <printf_+0x34>)
 8002fc4:	f7ff fb38 	bl	8002638 <_vsnprintf>
 8002fc8:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fd6:	b004      	add	sp, #16
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	0800177f 	.word	0x0800177f

08002fe0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <MX_SPI1_Init+0x64>)
 8002fe6:	4a18      	ldr	r2, [pc, #96]	; (8003048 <MX_SPI1_Init+0x68>)
 8002fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <MX_SPI1_Init+0x64>)
 8002fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <MX_SPI1_Init+0x64>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <MX_SPI1_Init+0x64>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <MX_SPI1_Init+0x64>)
 8003000:	2202      	movs	r2, #2
 8003002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <MX_SPI1_Init+0x64>)
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MX_SPI1_Init+0x64>)
 800300c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <MX_SPI1_Init+0x64>)
 8003014:	2200      	movs	r2, #0
 8003016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <MX_SPI1_Init+0x64>)
 800301a:	2200      	movs	r2, #0
 800301c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <MX_SPI1_Init+0x64>)
 8003020:	2200      	movs	r2, #0
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <MX_SPI1_Init+0x64>)
 8003026:	2200      	movs	r2, #0
 8003028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <MX_SPI1_Init+0x64>)
 800302c:	220a      	movs	r2, #10
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <MX_SPI1_Init+0x64>)
 8003032:	f001 f9c1 	bl	80043b8 <HAL_SPI_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800303c:	f7fe fb8c 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20004ba0 	.word	0x20004ba0
 8003048:	40013000 	.word	0x40013000

0800304c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_SPI_MspInit+0x84>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d12b      	bne.n	80030c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_SPI_MspInit+0x88>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_SPI_MspInit+0x88>)
 8003078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_SPI_MspInit+0x88>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_SPI_MspInit+0x88>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <HAL_SPI_MspInit+0x88>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_SPI_MspInit+0x88>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030a6:	23e0      	movs	r3, #224	; 0xe0
 80030a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b2:	2303      	movs	r3, #3
 80030b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030b6:	2305      	movs	r3, #5
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	4619      	mov	r1, r3
 80030c0:	4805      	ldr	r0, [pc, #20]	; (80030d8 <HAL_SPI_MspInit+0x8c>)
 80030c2:	f000 fb47 	bl	8003754 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80030c6:	bf00      	nop
 80030c8:	3728      	adds	r7, #40	; 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40013000 	.word	0x40013000
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40020000 	.word	0x40020000

080030dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_MspInit+0x54>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_MspInit+0x54>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_MspInit+0x54>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_MspInit+0x54>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_MspInit+0x54>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_MspInit+0x54>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	210f      	movs	r1, #15
 800311e:	f06f 0001 	mvn.w	r0, #1
 8003122:	f000 faed 	bl	8003700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003144:	2200      	movs	r2, #0
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	2019      	movs	r0, #25
 800314a:	f000 fad9 	bl	8003700 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800314e:	2019      	movs	r0, #25
 8003150:	f000 faf2 	bl	8003738 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_InitTick+0xa0>)
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_InitTick+0xa0>)
 800315e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003162:	6453      	str	r3, [r2, #68]	; 0x44
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_InitTick+0xa0>)
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003170:	f107 0210 	add.w	r2, r7, #16
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f8ea 	bl	8004354 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003180:	f001 f8d4 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 8003184:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <HAL_InitTick+0xa4>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0c9b      	lsrs	r3, r3, #18
 8003190:	3b01      	subs	r3, #1
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_InitTick+0xa8>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <HAL_InitTick+0xac>)
 8003198:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_InitTick+0xa8>)
 800319c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031a0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <HAL_InitTick+0xa8>)
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_InitTick+0xa8>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_InitTick+0xa8>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80031b4:	4809      	ldr	r0, [pc, #36]	; (80031dc <HAL_InitTick+0xa8>)
 80031b6:	f001 fea7 	bl	8004f08 <HAL_TIM_Base_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d104      	bne.n	80031ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80031c0:	4806      	ldr	r0, [pc, #24]	; (80031dc <HAL_InitTick+0xa8>)
 80031c2:	f001 fefb 	bl	8004fbc <HAL_TIM_Base_Start_IT>
 80031c6:	4603      	mov	r3, r0
 80031c8:	e000      	b.n	80031cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3730      	adds	r7, #48	; 0x30
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	20004bf8 	.word	0x20004bf8
 80031e0:	40014400 	.word	0x40014400

080031e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <NMI_Handler+0x4>

080031ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ee:	e7fe      	b.n	80031ee <HardFault_Handler+0x4>

080031f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <MemManage_Handler+0x4>

080031f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <BusFault_Handler+0x4>

080031fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <UsageFault_Handler+0x4>

08003202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003216:	f001 ff33 	bl	8005080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20004bf8 	.word	0x20004bf8

08003224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
	return 1;
 8003228:	2301      	movs	r3, #1
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <_kill>:

int _kill(int pid, int sig)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800323e:	f005 fde5 	bl	8008e0c <__errno>
 8003242:	4603      	mov	r3, r0
 8003244:	2216      	movs	r2, #22
 8003246:	601a      	str	r2, [r3, #0]
	return -1;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_exit>:

void _exit (int status)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800325c:	f04f 31ff 	mov.w	r1, #4294967295
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ffe7 	bl	8003234 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003266:	e7fe      	b.n	8003266 <_exit+0x12>

08003268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e00a      	b.n	8003290 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800327a:	f3af 8000 	nop.w
 800327e:	4601      	mov	r1, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	60ba      	str	r2, [r7, #8]
 8003286:	b2ca      	uxtb	r2, r1
 8003288:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3301      	adds	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	dbf0      	blt.n	800327a <_read+0x12>
	}

return len;
 8003298:	687b      	ldr	r3, [r7, #4]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e009      	b.n	80032c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	60ba      	str	r2, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3301      	adds	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	dbf1      	blt.n	80032b4 <_write+0x12>
	}
	return len;
 80032d0:	687b      	ldr	r3, [r7, #4]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_close>:

int _close(int file)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
	return -1;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003302:	605a      	str	r2, [r3, #4]
	return 0;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <_isatty>:

int _isatty(int file)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
	return 1;
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <_sbrk+0x5c>)
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <_sbrk+0x60>)
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <_sbrk+0x64>)
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <_sbrk+0x68>)
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <_sbrk+0x64>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d207      	bcs.n	8003384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003374:	f005 fd4a 	bl	8008e0c <__errno>
 8003378:	4603      	mov	r3, r0
 800337a:	220c      	movs	r2, #12
 800337c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e009      	b.n	8003398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <_sbrk+0x64>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <_sbrk+0x64>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <_sbrk+0x64>)
 8003394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20020000 	.word	0x20020000
 80033a4:	00000400 	.word	0x00000400
 80033a8:	20000270 	.word	0x20000270
 80033ac:	20004cd8 	.word	0x20004cd8

080033b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <SystemInit+0x20>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <SystemInit+0x20>)
 80033bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <MX_USART2_UART_Init+0x50>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 800340c:	f001 fffc 	bl	8005408 <HAL_UART_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003416:	f7fe f99f 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20004c40 	.word	0x20004c40
 8003424:	40004400 	.word	0x40004400

08003428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_UART_MspInit+0x84>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d12b      	bne.n	80034a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <HAL_UART_MspInit+0x88>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <HAL_UART_MspInit+0x88>)
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_UART_MspInit+0x88>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_UART_MspInit+0x88>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <HAL_UART_MspInit+0x88>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_UART_MspInit+0x88>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003482:	230c      	movs	r3, #12
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003492:	2307      	movs	r3, #7
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	4805      	ldr	r0, [pc, #20]	; (80034b4 <HAL_UART_MspInit+0x8c>)
 800349e:	f000 f959 	bl	8003754 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034a2:	bf00      	nop
 80034a4:	3728      	adds	r7, #40	; 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40004400 	.word	0x40004400
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40020000 	.word	0x40020000

080034b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034bc:	480d      	ldr	r0, [pc, #52]	; (80034f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034be:	490e      	ldr	r1, [pc, #56]	; (80034f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034c0:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c4:	e002      	b.n	80034cc <LoopCopyDataInit>

080034c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ca:	3304      	adds	r3, #4

080034cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d0:	d3f9      	bcc.n	80034c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034d4:	4c0b      	ldr	r4, [pc, #44]	; (8003504 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d8:	e001      	b.n	80034de <LoopFillZerobss>

080034da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034dc:	3204      	adds	r2, #4

080034de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e0:	d3fb      	bcc.n	80034da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034e2:	f7ff ff65 	bl	80033b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034e6:	f005 fc97 	bl	8008e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ea:	f7fe f8b1 	bl	8001650 <main>
  bx  lr    
 80034ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80034fc:	0800bda4 	.word	0x0800bda4
  ldr r2, =_sbss
 8003500:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003504:	20004cd8 	.word	0x20004cd8

08003508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC_IRQHandler>
	...

0800350c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_Init+0x40>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <HAL_Init+0x40>)
 8003516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_Init+0x40>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_Init+0x40>)
 8003522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_Init+0x40>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a07      	ldr	r2, [pc, #28]	; (800354c <HAL_Init+0x40>)
 800352e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003534:	2003      	movs	r0, #3
 8003536:	f000 f8d8 	bl	80036ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800353a:	200f      	movs	r0, #15
 800353c:	f7ff fdfa 	bl	8003134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003540:	f7ff fdcc 	bl	80030dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023c00 	.word	0x40023c00

08003550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_IncTick+0x20>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_IncTick+0x24>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_IncTick+0x24>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000018 	.word	0x20000018
 8003574:	20004c84 	.word	0x20004c84

08003578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return uwTick;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <HAL_GetTick+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20004c84 	.word	0x20004c84

08003590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ac:	4013      	ands	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	60d3      	str	r3, [r2, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <__NVIC_GetPriorityGrouping+0x18>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 0307 	and.w	r3, r3, #7
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	2b00      	cmp	r3, #0
 8003604:	db0b      	blt.n	800361e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4907      	ldr	r1, [pc, #28]	; (800362c <__NVIC_EnableIRQ+0x38>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2001      	movs	r0, #1
 8003616:	fa00 f202 	lsl.w	r2, r0, r2
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000e100 	.word	0xe000e100

08003630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	db0a      	blt.n	800365a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	490c      	ldr	r1, [pc, #48]	; (800367c <__NVIC_SetPriority+0x4c>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	440b      	add	r3, r1
 8003654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003658:	e00a      	b.n	8003670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <__NVIC_SetPriority+0x50>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3b04      	subs	r3, #4
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	440b      	add	r3, r1
 800366e:	761a      	strb	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1c3 0307 	rsb	r3, r3, #7
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf28      	it	cs
 80036a2:	2304      	movcs	r3, #4
 80036a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d902      	bls.n	80036b4 <NVIC_EncodePriority+0x30>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3b03      	subs	r3, #3
 80036b2:	e000      	b.n	80036b6 <NVIC_EncodePriority+0x32>
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43d9      	mvns	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	4313      	orrs	r3, r2
         );
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ff4c 	bl	8003590 <__NVIC_SetPriorityGrouping>
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003712:	f7ff ff61 	bl	80035d8 <__NVIC_GetPriorityGrouping>
 8003716:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	6978      	ldr	r0, [r7, #20]
 800371e:	f7ff ffb1 	bl	8003684 <NVIC_EncodePriority>
 8003722:	4602      	mov	r2, r0
 8003724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff80 	bl	8003630 <__NVIC_SetPriority>
}
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff54 	bl	80035f4 <__NVIC_EnableIRQ>
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e159      	b.n	8003a24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	f040 8148 	bne.w	8003a1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d005      	beq.n	80037a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d130      	bne.n	8003808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a2 	beq.w	8003a1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b57      	ldr	r3, [pc, #348]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	4a56      	ldr	r2, [pc, #344]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 80038e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f6:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x2ec>)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	3302      	adds	r3, #2
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a49      	ldr	r2, [pc, #292]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d019      	beq.n	8003956 <HAL_GPIO_Init+0x202>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a48      	ldr	r2, [pc, #288]	; (8003a48 <HAL_GPIO_Init+0x2f4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_GPIO_Init+0x1fe>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <HAL_GPIO_Init+0x2f8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00d      	beq.n	800394e <HAL_GPIO_Init+0x1fa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a46      	ldr	r2, [pc, #280]	; (8003a50 <HAL_GPIO_Init+0x2fc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <HAL_GPIO_Init+0x1f6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a45      	ldr	r2, [pc, #276]	; (8003a54 <HAL_GPIO_Init+0x300>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_GPIO_Init+0x1f2>
 8003942:	2304      	movs	r3, #4
 8003944:	e008      	b.n	8003958 <HAL_GPIO_Init+0x204>
 8003946:	2307      	movs	r3, #7
 8003948:	e006      	b.n	8003958 <HAL_GPIO_Init+0x204>
 800394a:	2303      	movs	r3, #3
 800394c:	e004      	b.n	8003958 <HAL_GPIO_Init+0x204>
 800394e:	2302      	movs	r3, #2
 8003950:	e002      	b.n	8003958 <HAL_GPIO_Init+0x204>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_GPIO_Init+0x204>
 8003956:	2300      	movs	r3, #0
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	f002 0203 	and.w	r2, r2, #3
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4093      	lsls	r3, r2
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003968:	4935      	ldr	r1, [pc, #212]	; (8003a40 <HAL_GPIO_Init+0x2ec>)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	3302      	adds	r3, #2
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <HAL_GPIO_Init+0x304>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800399a:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <HAL_GPIO_Init+0x304>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ee:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039f4:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a18:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <HAL_GPIO_Init+0x304>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3301      	adds	r3, #1
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b0f      	cmp	r3, #15
 8003a28:	f67f aea2 	bls.w	8003770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40013800 	.word	0x40013800
 8003a44:	40020000 	.word	0x40020000
 8003a48:	40020400 	.word	0x40020400
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020c00 	.word	0x40020c00
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40013c00 	.word	0x40013c00

08003a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a78:	e003      	b.n	8003a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	041a      	lsls	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	619a      	str	r2, [r3, #24]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aa0:	887a      	ldrh	r2, [r7, #2]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	041a      	lsls	r2, r3, #16
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	400b      	ands	r3, r1
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	619a      	str	r2, [r3, #24]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e264      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d075      	beq.n	8003bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae2:	4ba3      	ldr	r3, [pc, #652]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aee:	4ba0      	ldr	r3, [pc, #640]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d112      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b9d      	ldr	r3, [pc, #628]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	4b99      	ldr	r3, [pc, #612]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x108>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d157      	bne.n	8003bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e23f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x74>
 8003b2a:	4b91      	ldr	r3, [pc, #580]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a90      	ldr	r2, [pc, #576]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x98>
 8003b42:	4b8b      	ldr	r3, [pc, #556]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a8a      	ldr	r2, [pc, #552]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b88      	ldr	r3, [pc, #544]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a87      	ldr	r2, [pc, #540]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b5c:	4b84      	ldr	r3, [pc, #528]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a83      	ldr	r2, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b81      	ldr	r3, [pc, #516]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a80      	ldr	r2, [pc, #512]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7ff fcfc 	bl	8003578 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b84:	f7ff fcf8 	bl	8003578 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e204      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7ff fce8 	bl	8003578 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7ff fce4 	bl	8003578 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1f0      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0xe8>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bda:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b62      	ldr	r3, [pc, #392]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1c4      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4952      	ldr	r1, [pc, #328]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b4f      	ldr	r3, [pc, #316]	; (8003d74 <HAL_RCC_OscConfig+0x2b0>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7ff fc9d 	bl	8003578 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c42:	f7ff fc99 	bl	8003578 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1a5      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4940      	ldr	r1, [pc, #256]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <HAL_RCC_OscConfig+0x2b0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7ff fc7c 	bl	8003578 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c84:	f7ff fc78 	bl	8003578 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e184      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d030      	beq.n	8003d10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_RCC_OscConfig+0x2b4>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7ff fc5c 	bl	8003578 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7ff fc58 	bl	8003578 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e164      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x200>
 8003ce2:	e015      	b.n	8003d10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCC_OscConfig+0x2b4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7ff fc45 	bl	8003578 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7ff fc41 	bl	8003578 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e14d      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a0 	beq.w	8003e5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_OscConfig+0x2b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_RCC_OscConfig+0x2b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_RCC_OscConfig+0x2b8>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7ff fc07 	bl	8003578 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	e011      	b.n	8003d92 <HAL_RCC_OscConfig+0x2ce>
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	42470000 	.word	0x42470000
 8003d78:	42470e80 	.word	0x42470e80
 8003d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d80:	f7ff fbfa 	bl	8003578 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e106      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b85      	ldr	r3, [pc, #532]	; (8003fa8 <HAL_RCC_OscConfig+0x4e4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2f0>
 8003da6:	4b81      	ldr	r3, [pc, #516]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a80      	ldr	r2, [pc, #512]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
 8003db2:	e01c      	b.n	8003dee <HAL_RCC_OscConfig+0x32a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d10c      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x312>
 8003dbc:	4b7b      	ldr	r3, [pc, #492]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a7a      	ldr	r2, [pc, #488]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003dc2:	f043 0304 	orr.w	r3, r3, #4
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc8:	4b78      	ldr	r3, [pc, #480]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a77      	ldr	r2, [pc, #476]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	e00b      	b.n	8003dee <HAL_RCC_OscConfig+0x32a>
 8003dd6:	4b75      	ldr	r3, [pc, #468]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a74      	ldr	r2, [pc, #464]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a71      	ldr	r2, [pc, #452]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d015      	beq.n	8003e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7ff fbbf 	bl	8003578 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7ff fbbb 	bl	8003578 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0c5      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ee      	beq.n	8003dfe <HAL_RCC_OscConfig+0x33a>
 8003e20:	e014      	b.n	8003e4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e22:	f7ff fba9 	bl	8003578 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7ff fba5 	bl	8003578 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0af      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ee      	bne.n	8003e2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d105      	bne.n	8003e5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e52:	4b56      	ldr	r3, [pc, #344]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a55      	ldr	r2, [pc, #340]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 809b 	beq.w	8003f9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e68:	4b50      	ldr	r3, [pc, #320]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d05c      	beq.n	8003f2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d141      	bne.n	8003f00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_RCC_OscConfig+0x4ec>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7ff fb79 	bl	8003578 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7ff fb75 	bl	8003578 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e081      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9c:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	019b      	lsls	r3, r3, #6
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	4937      	ldr	r1, [pc, #220]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <HAL_RCC_OscConfig+0x4ec>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7ff fb4e 	bl	8003578 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7ff fb4a 	bl	8003578 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e056      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x41c>
 8003efe:	e04e      	b.n	8003f9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <HAL_RCC_OscConfig+0x4ec>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7ff fb37 	bl	8003578 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7ff fb33 	bl	8003578 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e03f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	4b22      	ldr	r3, [pc, #136]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x44a>
 8003f2c:	e037      	b.n	8003f9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e032      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f3a:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <HAL_RCC_OscConfig+0x4e8>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d028      	beq.n	8003f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d121      	bne.n	8003f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d11a      	bne.n	8003f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d111      	bne.n	8003f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	42470060 	.word	0x42470060

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7ff fa68 	bl	8003578 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7ff fa64 	bl	8003578 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490a      	ldr	r1, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe ffea 	bl	8003134 <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	0800b998 	.word	0x0800b998
 8004178:	20000010 	.word	0x20000010
 800417c:	20000014 	.word	0x20000014

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004186:	2100      	movs	r1, #0
 8004188:	6079      	str	r1, [r7, #4]
 800418a:	2100      	movs	r1, #0
 800418c:	60f9      	str	r1, [r7, #12]
 800418e:	2100      	movs	r1, #0
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004192:	2100      	movs	r1, #0
 8004194:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004196:	4952      	ldr	r1, [pc, #328]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004198:	6889      	ldr	r1, [r1, #8]
 800419a:	f001 010c 	and.w	r1, r1, #12
 800419e:	2908      	cmp	r1, #8
 80041a0:	d00d      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x3e>
 80041a2:	2908      	cmp	r1, #8
 80041a4:	f200 8094 	bhi.w	80042d0 <HAL_RCC_GetSysClockFreq+0x150>
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x32>
 80041ac:	2904      	cmp	r1, #4
 80041ae:	d003      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x38>
 80041b0:	e08e      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b2:	4b4c      	ldr	r3, [pc, #304]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80041b4:	60bb      	str	r3, [r7, #8]
       break;
 80041b6:	e08e      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b8:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80041ba:	60bb      	str	r3, [r7, #8]
      break;
 80041bc:	e08b      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041be:	4948      	ldr	r1, [pc, #288]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041c0:	6849      	ldr	r1, [r1, #4]
 80041c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80041c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c8:	4945      	ldr	r1, [pc, #276]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ca:	6849      	ldr	r1, [r1, #4]
 80041cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80041d0:	2900      	cmp	r1, #0
 80041d2:	d024      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d4:	4942      	ldr	r1, [pc, #264]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041d6:	6849      	ldr	r1, [r1, #4]
 80041d8:	0989      	lsrs	r1, r1, #6
 80041da:	4608      	mov	r0, r1
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80041e4:	f04f 0500 	mov.w	r5, #0
 80041e8:	ea00 0204 	and.w	r2, r0, r4
 80041ec:	ea01 0305 	and.w	r3, r1, r5
 80041f0:	493d      	ldr	r1, [pc, #244]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80041f2:	fb01 f003 	mul.w	r0, r1, r3
 80041f6:	2100      	movs	r1, #0
 80041f8:	fb01 f102 	mul.w	r1, r1, r2
 80041fc:	1844      	adds	r4, r0, r1
 80041fe:	493a      	ldr	r1, [pc, #232]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004200:	fba2 0101 	umull	r0, r1, r2, r1
 8004204:	1863      	adds	r3, r4, r1
 8004206:	4619      	mov	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	f7fc fcf2 	bl	8000bf8 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4613      	mov	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e04a      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	099b      	lsrs	r3, r3, #6
 8004224:	461a      	mov	r2, r3
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	ea02 0400 	and.w	r4, r2, r0
 8004236:	ea03 0501 	and.w	r5, r3, r1
 800423a:	4620      	mov	r0, r4
 800423c:	4629      	mov	r1, r5
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	014b      	lsls	r3, r1, #5
 8004248:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800424c:	0142      	lsls	r2, r0, #5
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	1b00      	subs	r0, r0, r4
 8004254:	eb61 0105 	sbc.w	r1, r1, r5
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	018b      	lsls	r3, r1, #6
 8004262:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004266:	0182      	lsls	r2, r0, #6
 8004268:	1a12      	subs	r2, r2, r0
 800426a:	eb63 0301 	sbc.w	r3, r3, r1
 800426e:	f04f 0000 	mov.w	r0, #0
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	00d9      	lsls	r1, r3, #3
 8004278:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800427c:	00d0      	lsls	r0, r2, #3
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	1912      	adds	r2, r2, r4
 8004284:	eb45 0303 	adc.w	r3, r5, r3
 8004288:	f04f 0000 	mov.w	r0, #0
 800428c:	f04f 0100 	mov.w	r1, #0
 8004290:	0299      	lsls	r1, r3, #10
 8004292:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004296:	0290      	lsls	r0, r2, #10
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	f7fc fca6 	bl	8000bf8 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4613      	mov	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	3301      	adds	r3, #1
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	60bb      	str	r3, [r7, #8]
      break;
 80042ce:	e002      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80042d2:	60bb      	str	r3, [r7, #8]
      break;
 80042d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d6:	68bb      	ldr	r3, [r7, #8]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bdb0      	pop	{r4, r5, r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	017d7840 	.word	0x017d7840

080042ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000010 	.word	0x20000010

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004308:	f7ff fff0 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40023800 	.word	0x40023800
 8004328:	0800b9a8 	.word	0x0800b9a8

0800432c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004330:	f7ff ffdc 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0b5b      	lsrs	r3, r3, #13
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	0800b9a8 	.word	0x0800b9a8

08004354 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	220f      	movs	r2, #15
 8004362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004364:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0203 	and.w	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_RCC_GetClockConfig+0x60>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0207 	and.w	r2, r3, #7
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40023c00 	.word	0x40023c00

080043b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e07b      	b.n	80044c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043da:	d009      	beq.n	80043f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]
 80043e2:	e005      	b.n	80043f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fe fe1e 	bl	800304c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004426:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	ea42 0103 	orr.w	r1, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0104 	and.w	r1, r3, #4
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f003 0210 	and.w	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_SPI_Transmit+0x22>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e126      	b.n	800473a <HAL_SPI_Transmit+0x270>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f4:	f7ff f840 	bl	8003578 <HAL_GetTick>
 80044f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d002      	beq.n	8004510 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800450a:	2302      	movs	r3, #2
 800450c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800450e:	e10b      	b.n	8004728 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_SPI_Transmit+0x52>
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004520:	e102      	b.n	8004728 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2203      	movs	r2, #3
 8004526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	88fa      	ldrh	r2, [r7, #6]
 800453a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004568:	d10f      	bne.n	800458a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004578:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004588:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d007      	beq.n	80045a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b0:	d14b      	bne.n	800464a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_SPI_Transmit+0xf6>
 80045ba:	8afb      	ldrh	r3, [r7, #22]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d13e      	bne.n	800463e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045e4:	e02b      	b.n	800463e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d112      	bne.n	800461a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36
 8004618:	e011      	b.n	800463e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800461a:	f7fe ffad 	bl	8003578 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d803      	bhi.n	8004632 <HAL_SPI_Transmit+0x168>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d102      	bne.n	8004638 <HAL_SPI_Transmit+0x16e>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800463c:	e074      	b.n	8004728 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ce      	bne.n	80045e6 <HAL_SPI_Transmit+0x11c>
 8004648:	e04c      	b.n	80046e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_SPI_Transmit+0x18e>
 8004652:	8afb      	ldrh	r3, [r7, #22]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d140      	bne.n	80046da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800467e:	e02c      	b.n	80046da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d113      	bne.n	80046b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80046b4:	e011      	b.n	80046da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b6:	f7fe ff5f 	bl	8003578 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d803      	bhi.n	80046ce <HAL_SPI_Transmit+0x204>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d102      	bne.n	80046d4 <HAL_SPI_Transmit+0x20a>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046d8:	e026      	b.n	8004728 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1cd      	bne.n	8004680 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fbcb 	bl	8004e84 <SPI_EndRxTxTransaction>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e000      	b.n	8004728 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004738:	7ffb      	ldrb	r3, [r7, #31]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b088      	sub	sp, #32
 8004746:	af02      	add	r7, sp, #8
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475e:	d112      	bne.n	8004786 <HAL_SPI_Receive+0x44>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10e      	bne.n	8004786 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2204      	movs	r2, #4
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f8f1 	bl	8004964 <HAL_SPI_TransmitReceive>
 8004782:	4603      	mov	r3, r0
 8004784:	e0ea      	b.n	800495c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_SPI_Receive+0x52>
 8004790:	2302      	movs	r3, #2
 8004792:	e0e3      	b.n	800495c <HAL_SPI_Receive+0x21a>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479c:	f7fe feec 	bl	8003578 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047b2:	e0ca      	b.n	800494a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Receive+0x7e>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047c4:	e0c1      	b.n	800494a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2204      	movs	r2, #4
 80047ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	d10f      	bne.n	800482e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d007      	beq.n	800484c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800484a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d162      	bne.n	800491a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004854:	e02e      	b.n	80048b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d115      	bne.n	8004890 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f103 020c 	add.w	r2, r3, #12
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800488e:	e011      	b.n	80048b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004890:	f7fe fe72 	bl	8003578 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d803      	bhi.n	80048a8 <HAL_SPI_Receive+0x166>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d102      	bne.n	80048ae <HAL_SPI_Receive+0x16c>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048b2:	e04a      	b.n	800494a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1cb      	bne.n	8004856 <HAL_SPI_Receive+0x114>
 80048be:	e031      	b.n	8004924 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d113      	bne.n	80048f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	b292      	uxth	r2, r2
 80048da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048f4:	e011      	b.n	800491a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f6:	f7fe fe3f 	bl	8003578 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d803      	bhi.n	800490e <HAL_SPI_Receive+0x1cc>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d102      	bne.n	8004914 <HAL_SPI_Receive+0x1d2>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004918:	e017      	b.n	800494a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1cd      	bne.n	80048c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	6839      	ldr	r1, [r7, #0]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fa45 	bl	8004db8 <SPI_EndRxTransaction>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
 8004946:	e000      	b.n	800494a <HAL_SPI_Receive+0x208>
  }

error :
 8004948:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	; 0x30
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004972:	2301      	movs	r3, #1
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_SPI_TransmitReceive+0x26>
 8004986:	2302      	movs	r3, #2
 8004988:	e18a      	b.n	8004ca0 <HAL_SPI_TransmitReceive+0x33c>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004992:	f7fe fdf1 	bl	8003578 <HAL_GetTick>
 8004996:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d00f      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x70>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d107      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x68>
 80049c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d003      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049d2:	e15b      	b.n	8004c8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x82>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x82>
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049ec:	e14e      	b.n	8004c8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d003      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2205      	movs	r2, #5
 80049fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	887a      	ldrh	r2, [r7, #2]
 8004a12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d007      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5e:	d178      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_SPI_TransmitReceive+0x10a>
 8004a68:	8b7b      	ldrh	r3, [r7, #26]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d166      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	881a      	ldrh	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	1c9a      	adds	r2, r3, #2
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a92:	e053      	b.n	8004b3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d11b      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x176>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d016      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x176>
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d113      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	1c9a      	adds	r2, r3, #2
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d119      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x1b8>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d014      	beq.n	8004b1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	b292      	uxth	r2, r2
 8004afe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b1c:	f7fe fd2c 	bl	8003578 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d807      	bhi.n	8004b3c <HAL_SPI_TransmitReceive+0x1d8>
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d003      	beq.n	8004b3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b3a:	e0a7      	b.n	8004c8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1a6      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x130>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1a1      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x130>
 8004b50:	e07c      	b.n	8004c4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x1fc>
 8004b5a:	8b7b      	ldrh	r3, [r7, #26]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d16b      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b86:	e057      	b.n	8004c38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d11c      	bne.n	8004bd0 <HAL_SPI_TransmitReceive+0x26c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d017      	beq.n	8004bd0 <HAL_SPI_TransmitReceive+0x26c>
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d114      	bne.n	8004bd0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d119      	bne.n	8004c12 <HAL_SPI_TransmitReceive+0x2ae>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d014      	beq.n	8004c12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c12:	f7fe fcb1 	bl	8003578 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d803      	bhi.n	8004c2a <HAL_SPI_TransmitReceive+0x2c6>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d102      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x2cc>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c36:	e029      	b.n	8004c8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1a2      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x224>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d19d      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f917 	bl	8004e84 <SPI_EndRxTxTransaction>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c68:	e010      	b.n	8004c8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	e000      	b.n	8004c8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3730      	adds	r7, #48	; 0x30
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cb8:	f7fe fc5e 	bl	8003578 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cc8:	f7fe fc56 	bl	8003578 <HAL_GetTick>
 8004ccc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cce:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	015b      	lsls	r3, r3, #5
 8004cd4:	0d1b      	lsrs	r3, r3, #20
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	fb02 f303 	mul.w	r3, r2, r3
 8004cdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cde:	e054      	b.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d050      	beq.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ce8:	f7fe fc46 	bl	8003578 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d902      	bls.n	8004cfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d13d      	bne.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d16:	d111      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d004      	beq.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d107      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d44:	d10f      	bne.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e017      	b.n	8004daa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	bf0c      	ite	eq
 8004d9a:	2301      	moveq	r3, #1
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d19b      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000010 	.word	0x20000010

08004db8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dcc:	d111      	bne.n	8004df2 <SPI_EndRxTransaction+0x3a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd6:	d004      	beq.n	8004de2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d107      	bne.n	8004df2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfa:	d12a      	bne.n	8004e52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e04:	d012      	beq.n	8004e2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff ff49 	bl	8004ca8 <SPI_WaitFlagStateUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02d      	beq.n	8004e78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e026      	b.n	8004e7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2101      	movs	r1, #1
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff ff36 	bl	8004ca8 <SPI_WaitFlagStateUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01a      	beq.n	8004e78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e013      	b.n	8004e7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ff23 	bl	8004ca8 <SPI_WaitFlagStateUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e000      	b.n	8004e7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e90:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <SPI_EndRxTxTransaction+0x7c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <SPI_EndRxTxTransaction+0x80>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	0d5b      	lsrs	r3, r3, #21
 8004e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eae:	d112      	bne.n	8004ed6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fef4 	bl	8004ca8 <SPI_WaitFlagStateUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e00f      	b.n	8004ef6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d0f2      	beq.n	8004ed6 <SPI_EndRxTxTransaction+0x52>
 8004ef0:	e000      	b.n	8004ef4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ef2:	bf00      	nop
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000010 	.word	0x20000010
 8004f04:	165e9f81 	.word	0x165e9f81

08004f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e041      	b.n	8004f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f839 	bl	8004fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 f9ca 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e044      	b.n	800505e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	; (800506c <HAL_TIM_Base_Start_IT+0xb0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d013      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <HAL_TIM_Base_Start_IT+0xb4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a19      	ldr	r2, [pc, #100]	; (8005074 <HAL_TIM_Base_Start_IT+0xb8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a17      	ldr	r2, [pc, #92]	; (8005078 <HAL_TIM_Base_Start_IT+0xbc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x6c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a16      	ldr	r2, [pc, #88]	; (800507c <HAL_TIM_Base_Start_IT+0xc0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d010      	beq.n	800505c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	e007      	b.n	800505c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40014000 	.word	0x40014000

08005080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b02      	cmp	r3, #2
 8005094:	d122      	bne.n	80050dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d11b      	bne.n	80050dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0202 	mvn.w	r2, #2
 80050ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8ee 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8e0 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8f1 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d122      	bne.n	8005130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d11b      	bne.n	8005130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0204 	mvn.w	r2, #4
 8005100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f8c4 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8b6 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8c7 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b08      	cmp	r3, #8
 800513c:	d122      	bne.n	8005184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b08      	cmp	r3, #8
 800514a:	d11b      	bne.n	8005184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0208 	mvn.w	r2, #8
 8005154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2204      	movs	r2, #4
 800515a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f89a 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f88c 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f89d 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b10      	cmp	r3, #16
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b10      	cmp	r3, #16
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0210 	mvn.w	r2, #16
 80051a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2208      	movs	r2, #8
 80051ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f870 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f862 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f873 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d10e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d107      	bne.n	8005204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0201 	mvn.w	r2, #1
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fc fa98 	bl	8001734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b80      	cmp	r3, #128	; 0x80
 8005210:	d10e      	bne.n	8005230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b80      	cmp	r3, #128	; 0x80
 800521e:	d107      	bne.n	8005230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8e2 	bl	80053f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d10e      	bne.n	800525c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d107      	bne.n	800525c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f838 	bl	80052cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b20      	cmp	r3, #32
 8005268:	d10e      	bne.n	8005288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b20      	cmp	r3, #32
 8005276:	d107      	bne.n	8005288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0220 	mvn.w	r2, #32
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8ac 	bl	80053e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a34      	ldr	r2, [pc, #208]	; (80053c4 <TIM_Base_SetConfig+0xe4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00f      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d00b      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a31      	ldr	r2, [pc, #196]	; (80053c8 <TIM_Base_SetConfig+0xe8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a30      	ldr	r2, [pc, #192]	; (80053cc <TIM_Base_SetConfig+0xec>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <TIM_Base_SetConfig+0xf0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d108      	bne.n	800532a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a25      	ldr	r2, [pc, #148]	; (80053c4 <TIM_Base_SetConfig+0xe4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01b      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005338:	d017      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <TIM_Base_SetConfig+0xe8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <TIM_Base_SetConfig+0xec>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <TIM_Base_SetConfig+0xf0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <TIM_Base_SetConfig+0xf4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <TIM_Base_SetConfig+0xf8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <TIM_Base_SetConfig+0xfc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d108      	bne.n	800537c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <TIM_Base_SetConfig+0xe4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d103      	bne.n	80053b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	615a      	str	r2, [r3, #20]
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800

080053e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e03f      	b.n	800549a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fd fffa 	bl	8003428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f929 	bl	80056a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b08a      	sub	sp, #40	; 0x28
 80054a6:	af02      	add	r7, sp, #8
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d17c      	bne.n	80055bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_UART_Transmit+0x2c>
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e075      	b.n	80055be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_UART_Transmit+0x3e>
 80054dc:	2302      	movs	r3, #2
 80054de:	e06e      	b.n	80055be <HAL_UART_Transmit+0x11c>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f6:	f7fe f83f 	bl	8003578 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d108      	bne.n	8005524 <HAL_UART_Transmit+0x82>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e003      	b.n	800552c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005534:	e02a      	b.n	800558c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f840 	bl	80055c6 <UART_WaitOnFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e036      	b.n	80055be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	3302      	adds	r3, #2
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	e007      	b.n	800557e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	3301      	adds	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1cf      	bne.n	8005536 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	2140      	movs	r1, #64	; 0x40
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f810 	bl	80055c6 <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e006      	b.n	80055be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e000      	b.n	80055be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
  }
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b090      	sub	sp, #64	; 0x40
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	4613      	mov	r3, r2
 80055d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	e050      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d04c      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055e6:	f7fd ffc7 	bl	8003578 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d241      	bcs.n	800567a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005616:	637a      	str	r2, [r7, #52]	; 0x34
 8005618:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e5      	bne.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3314      	adds	r3, #20
 8005648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800564a:	623a      	str	r2, [r7, #32]
 800564c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	61bb      	str	r3, [r7, #24]
   return(result);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e00f      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	429a      	cmp	r2, r3
 8005696:	d09f      	beq.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3740      	adds	r7, #64	; 0x40
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	b09f      	sub	sp, #124	; 0x7c
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	68d9      	ldr	r1, [r3, #12]
 80056bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	ea40 0301 	orr.w	r3, r0, r1
 80056c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	4313      	orrs	r3, r2
 80056dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056e8:	f021 010c 	bic.w	r1, r1, #12
 80056ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f2:	430b      	orrs	r3, r1
 80056f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005702:	6999      	ldr	r1, [r3, #24]
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	ea40 0301 	orr.w	r3, r0, r1
 800570c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4bc5      	ldr	r3, [pc, #788]	; (8005a28 <UART_SetConfig+0x384>)
 8005714:	429a      	cmp	r2, r3
 8005716:	d004      	beq.n	8005722 <UART_SetConfig+0x7e>
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	4bc3      	ldr	r3, [pc, #780]	; (8005a2c <UART_SetConfig+0x388>)
 800571e:	429a      	cmp	r2, r3
 8005720:	d103      	bne.n	800572a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005722:	f7fe fe03 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 8005726:	6778      	str	r0, [r7, #116]	; 0x74
 8005728:	e002      	b.n	8005730 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800572a:	f7fe fdeb 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 800572e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005738:	f040 80b6 	bne.w	80058a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800573c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800573e:	461c      	mov	r4, r3
 8005740:	f04f 0500 	mov.w	r5, #0
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	1891      	adds	r1, r2, r2
 800574a:	6439      	str	r1, [r7, #64]	; 0x40
 800574c:	415b      	adcs	r3, r3
 800574e:	647b      	str	r3, [r7, #68]	; 0x44
 8005750:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005754:	1912      	adds	r2, r2, r4
 8005756:	eb45 0303 	adc.w	r3, r5, r3
 800575a:	f04f 0000 	mov.w	r0, #0
 800575e:	f04f 0100 	mov.w	r1, #0
 8005762:	00d9      	lsls	r1, r3, #3
 8005764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005768:	00d0      	lsls	r0, r2, #3
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	1911      	adds	r1, r2, r4
 8005770:	6639      	str	r1, [r7, #96]	; 0x60
 8005772:	416b      	adcs	r3, r5
 8005774:	667b      	str	r3, [r7, #100]	; 0x64
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	461a      	mov	r2, r3
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	1891      	adds	r1, r2, r2
 8005782:	63b9      	str	r1, [r7, #56]	; 0x38
 8005784:	415b      	adcs	r3, r3
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800578c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005790:	f7fb fa32 	bl	8000bf8 <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4ba5      	ldr	r3, [pc, #660]	; (8005a30 <UART_SetConfig+0x38c>)
 800579a:	fba3 2302 	umull	r2, r3, r3, r2
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	011e      	lsls	r6, r3, #4
 80057a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a4:	461c      	mov	r4, r3
 80057a6:	f04f 0500 	mov.w	r5, #0
 80057aa:	4622      	mov	r2, r4
 80057ac:	462b      	mov	r3, r5
 80057ae:	1891      	adds	r1, r2, r2
 80057b0:	6339      	str	r1, [r7, #48]	; 0x30
 80057b2:	415b      	adcs	r3, r3
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
 80057b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057ba:	1912      	adds	r2, r2, r4
 80057bc:	eb45 0303 	adc.w	r3, r5, r3
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	00d9      	lsls	r1, r3, #3
 80057ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ce:	00d0      	lsls	r0, r2, #3
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	1911      	adds	r1, r2, r4
 80057d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80057d8:	416b      	adcs	r3, r5
 80057da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	1891      	adds	r1, r2, r2
 80057e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80057ea:	415b      	adcs	r3, r3
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057f6:	f7fb f9ff 	bl	8000bf8 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4b8c      	ldr	r3, [pc, #560]	; (8005a30 <UART_SetConfig+0x38c>)
 8005800:	fba3 1302 	umull	r1, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	2164      	movs	r1, #100	; 0x64
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	3332      	adds	r3, #50	; 0x32
 8005812:	4a87      	ldr	r2, [pc, #540]	; (8005a30 <UART_SetConfig+0x38c>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005820:	441e      	add	r6, r3
 8005822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005824:	4618      	mov	r0, r3
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	1894      	adds	r4, r2, r2
 8005830:	623c      	str	r4, [r7, #32]
 8005832:	415b      	adcs	r3, r3
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800583a:	1812      	adds	r2, r2, r0
 800583c:	eb41 0303 	adc.w	r3, r1, r3
 8005840:	f04f 0400 	mov.w	r4, #0
 8005844:	f04f 0500 	mov.w	r5, #0
 8005848:	00dd      	lsls	r5, r3, #3
 800584a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800584e:	00d4      	lsls	r4, r2, #3
 8005850:	4622      	mov	r2, r4
 8005852:	462b      	mov	r3, r5
 8005854:	1814      	adds	r4, r2, r0
 8005856:	653c      	str	r4, [r7, #80]	; 0x50
 8005858:	414b      	adcs	r3, r1
 800585a:	657b      	str	r3, [r7, #84]	; 0x54
 800585c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	461a      	mov	r2, r3
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	1891      	adds	r1, r2, r2
 8005868:	61b9      	str	r1, [r7, #24]
 800586a:	415b      	adcs	r3, r3
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005872:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005876:	f7fb f9bf 	bl	8000bf8 <__aeabi_uldivmod>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4b6c      	ldr	r3, [pc, #432]	; (8005a30 <UART_SetConfig+0x38c>)
 8005880:	fba3 1302 	umull	r1, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	2164      	movs	r1, #100	; 0x64
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	3332      	adds	r3, #50	; 0x32
 8005892:	4a67      	ldr	r2, [pc, #412]	; (8005a30 <UART_SetConfig+0x38c>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f003 0207 	and.w	r2, r3, #7
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4432      	add	r2, r6
 80058a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a6:	e0b9      	b.n	8005a1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058aa:	461c      	mov	r4, r3
 80058ac:	f04f 0500 	mov.w	r5, #0
 80058b0:	4622      	mov	r2, r4
 80058b2:	462b      	mov	r3, r5
 80058b4:	1891      	adds	r1, r2, r2
 80058b6:	6139      	str	r1, [r7, #16]
 80058b8:	415b      	adcs	r3, r3
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058c0:	1912      	adds	r2, r2, r4
 80058c2:	eb45 0303 	adc.w	r3, r5, r3
 80058c6:	f04f 0000 	mov.w	r0, #0
 80058ca:	f04f 0100 	mov.w	r1, #0
 80058ce:	00d9      	lsls	r1, r3, #3
 80058d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058d4:	00d0      	lsls	r0, r2, #3
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	eb12 0804 	adds.w	r8, r2, r4
 80058de:	eb43 0905 	adc.w	r9, r3, r5
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f04f 0100 	mov.w	r1, #0
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	008b      	lsls	r3, r1, #2
 80058f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058fa:	0082      	lsls	r2, r0, #2
 80058fc:	4640      	mov	r0, r8
 80058fe:	4649      	mov	r1, r9
 8005900:	f7fb f97a 	bl	8000bf8 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4b49      	ldr	r3, [pc, #292]	; (8005a30 <UART_SetConfig+0x38c>)
 800590a:	fba3 2302 	umull	r2, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	011e      	lsls	r6, r3, #4
 8005912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005914:	4618      	mov	r0, r3
 8005916:	f04f 0100 	mov.w	r1, #0
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	1894      	adds	r4, r2, r2
 8005920:	60bc      	str	r4, [r7, #8]
 8005922:	415b      	adcs	r3, r3
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800592a:	1812      	adds	r2, r2, r0
 800592c:	eb41 0303 	adc.w	r3, r1, r3
 8005930:	f04f 0400 	mov.w	r4, #0
 8005934:	f04f 0500 	mov.w	r5, #0
 8005938:	00dd      	lsls	r5, r3, #3
 800593a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800593e:	00d4      	lsls	r4, r2, #3
 8005940:	4622      	mov	r2, r4
 8005942:	462b      	mov	r3, r5
 8005944:	1814      	adds	r4, r2, r0
 8005946:	64bc      	str	r4, [r7, #72]	; 0x48
 8005948:	414b      	adcs	r3, r1
 800594a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800594c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	f04f 0100 	mov.w	r1, #0
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	008b      	lsls	r3, r1, #2
 8005960:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005964:	0082      	lsls	r2, r0, #2
 8005966:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800596a:	f7fb f945 	bl	8000bf8 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <UART_SetConfig+0x38c>)
 8005974:	fba3 1302 	umull	r1, r3, r3, r2
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	2164      	movs	r1, #100	; 0x64
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	3332      	adds	r3, #50	; 0x32
 8005986:	4a2a      	ldr	r2, [pc, #168]	; (8005a30 <UART_SetConfig+0x38c>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005992:	441e      	add	r6, r3
 8005994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005996:	4618      	mov	r0, r3
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	1894      	adds	r4, r2, r2
 80059a2:	603c      	str	r4, [r7, #0]
 80059a4:	415b      	adcs	r3, r3
 80059a6:	607b      	str	r3, [r7, #4]
 80059a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ac:	1812      	adds	r2, r2, r0
 80059ae:	eb41 0303 	adc.w	r3, r1, r3
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	f04f 0500 	mov.w	r5, #0
 80059ba:	00dd      	lsls	r5, r3, #3
 80059bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059c0:	00d4      	lsls	r4, r2, #3
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	eb12 0a00 	adds.w	sl, r2, r0
 80059ca:	eb43 0b01 	adc.w	fp, r3, r1
 80059ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f04f 0100 	mov.w	r1, #0
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	008b      	lsls	r3, r1, #2
 80059e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059e6:	0082      	lsls	r2, r0, #2
 80059e8:	4650      	mov	r0, sl
 80059ea:	4659      	mov	r1, fp
 80059ec:	f7fb f904 	bl	8000bf8 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <UART_SetConfig+0x38c>)
 80059f6:	fba3 1302 	umull	r1, r3, r3, r2
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	2164      	movs	r1, #100	; 0x64
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	3332      	adds	r3, #50	; 0x32
 8005a08:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <UART_SetConfig+0x38c>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	f003 020f 	and.w	r2, r3, #15
 8005a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4432      	add	r2, r6
 8005a1a:	609a      	str	r2, [r3, #8]
}
 8005a1c:	bf00      	nop
 8005a1e:	377c      	adds	r7, #124	; 0x7c
 8005a20:	46bd      	mov	sp, r7
 8005a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a26:	bf00      	nop
 8005a28:	40011000 	.word	0x40011000
 8005a2c:	40011400 	.word	0x40011400
 8005a30:	51eb851f 	.word	0x51eb851f

08005a34 <__NVIC_SetPriority>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	6039      	str	r1, [r7, #0]
 8005a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	db0a      	blt.n	8005a5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	490c      	ldr	r1, [pc, #48]	; (8005a80 <__NVIC_SetPriority+0x4c>)
 8005a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a52:	0112      	lsls	r2, r2, #4
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	440b      	add	r3, r1
 8005a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a5c:	e00a      	b.n	8005a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	4908      	ldr	r1, [pc, #32]	; (8005a84 <__NVIC_SetPriority+0x50>)
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	3b04      	subs	r3, #4
 8005a6c:	0112      	lsls	r2, r2, #4
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	440b      	add	r3, r1
 8005a72:	761a      	strb	r2, [r3, #24]
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000e100 	.word	0xe000e100
 8005a84:	e000ed00 	.word	0xe000ed00

08005a88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <SysTick_Handler+0x1c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a90:	f002 f854 	bl	8007b3c <xTaskGetSchedulerState>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d001      	beq.n	8005a9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a9a:	f002 ff3d 	bl	8008918 <xPortSysTickHandler>
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	e000e010 	.word	0xe000e010

08005aa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005aac:	2100      	movs	r1, #0
 8005aae:	f06f 0004 	mvn.w	r0, #4
 8005ab2:	f7ff ffbf 	bl	8005a34 <__NVIC_SetPriority>
#endif
}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac2:	f3ef 8305 	mrs	r3, IPSR
 8005ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ace:	f06f 0305 	mvn.w	r3, #5
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	e00c      	b.n	8005af0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <osKernelInitialize+0x44>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d105      	bne.n	8005aea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <osKernelInitialize+0x44>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	e002      	b.n	8005af0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295
 8005aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005af0:	687b      	ldr	r3, [r7, #4]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20000274 	.word	0x20000274

08005b04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b0a:	f3ef 8305 	mrs	r3, IPSR
 8005b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b16:	f06f 0305 	mvn.w	r3, #5
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	e010      	b.n	8005b40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <osKernelStart+0x48>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d109      	bne.n	8005b3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b26:	f7ff ffbf 	bl	8005aa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b2a:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <osKernelStart+0x48>)
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b30:	f001 fbbc 	bl	80072ac <vTaskStartScheduler>
      stat = osOK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	e002      	b.n	8005b40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b40:	687b      	ldr	r3, [r7, #4]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000274 	.word	0x20000274

08005b50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08e      	sub	sp, #56	; 0x38
 8005b54:	af04      	add	r7, sp, #16
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b60:	f3ef 8305 	mrs	r3, IPSR
 8005b64:	617b      	str	r3, [r7, #20]
  return(result);
 8005b66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d17e      	bne.n	8005c6a <osThreadNew+0x11a>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d07b      	beq.n	8005c6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b76:	2318      	movs	r3, #24
 8005b78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d045      	beq.n	8005c16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <osThreadNew+0x48>
        name = attr->name;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <osThreadNew+0x6e>
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b38      	cmp	r3, #56	; 0x38
 8005bb0:	d805      	bhi.n	8005bbe <osThreadNew+0x6e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <osThreadNew+0x72>
        return (NULL);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e054      	b.n	8005c6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <osThreadNew+0xa8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b5b      	cmp	r3, #91	; 0x5b
 8005be0:	d90a      	bls.n	8005bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <osThreadNew+0xa8>
        mem = 1;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e010      	b.n	8005c1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10c      	bne.n	8005c1a <osThreadNew+0xca>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d108      	bne.n	8005c1a <osThreadNew+0xca>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <osThreadNew+0xca>
          mem = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	e001      	b.n	8005c1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d110      	bne.n	8005c42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c28:	9202      	str	r2, [sp, #8]
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f001 f962 	bl	8006f00 <xTaskCreateStatic>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e013      	b.n	8005c6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d110      	bne.n	8005c6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f001 f9ad 	bl	8006fba <xTaskCreate>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d001      	beq.n	8005c6a <osThreadNew+0x11a>
            hTask = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c6a:	693b      	ldr	r3, [r7, #16]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c80:	f3ef 8305 	mrs	r3, IPSR
 8005c84:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c86:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d174      	bne.n	8005d76 <osMutexNew+0x102>
    if (attr != NULL) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <osMutexNew+0x26>
      type = attr->attr_bits;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e001      	b.n	8005c9e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <osMutexNew+0x3a>
      rmtx = 1U;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e001      	b.n	8005cb2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d15c      	bne.n	8005d76 <osMutexNew+0x102>
      mem = -1;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d015      	beq.n	8005cf4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d006      	beq.n	8005cde <osMutexNew+0x6a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	2b4f      	cmp	r3, #79	; 0x4f
 8005cd6:	d902      	bls.n	8005cde <osMutexNew+0x6a>
          mem = 1;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	e00c      	b.n	8005cf8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d108      	bne.n	8005cf8 <osMutexNew+0x84>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <osMutexNew+0x84>
            mem = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e001      	b.n	8005cf8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d112      	bne.n	8005d24 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	2004      	movs	r0, #4
 8005d0c:	f000 fb19 	bl	8006342 <xQueueCreateMutexStatic>
 8005d10:	61f8      	str	r0, [r7, #28]
 8005d12:	e016      	b.n	8005d42 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	f000 fb11 	bl	8006342 <xQueueCreateMutexStatic>
 8005d20:	61f8      	str	r0, [r7, #28]
 8005d22:	e00e      	b.n	8005d42 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005d30:	2004      	movs	r0, #4
 8005d32:	f000 faee 	bl	8006312 <xQueueCreateMutex>
 8005d36:	61f8      	str	r0, [r7, #28]
 8005d38:	e003      	b.n	8005d42 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	f000 fae9 	bl	8006312 <xQueueCreateMutex>
 8005d40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <osMutexNew+0xee>
        if (attr != NULL) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <osMutexNew+0xe2>
          name = attr->name;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e001      	b.n	8005d5a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	69f8      	ldr	r0, [r7, #28]
 8005d5e:	f001 f847 	bl	8006df0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d006      	beq.n	8005d76 <osMutexNew+0x102>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005d76:	69fb      	ldr	r3, [r7, #28]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d90:	f3ef 8305 	mrs	r3, IPSR
 8005d94:	613b      	str	r3, [r7, #16]
  return(result);
 8005d96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d175      	bne.n	8005e88 <osSemaphoreNew+0x108>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d072      	beq.n	8005e88 <osSemaphoreNew+0x108>
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d86e      	bhi.n	8005e88 <osSemaphoreNew+0x108>
    mem = -1;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d015      	beq.n	8005de2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d006      	beq.n	8005dcc <osSemaphoreNew+0x4c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b4f      	cmp	r3, #79	; 0x4f
 8005dc4:	d902      	bls.n	8005dcc <osSemaphoreNew+0x4c>
        mem = 1;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	e00c      	b.n	8005de6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <osSemaphoreNew+0x66>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <osSemaphoreNew+0x66>
          mem = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e001      	b.n	8005de6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d04c      	beq.n	8005e88 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d128      	bne.n	8005e46 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10a      	bne.n	8005e10 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	9200      	str	r2, [sp, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	2100      	movs	r1, #0
 8005e06:	2001      	movs	r0, #1
 8005e08:	f000 f994 	bl	8006134 <xQueueGenericCreateStatic>
 8005e0c:	61f8      	str	r0, [r7, #28]
 8005e0e:	e005      	b.n	8005e1c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e10:	2203      	movs	r2, #3
 8005e12:	2100      	movs	r1, #0
 8005e14:	2001      	movs	r0, #1
 8005e16:	f000 fa05 	bl	8006224 <xQueueGenericCreate>
 8005e1a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d022      	beq.n	8005e68 <osSemaphoreNew+0xe8>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01f      	beq.n	8005e68 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	69f8      	ldr	r0, [r7, #28]
 8005e30:	f000 fb0c 	bl	800644c <xQueueGenericSend>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d016      	beq.n	8005e68 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e3a:	69f8      	ldr	r0, [r7, #28]
 8005e3c:	f000 fe8c 	bl	8006b58 <vQueueDelete>
            hSemaphore = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	e010      	b.n	8005e68 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d108      	bne.n	8005e5e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	461a      	mov	r2, r3
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fa8f 	bl	8006378 <xQueueCreateCountingSemaphoreStatic>
 8005e5a:	61f8      	str	r0, [r7, #28]
 8005e5c:	e004      	b.n	8005e68 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fac0 	bl	80063e6 <xQueueCreateCountingSemaphore>
 8005e66:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <osSemaphoreNew+0xfc>
          name = attr->name;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e001      	b.n	8005e80 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005e80:	6979      	ldr	r1, [r7, #20]
 8005e82:	69f8      	ldr	r0, [r7, #28]
 8005e84:	f000 ffb4 	bl	8006df0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005e88:	69fb      	ldr	r3, [r7, #28]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ea4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4a06      	ldr	r2, [pc, #24]	; (8005ec4 <vApplicationGetIdleTaskMemory+0x30>)
 8005eaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2280      	movs	r2, #128	; 0x80
 8005eb0:	601a      	str	r2, [r3, #0]
}
 8005eb2:	bf00      	nop
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000278 	.word	0x20000278
 8005ec4:	200002d4 	.word	0x200002d4

08005ec8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4a07      	ldr	r2, [pc, #28]	; (8005ef4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ed8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a06      	ldr	r2, [pc, #24]	; (8005ef8 <vApplicationGetTimerTaskMemory+0x30>)
 8005ede:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	200004d4 	.word	0x200004d4
 8005ef8:	20000530 	.word	0x20000530

08005efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0208 	add.w	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 0208 	add.w	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f103 0208 	add.w	r2, r3, #8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d103      	bne.n	8005fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e00c      	b.n	8005fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e002      	b.n	8005fcc <vListInsert+0x2e>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d2f6      	bcs.n	8005fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6892      	ldr	r2, [r2, #8]
 8006026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6852      	ldr	r2, [r2, #4]
 8006030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d103      	bne.n	8006044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800608e:	f002 fbb1 	bl	80087f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	441a      	add	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	3b01      	subs	r3, #1
 80060c0:	68f9      	ldr	r1, [r7, #12]
 80060c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	441a      	add	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	22ff      	movs	r2, #255	; 0xff
 80060d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d114      	bne.n	800610e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01a      	beq.n	8006122 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3310      	adds	r3, #16
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fb65 	bl	80077c0 <xTaskRemoveFromEventList>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d012      	beq.n	8006122 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <xQueueGenericReset+0xcc>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	e009      	b.n	8006122 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3310      	adds	r3, #16
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fef2 	bl	8005efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff feed 	bl	8005efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006122:	f002 fb97 	bl	8008854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006126:	2301      	movs	r3, #1
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <xQueueGenericCreateStatic+0x52>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <xQueueGenericCreateStatic+0x56>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <xQueueGenericCreateStatic+0x58>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	623b      	str	r3, [r7, #32]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <xQueueGenericCreateStatic+0x7e>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <xQueueGenericCreateStatic+0x82>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <xQueueGenericCreateStatic+0x84>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	61fb      	str	r3, [r7, #28]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061d2:	2350      	movs	r3, #80	; 0x50
 80061d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b50      	cmp	r3, #80	; 0x50
 80061da:	d00a      	beq.n	80061f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	61bb      	str	r3, [r7, #24]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006206:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f83f 	bl	8006298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800621c:	4618      	mov	r0, r3
 800621e:	3730      	adds	r7, #48	; 0x30
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	613b      	str	r3, [r7, #16]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	3350      	adds	r3, #80	; 0x50
 800625c:	4618      	mov	r0, r3
 800625e:	f002 fbeb 	bl	8008a38 <pvPortMalloc>
 8006262:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d011      	beq.n	800628e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	3350      	adds	r3, #80	; 0x50
 8006272:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800627c:	79fa      	ldrb	r2, [r7, #7]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f805 	bl	8006298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800628e:	69bb      	ldr	r3, [r7, #24]
	}
 8006290:	4618      	mov	r0, r3
 8006292:	3720      	adds	r7, #32
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d103      	bne.n	80062b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e002      	b.n	80062ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062c6:	2101      	movs	r1, #1
 80062c8:	69b8      	ldr	r0, [r7, #24]
 80062ca:	f7ff fecb 	bl	8006064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00e      	beq.n	800630a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062fe:	2300      	movs	r3, #0
 8006300:	2200      	movs	r2, #0
 8006302:	2100      	movs	r1, #0
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8a1 	bl	800644c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af00      	add	r7, sp, #0
 8006318:	4603      	mov	r3, r0
 800631a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	461a      	mov	r2, r3
 8006328:	6939      	ldr	r1, [r7, #16]
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f7ff ff7a 	bl	8006224 <xQueueGenericCreate>
 8006330:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ffd3 	bl	80062de <prvInitialiseMutex>

		return xNewQueue;
 8006338:	68fb      	ldr	r3, [r7, #12]
	}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006342:	b580      	push	{r7, lr}
 8006344:	b088      	sub	sp, #32
 8006346:	af02      	add	r7, sp, #8
 8006348:	4603      	mov	r3, r0
 800634a:	6039      	str	r1, [r7, #0]
 800634c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800634e:	2301      	movs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	2300      	movs	r3, #0
 8006354:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2200      	movs	r2, #0
 800635e:	6939      	ldr	r1, [r7, #16]
 8006360:	6978      	ldr	r0, [r7, #20]
 8006362:	f7ff fee7 	bl	8006134 <xQueueGenericCreateStatic>
 8006366:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff ffb8 	bl	80062de <prvInitialiseMutex>

		return xNewQueue;
 800636e:	68fb      	ldr	r3, [r7, #12]
	}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	61bb      	str	r3, [r7, #24]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d90a      	bls.n	80063be <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	617b      	str	r3, [r7, #20]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80063be:	2302      	movs	r3, #2
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2100      	movs	r1, #0
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff feb3 	bl	8006134 <xQueueGenericCreateStatic>
 80063ce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063dc:	69fb      	ldr	r3, [r7, #28]
	}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	613b      	str	r3, [r7, #16]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d90a      	bls.n	800642a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60fb      	str	r3, [r7, #12]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800642a:	2202      	movs	r2, #2
 800642c:	2100      	movs	r1, #0
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fef8 	bl	8006224 <xQueueGenericCreate>
 8006434:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006442:	697b      	ldr	r3, [r7, #20]
	}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08e      	sub	sp, #56	; 0x38
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800645a:	2300      	movs	r3, #0
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xQueueGenericSend+0x32>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d103      	bne.n	800648c <xQueueGenericSend+0x40>
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <xQueueGenericSend+0x44>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <xQueueGenericSend+0x46>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <xQueueGenericSend+0x60>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d103      	bne.n	80064ba <xQueueGenericSend+0x6e>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <xQueueGenericSend+0x72>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <xQueueGenericSend+0x74>
 80064be:	2300      	movs	r3, #0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xQueueGenericSend+0x8e>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	623b      	str	r3, [r7, #32]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064da:	f001 fb2f 	bl	8007b3c <xTaskGetSchedulerState>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d102      	bne.n	80064ea <xQueueGenericSend+0x9e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <xQueueGenericSend+0xa2>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueGenericSend+0xa4>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericSend+0xbe>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	61fb      	str	r3, [r7, #28]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800650a:	f002 f973 	bl	80087f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	429a      	cmp	r2, r3
 8006518:	d302      	bcc.n	8006520 <xQueueGenericSend+0xd4>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d129      	bne.n	8006574 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006526:	f000 fb52 	bl	8006bce <prvCopyDataToQueue>
 800652a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d010      	beq.n	8006556 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f001 f941 	bl	80077c0 <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006544:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <xQueueGenericSend+0x1f8>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	e00a      	b.n	800656c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800655c:	4b39      	ldr	r3, [pc, #228]	; (8006644 <xQueueGenericSend+0x1f8>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800656c:	f002 f972 	bl	8008854 <vPortExitCritical>
				return pdPASS;
 8006570:	2301      	movs	r3, #1
 8006572:	e063      	b.n	800663c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800657a:	f002 f96b 	bl	8008854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800657e:	2300      	movs	r3, #0
 8006580:	e05c      	b.n	800663c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	4618      	mov	r0, r3
 800658e:	f001 f97b 	bl	8007888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006592:	2301      	movs	r3, #1
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006596:	f002 f95d 	bl	8008854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800659a:	f000 feed 	bl	8007378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800659e:	f002 f929 	bl	80087f4 <vPortEnterCritical>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d103      	bne.n	80065b8 <xQueueGenericSend+0x16c>
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065be:	b25b      	sxtb	r3, r3
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d103      	bne.n	80065ce <xQueueGenericSend+0x182>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ce:	f002 f941 	bl	8008854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065d2:	1d3a      	adds	r2, r7, #4
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f96a 	bl	80078b4 <xTaskCheckForTimeOut>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d124      	bne.n	8006630 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e8:	f000 fbe9 	bl	8006dbe <prvIsQueueFull>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d018      	beq.n	8006624 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	3310      	adds	r3, #16
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f890 	bl	8007720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006602:	f000 fb74 	bl	8006cee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006606:	f000 fec5 	bl	8007394 <xTaskResumeAll>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	f47f af7c 	bne.w	800650a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <xQueueGenericSend+0x1f8>)
 8006614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	e772      	b.n	800650a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006626:	f000 fb62 	bl	8006cee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800662a:	f000 feb3 	bl	8007394 <xTaskResumeAll>
 800662e:	e76c      	b.n	800650a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006632:	f000 fb5c 	bl	8006cee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006636:	f000 fead 	bl	8007394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800663a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800663c:	4618      	mov	r0, r3
 800663e:	3738      	adds	r7, #56	; 0x38
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b090      	sub	sp, #64	; 0x40
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <xQueueGenericSendFromISR+0x3c>
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <xQueueGenericSendFromISR+0x40>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <xQueueGenericSendFromISR+0x42>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d103      	bne.n	80066b2 <xQueueGenericSendFromISR+0x6a>
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <xQueueGenericSendFromISR+0x6e>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <xQueueGenericSendFromISR+0x70>
 80066b6:	2300      	movs	r3, #0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	623b      	str	r3, [r7, #32]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066d2:	f002 f971 	bl	80089b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066d6:	f3ef 8211 	mrs	r2, BASEPRI
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	61fa      	str	r2, [r7, #28]
 80066ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <xQueueGenericSendFromISR+0xbc>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d12f      	bne.n	8006764 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800670a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800671a:	f000 fa58 	bl	8006bce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800671e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d112      	bne.n	800674e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d016      	beq.n	800675e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	3324      	adds	r3, #36	; 0x24
 8006734:	4618      	mov	r0, r3
 8006736:	f001 f843 	bl	80077c0 <xTaskRemoveFromEventList>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00e      	beq.n	800675e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e007      	b.n	800675e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800674e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006752:	3301      	adds	r3, #1
 8006754:	b2db      	uxtb	r3, r3
 8006756:	b25a      	sxtb	r2, r3
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800675e:	2301      	movs	r3, #1
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006762:	e001      	b.n	8006768 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006764:	2300      	movs	r3, #0
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006772:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006776:	4618      	mov	r0, r3
 8006778:	3740      	adds	r7, #64	; 0x40
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08c      	sub	sp, #48	; 0x30
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800678c:	2300      	movs	r3, #0
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <xQueueReceive+0x30>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	623b      	str	r3, [r7, #32]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <xQueueReceive+0x3e>
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <xQueueReceive+0x42>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <xQueueReceive+0x44>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <xQueueReceive+0x5e>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	61fb      	str	r3, [r7, #28]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067de:	f001 f9ad 	bl	8007b3c <xTaskGetSchedulerState>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <xQueueReceive+0x6e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <xQueueReceive+0x72>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xQueueReceive+0x74>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <xQueueReceive+0x8e>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	61bb      	str	r3, [r7, #24]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800680e:	f001 fff1 	bl	80087f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01f      	beq.n	800685e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006822:	f000 fa3e 	bl	8006ca2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	1e5a      	subs	r2, r3, #1
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00f      	beq.n	8006856 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	3310      	adds	r3, #16
 800683a:	4618      	mov	r0, r3
 800683c:	f000 ffc0 	bl	80077c0 <xTaskRemoveFromEventList>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006846:	4b3d      	ldr	r3, [pc, #244]	; (800693c <xQueueReceive+0x1bc>)
 8006848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006856:	f001 fffd 	bl	8008854 <vPortExitCritical>
				return pdPASS;
 800685a:	2301      	movs	r3, #1
 800685c:	e069      	b.n	8006932 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d103      	bne.n	800686c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006864:	f001 fff6 	bl	8008854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006868:	2300      	movs	r3, #0
 800686a:	e062      	b.n	8006932 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006872:	f107 0310 	add.w	r3, r7, #16
 8006876:	4618      	mov	r0, r3
 8006878:	f001 f806 	bl	8007888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006880:	f001 ffe8 	bl	8008854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006884:	f000 fd78 	bl	8007378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006888:	f001 ffb4 	bl	80087f4 <vPortEnterCritical>
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006892:	b25b      	sxtb	r3, r3
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d103      	bne.n	80068a2 <xQueueReceive+0x122>
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d103      	bne.n	80068b8 <xQueueReceive+0x138>
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b8:	f001 ffcc 	bl	8008854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068bc:	1d3a      	adds	r2, r7, #4
 80068be:	f107 0310 	add.w	r3, r7, #16
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fff5 	bl	80078b4 <xTaskCheckForTimeOut>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d123      	bne.n	8006918 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d2:	f000 fa5e 	bl	8006d92 <prvIsQueueEmpty>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d017      	beq.n	800690c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	3324      	adds	r3, #36	; 0x24
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 ff1b 	bl	8007720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ec:	f000 f9ff 	bl	8006cee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068f0:	f000 fd50 	bl	8007394 <xTaskResumeAll>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d189      	bne.n	800680e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <xQueueReceive+0x1bc>)
 80068fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	e780      	b.n	800680e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800690c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690e:	f000 f9ee 	bl	8006cee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006912:	f000 fd3f 	bl	8007394 <xTaskResumeAll>
 8006916:	e77a      	b.n	800680e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691a:	f000 f9e8 	bl	8006cee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800691e:	f000 fd39 	bl	8007394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006924:	f000 fa35 	bl	8006d92 <prvIsQueueEmpty>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	f43f af6f 	beq.w	800680e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006932:	4618      	mov	r0, r3
 8006934:	3730      	adds	r7, #48	; 0x30
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800694a:	2300      	movs	r3, #0
 800694c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	623b      	str	r3, [r7, #32]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	61fb      	str	r3, [r7, #28]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006990:	f001 f8d4 	bl	8007b3c <xTaskGetSchedulerState>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <xQueueSemaphoreTake+0x60>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <xQueueSemaphoreTake+0x64>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <xQueueSemaphoreTake+0x66>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	61bb      	str	r3, [r7, #24]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069c0:	f001 ff18 	bl	80087f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d024      	beq.n	8006a1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80069e0:	f001 fa22 	bl	8007e28 <pvTaskIncrementMutexHeldCount>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00f      	beq.n	8006a12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	3310      	adds	r3, #16
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fee2 	bl	80077c0 <xTaskRemoveFromEventList>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a02:	4b54      	ldr	r3, [pc, #336]	; (8006b54 <xQueueSemaphoreTake+0x214>)
 8006a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a12:	f001 ff1f 	bl	8008854 <vPortExitCritical>
				return pdPASS;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e097      	b.n	8006b4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d111      	bne.n	8006a44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	617b      	str	r3, [r7, #20]
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a3c:	f001 ff0a 	bl	8008854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e082      	b.n	8006b4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a4a:	f107 030c 	add.w	r3, r7, #12
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 ff1a 	bl	8007888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a58:	f001 fefc 	bl	8008854 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a5c:	f000 fc8c 	bl	8007378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a60:	f001 fec8 	bl	80087f4 <vPortEnterCritical>
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d103      	bne.n	8006a7a <xQueueSemaphoreTake+0x13a>
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d103      	bne.n	8006a90 <xQueueSemaphoreTake+0x150>
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a90:	f001 fee0 	bl	8008854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a94:	463a      	mov	r2, r7
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 ff09 	bl	80078b4 <xTaskCheckForTimeOut>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d132      	bne.n	8006b0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aaa:	f000 f972 	bl	8006d92 <prvIsQueueEmpty>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d026      	beq.n	8006b02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006abc:	f001 fe9a 	bl	80087f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 f857 	bl	8007b78 <xTaskPriorityInherit>
 8006aca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006acc:	f001 fec2 	bl	8008854 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	3324      	adds	r3, #36	; 0x24
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fe21 	bl	8007720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ae0:	f000 f905 	bl	8006cee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ae4:	f000 fc56 	bl	8007394 <xTaskResumeAll>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f af68 	bne.w	80069c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006af0:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <xQueueSemaphoreTake+0x214>)
 8006af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	e75e      	b.n	80069c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b04:	f000 f8f3 	bl	8006cee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b08:	f000 fc44 	bl	8007394 <xTaskResumeAll>
 8006b0c:	e758      	b.n	80069c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b10:	f000 f8ed 	bl	8006cee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b14:	f000 fc3e 	bl	8007394 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b1a:	f000 f93a 	bl	8006d92 <prvIsQueueEmpty>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f43f af4d 	beq.w	80069c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00d      	beq.n	8006b48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006b2c:	f001 fe62 	bl	80087f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b32:	f000 f834 	bl	8006b9e <prvGetDisinheritPriorityAfterTimeout>
 8006b36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f8f0 	bl	8007d24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b44:	f001 fe86 	bl	8008854 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3738      	adds	r7, #56	; 0x38
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <vQueueDelete+0x28>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60bb      	str	r3, [r7, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f95f 	bl	8006e44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f002 f81d 	bl	8008bd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d006      	beq.n	8006bbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e001      	b.n	8006bc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
	}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d14d      	bne.n	8006c90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 f825 	bl	8007c48 <xTaskPriorityDisinherit>
 8006bfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	609a      	str	r2, [r3, #8]
 8006c06:	e043      	b.n	8006c90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d119      	bne.n	8006c42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6858      	ldr	r0, [r3, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	461a      	mov	r2, r3
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	f002 f921 	bl	8008e60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	441a      	add	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d32b      	bcc.n	8006c90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	e026      	b.n	8006c90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68d8      	ldr	r0, [r3, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	f002 f907 	bl	8008e60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	425b      	negs	r3, r3
 8006c5c:	441a      	add	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d207      	bcs.n	8006c7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	425b      	negs	r3, r3
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d105      	bne.n	8006c90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c98:	697b      	ldr	r3, [r7, #20]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d018      	beq.n	8006ce6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	441a      	add	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d303      	bcc.n	8006cd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68d9      	ldr	r1, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6838      	ldr	r0, [r7, #0]
 8006ce2:	f002 f8bd 	bl	8008e60 <memcpy>
	}
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cf6:	f001 fd7d 	bl	80087f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d02:	e011      	b.n	8006d28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d012      	beq.n	8006d32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3324      	adds	r3, #36	; 0x24
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fd55 	bl	80077c0 <xTaskRemoveFromEventList>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d1c:	f000 fe2c 	bl	8007978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dce9      	bgt.n	8006d04 <prvUnlockQueue+0x16>
 8006d30:	e000      	b.n	8006d34 <prvUnlockQueue+0x46>
					break;
 8006d32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	22ff      	movs	r2, #255	; 0xff
 8006d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d3c:	f001 fd8a 	bl	8008854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d40:	f001 fd58 	bl	80087f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d4c:	e011      	b.n	8006d72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d012      	beq.n	8006d7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3310      	adds	r3, #16
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fd30 	bl	80077c0 <xTaskRemoveFromEventList>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d66:	f000 fe07 	bl	8007978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dce9      	bgt.n	8006d4e <prvUnlockQueue+0x60>
 8006d7a:	e000      	b.n	8006d7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	22ff      	movs	r2, #255	; 0xff
 8006d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d86:	f001 fd65 	bl	8008854 <vPortExitCritical>
}
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d9a:	f001 fd2b 	bl	80087f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006da6:	2301      	movs	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	e001      	b.n	8006db0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006db0:	f001 fd50 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8006db4:	68fb      	ldr	r3, [r7, #12]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dc6:	f001 fd15 	bl	80087f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d102      	bne.n	8006ddc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e001      	b.n	8006de0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006de0:	f001 fd38 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8006de4:	68fb      	ldr	r3, [r7, #12]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e014      	b.n	8006e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e00:	4a0f      	ldr	r2, [pc, #60]	; (8006e40 <vQueueAddToRegistry+0x50>)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10b      	bne.n	8006e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e0c:	490c      	ldr	r1, [pc, #48]	; (8006e40 <vQueueAddToRegistry+0x50>)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e16:	4a0a      	ldr	r2, [pc, #40]	; (8006e40 <vQueueAddToRegistry+0x50>)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e22:	e006      	b.n	8006e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b07      	cmp	r3, #7
 8006e2e:	d9e7      	bls.n	8006e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20004c88 	.word	0x20004c88

08006e44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e016      	b.n	8006e80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006e52:	4a10      	ldr	r2, [pc, #64]	; (8006e94 <vQueueUnregisterQueue+0x50>)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	4413      	add	r3, r2
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d10b      	bne.n	8006e7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006e62:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <vQueueUnregisterQueue+0x50>)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2100      	movs	r1, #0
 8006e68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006e6c:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <vQueueUnregisterQueue+0x50>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	4413      	add	r3, r2
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]
				break;
 8006e78:	e006      	b.n	8006e88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b07      	cmp	r3, #7
 8006e84:	d9e5      	bls.n	8006e52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	20004c88 	.word	0x20004c88

08006e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ea8:	f001 fca4 	bl	80087f4 <vPortEnterCritical>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d103      	bne.n	8006ec2 <vQueueWaitForMessageRestricted+0x2a>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d103      	bne.n	8006ed8 <vQueueWaitForMessageRestricted+0x40>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ed8:	f001 fcbc 	bl	8008854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	3324      	adds	r3, #36	; 0x24
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fc3b 	bl	8007768 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ef2:	6978      	ldr	r0, [r7, #20]
 8006ef4:	f7ff fefb 	bl	8006cee <prvUnlockQueue>
	}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08e      	sub	sp, #56	; 0x38
 8006f04:	af04      	add	r7, sp, #16
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	623b      	str	r3, [r7, #32]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	61fb      	str	r3, [r7, #28]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f46:	235c      	movs	r3, #92	; 0x5c
 8006f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b5c      	cmp	r3, #92	; 0x5c
 8006f4e:	d00a      	beq.n	8006f66 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	61bb      	str	r3, [r7, #24]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01e      	beq.n	8006fac <xTaskCreateStatic+0xac>
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01b      	beq.n	8006fac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f86:	2300      	movs	r3, #0
 8006f88:	9303      	str	r3, [sp, #12]
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	9302      	str	r3, [sp, #8]
 8006f8e:	f107 0314 	add.w	r3, r7, #20
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f850 	bl	8007044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fa6:	f000 f8dd 	bl	8007164 <prvAddNewTaskToReadyList>
 8006faa:	e001      	b.n	8006fb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fb0:	697b      	ldr	r3, [r7, #20]
	}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3728      	adds	r7, #40	; 0x28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b08c      	sub	sp, #48	; 0x30
 8006fbe:	af04      	add	r7, sp, #16
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	603b      	str	r3, [r7, #0]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 fd32 	bl	8008a38 <pvPortMalloc>
 8006fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00e      	beq.n	8006ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fdc:	205c      	movs	r0, #92	; 0x5c
 8006fde:	f001 fd2b 	bl	8008a38 <pvPortMalloc>
 8006fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
 8006ff0:	e005      	b.n	8006ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ff2:	6978      	ldr	r0, [r7, #20]
 8006ff4:	f001 fdec 	bl	8008bd0 <vPortFree>
 8006ff8:	e001      	b.n	8006ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d017      	beq.n	8007034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800700c:	88fa      	ldrh	r2, [r7, #6]
 800700e:	2300      	movs	r3, #0
 8007010:	9303      	str	r3, [sp, #12]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	9302      	str	r3, [sp, #8]
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f80e 	bl	8007044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007028:	69f8      	ldr	r0, [r7, #28]
 800702a:	f000 f89b 	bl	8007164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800702e:	2301      	movs	r3, #1
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e002      	b.n	800703a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007034:	f04f 33ff 	mov.w	r3, #4294967295
 8007038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800703a:	69bb      	ldr	r3, [r7, #24]
	}
 800703c:	4618      	mov	r0, r3
 800703e:	3720      	adds	r7, #32
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	461a      	mov	r2, r3
 800705c:	21a5      	movs	r1, #165	; 0xa5
 800705e:	f001 ff0d 	bl	8008e7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800706c:	3b01      	subs	r3, #1
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	617b      	str	r3, [r7, #20]
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01f      	beq.n	80070e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	e012      	b.n	80070ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	7819      	ldrb	r1, [r3, #0]
 80070b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	3334      	adds	r3, #52	; 0x34
 80070b8:	460a      	mov	r2, r1
 80070ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b0f      	cmp	r3, #15
 80070d2:	d9e9      	bls.n	80070a8 <prvInitialiseNewTask+0x64>
 80070d4:	e000      	b.n	80070d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80070d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070e0:	e003      	b.n	80070ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	2b37      	cmp	r3, #55	; 0x37
 80070ee:	d901      	bls.n	80070f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070f0:	2337      	movs	r3, #55	; 0x37
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	2200      	movs	r2, #0
 8007104:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	3304      	adds	r3, #4
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe ff16 	bl	8005f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	3318      	adds	r3, #24
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe ff11 	bl	8005f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	2200      	movs	r2, #0
 8007134:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	68f9      	ldr	r1, [r7, #12]
 8007142:	69b8      	ldr	r0, [r7, #24]
 8007144:	f001 fa26 	bl	8008594 <pxPortInitialiseStack>
 8007148:	4602      	mov	r2, r0
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800715a:	bf00      	nop
 800715c:	3720      	adds	r7, #32
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800716c:	f001 fb42 	bl	80087f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007170:	4b2d      	ldr	r3, [pc, #180]	; (8007228 <prvAddNewTaskToReadyList+0xc4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <prvAddNewTaskToReadyList+0xc4>)
 8007178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800717a:	4b2c      	ldr	r3, [pc, #176]	; (800722c <prvAddNewTaskToReadyList+0xc8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007182:	4a2a      	ldr	r2, [pc, #168]	; (800722c <prvAddNewTaskToReadyList+0xc8>)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007188:	4b27      	ldr	r3, [pc, #156]	; (8007228 <prvAddNewTaskToReadyList+0xc4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d110      	bne.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007190:	f000 fc16 	bl	80079c0 <prvInitialiseTaskLists>
 8007194:	e00d      	b.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007196:	4b26      	ldr	r3, [pc, #152]	; (8007230 <prvAddNewTaskToReadyList+0xcc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800719e:	4b23      	ldr	r3, [pc, #140]	; (800722c <prvAddNewTaskToReadyList+0xc8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d802      	bhi.n	80071b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071ac:	4a1f      	ldr	r2, [pc, #124]	; (800722c <prvAddNewTaskToReadyList+0xc8>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071b2:	4b20      	ldr	r3, [pc, #128]	; (8007234 <prvAddNewTaskToReadyList+0xd0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <prvAddNewTaskToReadyList+0xd0>)
 80071ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071bc:	4b1d      	ldr	r3, [pc, #116]	; (8007234 <prvAddNewTaskToReadyList+0xd0>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c8:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <prvAddNewTaskToReadyList+0xd4>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d903      	bls.n	80071d8 <prvAddNewTaskToReadyList+0x74>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	4a18      	ldr	r2, [pc, #96]	; (8007238 <prvAddNewTaskToReadyList+0xd4>)
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4a15      	ldr	r2, [pc, #84]	; (800723c <prvAddNewTaskToReadyList+0xd8>)
 80071e6:	441a      	add	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f7fe feb1 	bl	8005f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071f4:	f001 fb2e 	bl	8008854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071f8:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <prvAddNewTaskToReadyList+0xcc>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00e      	beq.n	800721e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007200:	4b0a      	ldr	r3, [pc, #40]	; (800722c <prvAddNewTaskToReadyList+0xc8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	429a      	cmp	r2, r3
 800720c:	d207      	bcs.n	800721e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <prvAddNewTaskToReadyList+0xdc>)
 8007210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800721e:	bf00      	nop
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000e04 	.word	0x20000e04
 800722c:	20000930 	.word	0x20000930
 8007230:	20000e10 	.word	0x20000e10
 8007234:	20000e20 	.word	0x20000e20
 8007238:	20000e0c 	.word	0x20000e0c
 800723c:	20000934 	.word	0x20000934
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d017      	beq.n	8007286 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007256:	4b13      	ldr	r3, [pc, #76]	; (80072a4 <vTaskDelay+0x60>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <vTaskDelay+0x30>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	60bb      	str	r3, [r7, #8]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007274:	f000 f880 	bl	8007378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007278:	2100      	movs	r1, #0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fde8 	bl	8007e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007280:	f000 f888 	bl	8007394 <xTaskResumeAll>
 8007284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d107      	bne.n	800729c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <vTaskDelay+0x64>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000e2c 	.word	0x20000e2c
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	; 0x28
 80072b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072ba:	463a      	mov	r2, r7
 80072bc:	1d39      	adds	r1, r7, #4
 80072be:	f107 0308 	add.w	r3, r7, #8
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fde6 	bl	8005e94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	9202      	str	r2, [sp, #8]
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	2300      	movs	r3, #0
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	2300      	movs	r3, #0
 80072d8:	460a      	mov	r2, r1
 80072da:	4921      	ldr	r1, [pc, #132]	; (8007360 <vTaskStartScheduler+0xb4>)
 80072dc:	4821      	ldr	r0, [pc, #132]	; (8007364 <vTaskStartScheduler+0xb8>)
 80072de:	f7ff fe0f 	bl	8006f00 <xTaskCreateStatic>
 80072e2:	4603      	mov	r3, r0
 80072e4:	4a20      	ldr	r2, [pc, #128]	; (8007368 <vTaskStartScheduler+0xbc>)
 80072e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072e8:	4b1f      	ldr	r3, [pc, #124]	; (8007368 <vTaskStartScheduler+0xbc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072f0:	2301      	movs	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e001      	b.n	80072fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d102      	bne.n	8007306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007300:	f000 fdfa 	bl	8007ef8 <xTimerCreateTimerTask>
 8007304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d116      	bne.n	800733a <vTaskStartScheduler+0x8e>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	613b      	str	r3, [r7, #16]
}
 800731e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007320:	4b12      	ldr	r3, [pc, #72]	; (800736c <vTaskStartScheduler+0xc0>)
 8007322:	f04f 32ff 	mov.w	r2, #4294967295
 8007326:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007328:	4b11      	ldr	r3, [pc, #68]	; (8007370 <vTaskStartScheduler+0xc4>)
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <vTaskStartScheduler+0xc8>)
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007334:	f001 f9bc 	bl	80086b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007338:	e00e      	b.n	8007358 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d10a      	bne.n	8007358 <vTaskStartScheduler+0xac>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	60fb      	str	r3, [r7, #12]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <vTaskStartScheduler+0xaa>
}
 8007358:	bf00      	nop
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	0800b8a4 	.word	0x0800b8a4
 8007364:	08007991 	.word	0x08007991
 8007368:	20000e28 	.word	0x20000e28
 800736c:	20000e24 	.word	0x20000e24
 8007370:	20000e10 	.word	0x20000e10
 8007374:	20000e08 	.word	0x20000e08

08007378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800737c:	4b04      	ldr	r3, [pc, #16]	; (8007390 <vTaskSuspendAll+0x18>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	4a03      	ldr	r2, [pc, #12]	; (8007390 <vTaskSuspendAll+0x18>)
 8007384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007386:	bf00      	nop
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	20000e2c 	.word	0x20000e2c

08007394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073a2:	4b42      	ldr	r3, [pc, #264]	; (80074ac <xTaskResumeAll+0x118>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	603b      	str	r3, [r7, #0]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073c0:	f001 fa18 	bl	80087f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073c4:	4b39      	ldr	r3, [pc, #228]	; (80074ac <xTaskResumeAll+0x118>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	4a38      	ldr	r2, [pc, #224]	; (80074ac <xTaskResumeAll+0x118>)
 80073cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ce:	4b37      	ldr	r3, [pc, #220]	; (80074ac <xTaskResumeAll+0x118>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d162      	bne.n	800749c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073d6:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <xTaskResumeAll+0x11c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d05e      	beq.n	800749c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073de:	e02f      	b.n	8007440 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e0:	4b34      	ldr	r3, [pc, #208]	; (80074b4 <xTaskResumeAll+0x120>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3318      	adds	r3, #24
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fe0f 	bl	8006010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fe0a 	bl	8006010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	4b2d      	ldr	r3, [pc, #180]	; (80074b8 <xTaskResumeAll+0x124>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d903      	bls.n	8007410 <xTaskResumeAll+0x7c>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <xTaskResumeAll+0x124>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4a27      	ldr	r2, [pc, #156]	; (80074bc <xTaskResumeAll+0x128>)
 800741e:	441a      	add	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7fe fd95 	bl	8005f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4b23      	ldr	r3, [pc, #140]	; (80074c0 <xTaskResumeAll+0x12c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	429a      	cmp	r2, r3
 8007438:	d302      	bcc.n	8007440 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800743a:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <xTaskResumeAll+0x130>)
 800743c:	2201      	movs	r2, #1
 800743e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007440:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <xTaskResumeAll+0x120>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1cb      	bne.n	80073e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800744e:	f000 fb55 	bl	8007afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007452:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <xTaskResumeAll+0x134>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d010      	beq.n	8007480 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800745e:	f000 f847 	bl	80074f0 <xTaskIncrementTick>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007468:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <xTaskResumeAll+0x130>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3b01      	subs	r3, #1
 8007472:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1f1      	bne.n	800745e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800747a:	4b13      	ldr	r3, [pc, #76]	; (80074c8 <xTaskResumeAll+0x134>)
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007480:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <xTaskResumeAll+0x130>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d009      	beq.n	800749c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800748c:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <xTaskResumeAll+0x138>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800749c:	f001 f9da 	bl	8008854 <vPortExitCritical>

	return xAlreadyYielded;
 80074a0:	68bb      	ldr	r3, [r7, #8]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000e2c 	.word	0x20000e2c
 80074b0:	20000e04 	.word	0x20000e04
 80074b4:	20000dc4 	.word	0x20000dc4
 80074b8:	20000e0c 	.word	0x20000e0c
 80074bc:	20000934 	.word	0x20000934
 80074c0:	20000930 	.word	0x20000930
 80074c4:	20000e18 	.word	0x20000e18
 80074c8:	20000e14 	.word	0x20000e14
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <xTaskGetTickCount+0x1c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074dc:	687b      	ldr	r3, [r7, #4]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000e08 	.word	0x20000e08

080074f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074fa:	4b4f      	ldr	r3, [pc, #316]	; (8007638 <xTaskIncrementTick+0x148>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 808f 	bne.w	8007622 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007504:	4b4d      	ldr	r3, [pc, #308]	; (800763c <xTaskIncrementTick+0x14c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800750c:	4a4b      	ldr	r2, [pc, #300]	; (800763c <xTaskIncrementTick+0x14c>)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d120      	bne.n	800755a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007518:	4b49      	ldr	r3, [pc, #292]	; (8007640 <xTaskIncrementTick+0x150>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <xTaskIncrementTick+0x48>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	603b      	str	r3, [r7, #0]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xTaskIncrementTick+0x46>
 8007538:	4b41      	ldr	r3, [pc, #260]	; (8007640 <xTaskIncrementTick+0x150>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	4b41      	ldr	r3, [pc, #260]	; (8007644 <xTaskIncrementTick+0x154>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a3f      	ldr	r2, [pc, #252]	; (8007640 <xTaskIncrementTick+0x150>)
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	4a3f      	ldr	r2, [pc, #252]	; (8007644 <xTaskIncrementTick+0x154>)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	4b3e      	ldr	r3, [pc, #248]	; (8007648 <xTaskIncrementTick+0x158>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a3d      	ldr	r2, [pc, #244]	; (8007648 <xTaskIncrementTick+0x158>)
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	f000 fad1 	bl	8007afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800755a:	4b3c      	ldr	r3, [pc, #240]	; (800764c <xTaskIncrementTick+0x15c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d349      	bcc.n	80075f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007564:	4b36      	ldr	r3, [pc, #216]	; (8007640 <xTaskIncrementTick+0x150>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d104      	bne.n	8007578 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756e:	4b37      	ldr	r3, [pc, #220]	; (800764c <xTaskIncrementTick+0x15c>)
 8007570:	f04f 32ff 	mov.w	r2, #4294967295
 8007574:	601a      	str	r2, [r3, #0]
					break;
 8007576:	e03f      	b.n	80075f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007578:	4b31      	ldr	r3, [pc, #196]	; (8007640 <xTaskIncrementTick+0x150>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d203      	bcs.n	8007598 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007590:	4a2e      	ldr	r2, [pc, #184]	; (800764c <xTaskIncrementTick+0x15c>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007596:	e02f      	b.n	80075f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	3304      	adds	r3, #4
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe fd37 	bl	8006010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	3318      	adds	r3, #24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd2e 	bl	8006010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4b25      	ldr	r3, [pc, #148]	; (8007650 <xTaskIncrementTick+0x160>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d903      	bls.n	80075c8 <xTaskIncrementTick+0xd8>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a22      	ldr	r2, [pc, #136]	; (8007650 <xTaskIncrementTick+0x160>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <xTaskIncrementTick+0x164>)
 80075d6:	441a      	add	r2, r3
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7fe fcb9 	bl	8005f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <xTaskIncrementTick+0x168>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d3b8      	bcc.n	8007564 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075f2:	2301      	movs	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f6:	e7b5      	b.n	8007564 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075f8:	4b17      	ldr	r3, [pc, #92]	; (8007658 <xTaskIncrementTick+0x168>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fe:	4915      	ldr	r1, [pc, #84]	; (8007654 <xTaskIncrementTick+0x164>)
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d901      	bls.n	8007614 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007610:	2301      	movs	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007614:	4b11      	ldr	r3, [pc, #68]	; (800765c <xTaskIncrementTick+0x16c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800761c:	2301      	movs	r3, #1
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	e004      	b.n	800762c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007622:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <xTaskIncrementTick+0x170>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	4a0d      	ldr	r2, [pc, #52]	; (8007660 <xTaskIncrementTick+0x170>)
 800762a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800762c:	697b      	ldr	r3, [r7, #20]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000e2c 	.word	0x20000e2c
 800763c:	20000e08 	.word	0x20000e08
 8007640:	20000dbc 	.word	0x20000dbc
 8007644:	20000dc0 	.word	0x20000dc0
 8007648:	20000e1c 	.word	0x20000e1c
 800764c:	20000e24 	.word	0x20000e24
 8007650:	20000e0c 	.word	0x20000e0c
 8007654:	20000934 	.word	0x20000934
 8007658:	20000930 	.word	0x20000930
 800765c:	20000e18 	.word	0x20000e18
 8007660:	20000e14 	.word	0x20000e14

08007664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800766a:	4b28      	ldr	r3, [pc, #160]	; (800770c <vTaskSwitchContext+0xa8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007672:	4b27      	ldr	r3, [pc, #156]	; (8007710 <vTaskSwitchContext+0xac>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007678:	e041      	b.n	80076fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800767a:	4b25      	ldr	r3, [pc, #148]	; (8007710 <vTaskSwitchContext+0xac>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007680:	4b24      	ldr	r3, [pc, #144]	; (8007714 <vTaskSwitchContext+0xb0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e010      	b.n	80076aa <vTaskSwitchContext+0x46>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <vTaskSwitchContext+0x3e>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	491b      	ldr	r1, [pc, #108]	; (8007718 <vTaskSwitchContext+0xb4>)
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0e4      	beq.n	8007688 <vTaskSwitchContext+0x24>
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4a13      	ldr	r2, [pc, #76]	; (8007718 <vTaskSwitchContext+0xb4>)
 80076ca:	4413      	add	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	3308      	adds	r3, #8
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d104      	bne.n	80076ee <vTaskSwitchContext+0x8a>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	605a      	str	r2, [r3, #4]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4a09      	ldr	r2, [pc, #36]	; (800771c <vTaskSwitchContext+0xb8>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	4a06      	ldr	r2, [pc, #24]	; (8007714 <vTaskSwitchContext+0xb0>)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6013      	str	r3, [r2, #0]
}
 80076fe:	bf00      	nop
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20000e2c 	.word	0x20000e2c
 8007710:	20000e18 	.word	0x20000e18
 8007714:	20000e0c 	.word	0x20000e0c
 8007718:	20000934 	.word	0x20000934
 800771c:	20000930 	.word	0x20000930

08007720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <vTaskPlaceOnEventList+0x44>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3318      	adds	r3, #24
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fe fc25 	bl	8005f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007754:	2101      	movs	r1, #1
 8007756:	6838      	ldr	r0, [r7, #0]
 8007758:	f000 fb7a 	bl	8007e50 <prvAddCurrentTaskToDelayedList>
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000930 	.word	0x20000930

08007768 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	617b      	str	r3, [r7, #20]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <vTaskPlaceOnEventListRestricted+0x54>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3318      	adds	r3, #24
 8007796:	4619      	mov	r1, r3
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7fe fbdc 	bl	8005f56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80077a4:	f04f 33ff 	mov.w	r3, #4294967295
 80077a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	68b8      	ldr	r0, [r7, #8]
 80077ae:	f000 fb4f 	bl	8007e50 <prvAddCurrentTaskToDelayedList>
	}
 80077b2:	bf00      	nop
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000930 	.word	0x20000930

080077c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60fb      	str	r3, [r7, #12]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	3318      	adds	r3, #24
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe fc0d 	bl	8006010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f6:	4b1e      	ldr	r3, [pc, #120]	; (8007870 <xTaskRemoveFromEventList+0xb0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d11d      	bne.n	800783a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fc04 	bl	8006010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	4b19      	ldr	r3, [pc, #100]	; (8007874 <xTaskRemoveFromEventList+0xb4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d903      	bls.n	800781c <xTaskRemoveFromEventList+0x5c>
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a16      	ldr	r2, [pc, #88]	; (8007874 <xTaskRemoveFromEventList+0xb4>)
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4a13      	ldr	r2, [pc, #76]	; (8007878 <xTaskRemoveFromEventList+0xb8>)
 800782a:	441a      	add	r2, r3
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7fe fb8f 	bl	8005f56 <vListInsertEnd>
 8007838:	e005      	b.n	8007846 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	3318      	adds	r3, #24
 800783e:	4619      	mov	r1, r3
 8007840:	480e      	ldr	r0, [pc, #56]	; (800787c <xTaskRemoveFromEventList+0xbc>)
 8007842:	f7fe fb88 	bl	8005f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <xTaskRemoveFromEventList+0xc0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	429a      	cmp	r2, r3
 8007852:	d905      	bls.n	8007860 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007854:	2301      	movs	r3, #1
 8007856:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <xTaskRemoveFromEventList+0xc4>)
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e001      	b.n	8007864 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007864:	697b      	ldr	r3, [r7, #20]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000e2c 	.word	0x20000e2c
 8007874:	20000e0c 	.word	0x20000e0c
 8007878:	20000934 	.word	0x20000934
 800787c:	20000dc4 	.word	0x20000dc4
 8007880:	20000930 	.word	0x20000930
 8007884:	20000e18 	.word	0x20000e18

08007888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <vTaskInternalSetTimeOutState+0x24>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <vTaskInternalSetTimeOutState+0x28>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	605a      	str	r2, [r3, #4]
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000e1c 	.word	0x20000e1c
 80078b0:	20000e08 	.word	0x20000e08

080078b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	613b      	str	r3, [r7, #16]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80078f6:	f000 ff7d 	bl	80087f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <xTaskCheckForTimeOut+0xbc>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007912:	d102      	bne.n	800791a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007914:	2300      	movs	r3, #0
 8007916:	61fb      	str	r3, [r7, #28]
 8007918:	e023      	b.n	8007962 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b15      	ldr	r3, [pc, #84]	; (8007974 <xTaskCheckForTimeOut+0xc0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d007      	beq.n	8007936 <xTaskCheckForTimeOut+0x82>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	d302      	bcc.n	8007936 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	e015      	b.n	8007962 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	429a      	cmp	r2, r3
 800793e:	d20b      	bcs.n	8007958 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	1ad2      	subs	r2, r2, r3
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ff9b 	bl	8007888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	e004      	b.n	8007962 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007962:	f000 ff77 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8007966:	69fb      	ldr	r3, [r7, #28]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000e08 	.word	0x20000e08
 8007974:	20000e1c 	.word	0x20000e1c

08007978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <vTaskMissedYield+0x14>)
 800797e:	2201      	movs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20000e18 	.word	0x20000e18

08007990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007998:	f000 f852 	bl	8007a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800799c:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <prvIdleTask+0x28>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d9f9      	bls.n	8007998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <prvIdleTask+0x2c>)
 80079a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079b4:	e7f0      	b.n	8007998 <prvIdleTask+0x8>
 80079b6:	bf00      	nop
 80079b8:	20000934 	.word	0x20000934
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c6:	2300      	movs	r3, #0
 80079c8:	607b      	str	r3, [r7, #4]
 80079ca:	e00c      	b.n	80079e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4a12      	ldr	r2, [pc, #72]	; (8007a20 <prvInitialiseTaskLists+0x60>)
 80079d8:	4413      	add	r3, r2
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fa8e 	bl	8005efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3301      	adds	r3, #1
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b37      	cmp	r3, #55	; 0x37
 80079ea:	d9ef      	bls.n	80079cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079ec:	480d      	ldr	r0, [pc, #52]	; (8007a24 <prvInitialiseTaskLists+0x64>)
 80079ee:	f7fe fa85 	bl	8005efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079f2:	480d      	ldr	r0, [pc, #52]	; (8007a28 <prvInitialiseTaskLists+0x68>)
 80079f4:	f7fe fa82 	bl	8005efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079f8:	480c      	ldr	r0, [pc, #48]	; (8007a2c <prvInitialiseTaskLists+0x6c>)
 80079fa:	f7fe fa7f 	bl	8005efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079fe:	480c      	ldr	r0, [pc, #48]	; (8007a30 <prvInitialiseTaskLists+0x70>)
 8007a00:	f7fe fa7c 	bl	8005efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a04:	480b      	ldr	r0, [pc, #44]	; (8007a34 <prvInitialiseTaskLists+0x74>)
 8007a06:	f7fe fa79 	bl	8005efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <prvInitialiseTaskLists+0x78>)
 8007a0c:	4a05      	ldr	r2, [pc, #20]	; (8007a24 <prvInitialiseTaskLists+0x64>)
 8007a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <prvInitialiseTaskLists+0x7c>)
 8007a12:	4a05      	ldr	r2, [pc, #20]	; (8007a28 <prvInitialiseTaskLists+0x68>)
 8007a14:	601a      	str	r2, [r3, #0]
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000934 	.word	0x20000934
 8007a24:	20000d94 	.word	0x20000d94
 8007a28:	20000da8 	.word	0x20000da8
 8007a2c:	20000dc4 	.word	0x20000dc4
 8007a30:	20000dd8 	.word	0x20000dd8
 8007a34:	20000df0 	.word	0x20000df0
 8007a38:	20000dbc 	.word	0x20000dbc
 8007a3c:	20000dc0 	.word	0x20000dc0

08007a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a46:	e019      	b.n	8007a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a48:	f000 fed4 	bl	80087f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <prvCheckTasksWaitingTermination+0x50>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fad9 	bl	8006010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <prvCheckTasksWaitingTermination+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	4a0b      	ldr	r2, [pc, #44]	; (8007a94 <prvCheckTasksWaitingTermination+0x54>)
 8007a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a72:	f000 feef 	bl	8008854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f810 	bl	8007a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e1      	bne.n	8007a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000dd8 	.word	0x20000dd8
 8007a94:	20000e04 	.word	0x20000e04
 8007a98:	20000dec 	.word	0x20000dec

08007a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d108      	bne.n	8007ac0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 f88c 	bl	8008bd0 <vPortFree>
				vPortFree( pxTCB );
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f889 	bl	8008bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007abe:	e018      	b.n	8007af2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d103      	bne.n	8007ad2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 f880 	bl	8008bd0 <vPortFree>
	}
 8007ad0:	e00f      	b.n	8007af2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d00a      	beq.n	8007af2 <prvDeleteTCB+0x56>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60fb      	str	r3, [r7, #12]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <prvDeleteTCB+0x54>
	}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b02:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <prvResetNextTaskUnblockTime+0x38>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d104      	bne.n	8007b16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <prvResetNextTaskUnblockTime+0x3c>)
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b14:	e008      	b.n	8007b28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <prvResetNextTaskUnblockTime+0x38>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4a04      	ldr	r2, [pc, #16]	; (8007b38 <prvResetNextTaskUnblockTime+0x3c>)
 8007b26:	6013      	str	r3, [r2, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20000dbc 	.word	0x20000dbc
 8007b38:	20000e24 	.word	0x20000e24

08007b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <xTaskGetSchedulerState+0x34>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	e008      	b.n	8007b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b50:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <xTaskGetSchedulerState+0x38>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	607b      	str	r3, [r7, #4]
 8007b5c:	e001      	b.n	8007b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b62:	687b      	ldr	r3, [r7, #4]
	}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20000e10 	.word	0x20000e10
 8007b74:	20000e2c 	.word	0x20000e2c

08007b78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d051      	beq.n	8007c32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b92:	4b2a      	ldr	r3, [pc, #168]	; (8007c3c <xTaskPriorityInherit+0xc4>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d241      	bcs.n	8007c20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	db06      	blt.n	8007bb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba4:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <xTaskPriorityInherit+0xc4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007baa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6959      	ldr	r1, [r3, #20]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4a1f      	ldr	r2, [pc, #124]	; (8007c40 <xTaskPriorityInherit+0xc8>)
 8007bc4:	4413      	add	r3, r2
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	d122      	bne.n	8007c10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fa1e 	bl	8006010 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bd4:	4b19      	ldr	r3, [pc, #100]	; (8007c3c <xTaskPriorityInherit+0xc4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be2:	4b18      	ldr	r3, [pc, #96]	; (8007c44 <xTaskPriorityInherit+0xcc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d903      	bls.n	8007bf2 <xTaskPriorityInherit+0x7a>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <xTaskPriorityInherit+0xcc>)
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4a10      	ldr	r2, [pc, #64]	; (8007c40 <xTaskPriorityInherit+0xc8>)
 8007c00:	441a      	add	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f7fe f9a4 	bl	8005f56 <vListInsertEnd>
 8007c0e:	e004      	b.n	8007c1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <xTaskPriorityInherit+0xc4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	e008      	b.n	8007c32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c24:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <xTaskPriorityInherit+0xc4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d201      	bcs.n	8007c32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c32:	68fb      	ldr	r3, [r7, #12]
	}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000930 	.word	0x20000930
 8007c40:	20000934 	.word	0x20000934
 8007c44:	20000e0c 	.word	0x20000e0c

08007c48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d056      	beq.n	8007d0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c5e:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <xTaskPriorityDisinherit+0xd0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d00a      	beq.n	8007c7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60fb      	str	r3, [r7, #12]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60bb      	str	r3, [r7, #8]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca0:	1e5a      	subs	r2, r3, #1
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d02c      	beq.n	8007d0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d128      	bne.n	8007d0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe f9a6 	bl	8006010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <xTaskPriorityDisinherit+0xd4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d903      	bls.n	8007cec <xTaskPriorityDisinherit+0xa4>
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <xTaskPriorityDisinherit+0xd4>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <xTaskPriorityDisinherit+0xd8>)
 8007cfa:	441a      	add	r2, r3
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f7fe f927 	bl	8005f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d0c:	697b      	ldr	r3, [r7, #20]
	}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000930 	.word	0x20000930
 8007d1c:	20000e0c 	.word	0x20000e0c
 8007d20:	20000934 	.word	0x20000934

08007d24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d06a      	beq.n	8007e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60fb      	str	r3, [r7, #12]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d902      	bls.n	8007d6a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	e002      	b.n	8007d70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d04b      	beq.n	8007e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d146      	bne.n	8007e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d84:	4b25      	ldr	r3, [pc, #148]	; (8007e1c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d10a      	bne.n	8007da4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	60bb      	str	r3, [r7, #8]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	db04      	blt.n	8007dc2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	6959      	ldr	r1, [r3, #20]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007dd2:	4413      	add	r3, r2
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d11c      	bne.n	8007e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe f917 	bl	8006010 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d903      	bls.n	8007df6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	4a0c      	ldr	r2, [pc, #48]	; (8007e24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4a07      	ldr	r2, [pc, #28]	; (8007e20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e04:	441a      	add	r2, r3
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7fe f8a2 	bl	8005f56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e12:	bf00      	nop
 8007e14:	3720      	adds	r7, #32
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000930 	.word	0x20000930
 8007e20:	20000934 	.word	0x20000934
 8007e24:	20000e0c 	.word	0x20000e0c

08007e28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e3a:	3201      	adds	r2, #1
 8007e3c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007e3e:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8007e40:	681b      	ldr	r3, [r3, #0]
	}
 8007e42:	4618      	mov	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	20000930 	.word	0x20000930

08007e50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e5a:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e60:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe f8d2 	bl	8006010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d10a      	bne.n	8007e8a <prvAddCurrentTaskToDelayedList+0x3a>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4819      	ldr	r0, [pc, #100]	; (8007ee8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e84:	f7fe f867 	bl	8005f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e88:	e026      	b.n	8007ed8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e92:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d209      	bcs.n	8007eb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7fe f875 	bl	8005f9e <vListInsert>
}
 8007eb4:	e010      	b.n	8007ed8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f7fe f86b 	bl	8005f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d202      	bcs.n	8007ed8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ed2:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000e08 	.word	0x20000e08
 8007ee4:	20000930 	.word	0x20000930
 8007ee8:	20000df0 	.word	0x20000df0
 8007eec:	20000dc0 	.word	0x20000dc0
 8007ef0:	20000dbc 	.word	0x20000dbc
 8007ef4:	20000e24 	.word	0x20000e24

08007ef8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f02:	f000 fb07 	bl	8008514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f06:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <xTimerCreateTimerTask+0x80>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d021      	beq.n	8007f52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f16:	1d3a      	adds	r2, r7, #4
 8007f18:	f107 0108 	add.w	r1, r7, #8
 8007f1c:	f107 030c 	add.w	r3, r7, #12
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fd ffd1 	bl	8005ec8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	9202      	str	r2, [sp, #8]
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	2302      	movs	r3, #2
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	460a      	mov	r2, r1
 8007f38:	4910      	ldr	r1, [pc, #64]	; (8007f7c <xTimerCreateTimerTask+0x84>)
 8007f3a:	4811      	ldr	r0, [pc, #68]	; (8007f80 <xTimerCreateTimerTask+0x88>)
 8007f3c:	f7fe ffe0 	bl	8006f00 <xTaskCreateStatic>
 8007f40:	4603      	mov	r3, r0
 8007f42:	4a10      	ldr	r2, [pc, #64]	; (8007f84 <xTimerCreateTimerTask+0x8c>)
 8007f44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f46:	4b0f      	ldr	r3, [pc, #60]	; (8007f84 <xTimerCreateTimerTask+0x8c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	613b      	str	r3, [r7, #16]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000e60 	.word	0x20000e60
 8007f7c:	0800b8ac 	.word	0x0800b8ac
 8007f80:	080080bd 	.word	0x080080bd
 8007f84:	20000e64 	.word	0x20000e64

08007f88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	623b      	str	r3, [r7, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <xTimerGenericCommand+0x98>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d02a      	beq.n	8008014 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	dc18      	bgt.n	8008002 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fd0:	f7ff fdb4 	bl	8007b3c <xTaskGetSchedulerState>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d109      	bne.n	8007fee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fda:	4b11      	ldr	r3, [pc, #68]	; (8008020 <xTimerGenericCommand+0x98>)
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	f107 0110 	add.w	r1, r7, #16
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe6:	f7fe fa31 	bl	800644c <xQueueGenericSend>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24
 8007fec:	e012      	b.n	8008014 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <xTimerGenericCommand+0x98>)
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f107 0110 	add.w	r1, r7, #16
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f7fe fa27 	bl	800644c <xQueueGenericSend>
 8007ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8008000:	e008      	b.n	8008014 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008002:	4b07      	ldr	r3, [pc, #28]	; (8008020 <xTimerGenericCommand+0x98>)
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	f107 0110 	add.w	r1, r7, #16
 800800a:	2300      	movs	r3, #0
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	f7fe fb1b 	bl	8006648 <xQueueGenericSendFromISR>
 8008012:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008016:	4618      	mov	r0, r3
 8008018:	3728      	adds	r7, #40	; 0x28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000e60 	.word	0x20000e60

08008024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af02      	add	r7, sp, #8
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800802e:	4b22      	ldr	r3, [pc, #136]	; (80080b8 <prvProcessExpiredTimer+0x94>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	3304      	adds	r3, #4
 800803c:	4618      	mov	r0, r3
 800803e:	f7fd ffe7 	bl	8006010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d022      	beq.n	8008096 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	18d1      	adds	r1, r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	6978      	ldr	r0, [r7, #20]
 800805e:	f000 f8d1 	bl	8008204 <prvInsertTimerInActiveList>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01f      	beq.n	80080a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008068:	2300      	movs	r3, #0
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	2100      	movs	r1, #0
 8008072:	6978      	ldr	r0, [r7, #20]
 8008074:	f7ff ff88 	bl	8007f88 <xTimerGenericCommand>
 8008078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d113      	bne.n	80080a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	60fb      	str	r3, [r7, #12]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	6978      	ldr	r0, [r7, #20]
 80080ae:	4798      	blx	r3
}
 80080b0:	bf00      	nop
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000e58 	.word	0x20000e58

080080bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080c4:	f107 0308 	add.w	r3, r7, #8
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f857 	bl	800817c <prvGetNextExpireTime>
 80080ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4619      	mov	r1, r3
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f803 	bl	80080e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080da:	f000 f8d5 	bl	8008288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080de:	e7f1      	b.n	80080c4 <prvTimerTask+0x8>

080080e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ea:	f7ff f945 	bl	8007378 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f866 	bl	80081c4 <prvSampleTimeNow>
 80080f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d130      	bne.n	8008162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <prvProcessTimerOrBlockTask+0x3c>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d806      	bhi.n	800811c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800810e:	f7ff f941 	bl	8007394 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ff85 	bl	8008024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800811a:	e024      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008122:	4b13      	ldr	r3, [pc, #76]	; (8008170 <prvProcessTimerOrBlockTask+0x90>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <prvProcessTimerOrBlockTask+0x50>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <prvProcessTimerOrBlockTask+0x52>
 8008130:	2300      	movs	r3, #0
 8008132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008134:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <prvProcessTimerOrBlockTask+0x94>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	f7fe fea9 	bl	8006e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008146:	f7ff f925 	bl	8007394 <xTaskResumeAll>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <prvProcessTimerOrBlockTask+0x98>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
}
 8008160:	e001      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008162:	f7ff f917 	bl	8007394 <xTaskResumeAll>
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000e5c 	.word	0x20000e5c
 8008174:	20000e60 	.word	0x20000e60
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008184:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <prvGetNextExpireTime+0x44>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <prvGetNextExpireTime+0x16>
 800818e:	2201      	movs	r2, #1
 8008190:	e000      	b.n	8008194 <prvGetNextExpireTime+0x18>
 8008192:	2200      	movs	r2, #0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <prvGetNextExpireTime+0x44>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e001      	b.n	80081b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000e58 	.word	0x20000e58

080081c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081cc:	f7ff f980 	bl	80074d0 <xTaskGetTickCount>
 80081d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081d2:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <prvSampleTimeNow+0x3c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d205      	bcs.n	80081e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081dc:	f000 f936 	bl	800844c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e002      	b.n	80081ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081ee:	4a04      	ldr	r2, [pc, #16]	; (8008200 <prvSampleTimeNow+0x3c>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000e68 	.word	0x20000e68

08008204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d812      	bhi.n	8008250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d302      	bcc.n	800823e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e01b      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800823e:	4b10      	ldr	r3, [pc, #64]	; (8008280 <prvInsertTimerInActiveList+0x7c>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fd fea8 	bl	8005f9e <vListInsert>
 800824e:	e012      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d206      	bcs.n	8008266 <prvInsertTimerInActiveList+0x62>
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e007      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008266:	4b07      	ldr	r3, [pc, #28]	; (8008284 <prvInsertTimerInActiveList+0x80>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fd fe94 	bl	8005f9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000e5c 	.word	0x20000e5c
 8008284:	20000e58 	.word	0x20000e58

08008288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	; 0x38
 800828c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800828e:	e0ca      	b.n	8008426 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da18      	bge.n	80082c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	3304      	adds	r3, #4
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	61fb      	str	r3, [r7, #28]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082be:	6850      	ldr	r0, [r2, #4]
 80082c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c2:	6892      	ldr	r2, [r2, #8]
 80082c4:	4611      	mov	r1, r2
 80082c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f2c0 80aa 	blt.w	8008424 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	3304      	adds	r3, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd fe95 	bl	8006010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082e6:	463b      	mov	r3, r7
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff ff6b 	bl	80081c4 <prvSampleTimeNow>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	f200 8097 	bhi.w	8008426 <prvProcessReceivedCommands+0x19e>
 80082f8:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <prvProcessReceivedCommands+0x78>)
 80082fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fe:	bf00      	nop
 8008300:	08008329 	.word	0x08008329
 8008304:	08008329 	.word	0x08008329
 8008308:	08008329 	.word	0x08008329
 800830c:	0800839d 	.word	0x0800839d
 8008310:	080083b1 	.word	0x080083b1
 8008314:	080083fb 	.word	0x080083fb
 8008318:	08008329 	.word	0x08008329
 800831c:	08008329 	.word	0x08008329
 8008320:	0800839d 	.word	0x0800839d
 8008324:	080083b1 	.word	0x080083b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	18d1      	adds	r1, r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008348:	f7ff ff5c 	bl	8008204 <prvInsertTimerInActiveList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d069      	beq.n	8008426 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d05e      	beq.n	8008426 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	441a      	add	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	2100      	movs	r1, #0
 8008378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837a:	f7ff fe05 	bl	8007f88 <xTimerGenericCommand>
 800837e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d14f      	bne.n	8008426 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61bb      	str	r3, [r7, #24]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083a2:	f023 0301 	bic.w	r3, r3, #1
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80083ae:	e03a      	b.n	8008426 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	617b      	str	r3, [r7, #20]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	18d1      	adds	r1, r2, r3
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f4:	f7ff ff06 	bl	8008204 <prvInsertTimerInActiveList>
					break;
 80083f8:	e015      	b.n	8008426 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800840a:	f000 fbe1 	bl	8008bd0 <vPortFree>
 800840e:	e00a      	b.n	8008426 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008422:	e000      	b.n	8008426 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008424:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008426:	4b08      	ldr	r3, [pc, #32]	; (8008448 <prvProcessReceivedCommands+0x1c0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	1d39      	adds	r1, r7, #4
 800842c:	2200      	movs	r2, #0
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe f9a6 	bl	8006780 <xQueueReceive>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	f47f af2a 	bne.w	8008290 <prvProcessReceivedCommands+0x8>
	}
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	3730      	adds	r7, #48	; 0x30
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000e60 	.word	0x20000e60

0800844c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008452:	e048      	b.n	80084e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008454:	4b2d      	ldr	r3, [pc, #180]	; (800850c <prvSwitchTimerLists+0xc0>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845e:	4b2b      	ldr	r3, [pc, #172]	; (800850c <prvSwitchTimerLists+0xc0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3304      	adds	r3, #4
 800846c:	4618      	mov	r0, r3
 800846e:	f7fd fdcf 	bl	8006010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02e      	beq.n	80084e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4413      	add	r3, r2
 8008490:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	429a      	cmp	r2, r3
 8008498:	d90e      	bls.n	80084b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084a6:	4b19      	ldr	r3, [pc, #100]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f7fd fd74 	bl	8005f9e <vListInsert>
 80084b6:	e016      	b.n	80084e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084b8:	2300      	movs	r3, #0
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2300      	movs	r3, #0
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	2100      	movs	r1, #0
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7ff fd60 	bl	8007f88 <xTimerGenericCommand>
 80084c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	603b      	str	r3, [r7, #0]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1b1      	bne.n	8008454 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084f0:	4b06      	ldr	r3, [pc, #24]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084f6:	4b06      	ldr	r3, [pc, #24]	; (8008510 <prvSwitchTimerLists+0xc4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a04      	ldr	r2, [pc, #16]	; (800850c <prvSwitchTimerLists+0xc0>)
 80084fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084fe:	4a04      	ldr	r2, [pc, #16]	; (8008510 <prvSwitchTimerLists+0xc4>)
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000e58 	.word	0x20000e58
 8008510:	20000e5c 	.word	0x20000e5c

08008514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800851a:	f000 f96b 	bl	80087f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800851e:	4b15      	ldr	r3, [pc, #84]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d120      	bne.n	8008568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008526:	4814      	ldr	r0, [pc, #80]	; (8008578 <prvCheckForValidListAndQueue+0x64>)
 8008528:	f7fd fce8 	bl	8005efc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800852c:	4813      	ldr	r0, [pc, #76]	; (800857c <prvCheckForValidListAndQueue+0x68>)
 800852e:	f7fd fce5 	bl	8005efc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008532:	4b13      	ldr	r3, [pc, #76]	; (8008580 <prvCheckForValidListAndQueue+0x6c>)
 8008534:	4a10      	ldr	r2, [pc, #64]	; (8008578 <prvCheckForValidListAndQueue+0x64>)
 8008536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008538:	4b12      	ldr	r3, [pc, #72]	; (8008584 <prvCheckForValidListAndQueue+0x70>)
 800853a:	4a10      	ldr	r2, [pc, #64]	; (800857c <prvCheckForValidListAndQueue+0x68>)
 800853c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800853e:	2300      	movs	r3, #0
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	4b11      	ldr	r3, [pc, #68]	; (8008588 <prvCheckForValidListAndQueue+0x74>)
 8008544:	4a11      	ldr	r2, [pc, #68]	; (800858c <prvCheckForValidListAndQueue+0x78>)
 8008546:	2110      	movs	r1, #16
 8008548:	200a      	movs	r0, #10
 800854a:	f7fd fdf3 	bl	8006134 <xQueueGenericCreateStatic>
 800854e:	4603      	mov	r3, r0
 8008550:	4a08      	ldr	r2, [pc, #32]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 8008552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008554:	4b07      	ldr	r3, [pc, #28]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800855c:	4b05      	ldr	r3, [pc, #20]	; (8008574 <prvCheckForValidListAndQueue+0x60>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	490b      	ldr	r1, [pc, #44]	; (8008590 <prvCheckForValidListAndQueue+0x7c>)
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fc44 	bl	8006df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008568:	f000 f974 	bl	8008854 <vPortExitCritical>
}
 800856c:	bf00      	nop
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000e60 	.word	0x20000e60
 8008578:	20000e30 	.word	0x20000e30
 800857c:	20000e44 	.word	0x20000e44
 8008580:	20000e58 	.word	0x20000e58
 8008584:	20000e5c 	.word	0x20000e5c
 8008588:	20000f0c 	.word	0x20000f0c
 800858c:	20000e6c 	.word	0x20000e6c
 8008590:	0800b8b4 	.word	0x0800b8b4

08008594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3b04      	subs	r3, #4
 80085a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3b04      	subs	r3, #4
 80085b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f023 0201 	bic.w	r2, r3, #1
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3b04      	subs	r3, #4
 80085c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085c4:	4a0c      	ldr	r2, [pc, #48]	; (80085f8 <pxPortInitialiseStack+0x64>)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3b14      	subs	r3, #20
 80085ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3b04      	subs	r3, #4
 80085da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f06f 0202 	mvn.w	r2, #2
 80085e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3b20      	subs	r3, #32
 80085e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	080085fd 	.word	0x080085fd

080085fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008606:	4b12      	ldr	r3, [pc, #72]	; (8008650 <prvTaskExitError+0x54>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860e:	d00a      	beq.n	8008626 <prvTaskExitError+0x2a>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	60fb      	str	r3, [r7, #12]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <prvTaskExitError+0x28>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60bb      	str	r3, [r7, #8]
}
 8008638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800863a:	bf00      	nop
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0fc      	beq.n	800863c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	2000001c 	.word	0x2000001c
	...

08008660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <pxCurrentTCBConst2>)
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	6808      	ldr	r0, [r1, #0]
 8008666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866a:	f380 8809 	msr	PSP, r0
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8811 	msr	BASEPRI, r0
 800867a:	4770      	bx	lr
 800867c:	f3af 8000 	nop.w

08008680 <pxCurrentTCBConst2>:
 8008680:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop

08008688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008688:	4808      	ldr	r0, [pc, #32]	; (80086ac <prvPortStartFirstTask+0x24>)
 800868a:	6800      	ldr	r0, [r0, #0]
 800868c:	6800      	ldr	r0, [r0, #0]
 800868e:	f380 8808 	msr	MSP, r0
 8008692:	f04f 0000 	mov.w	r0, #0
 8008696:	f380 8814 	msr	CONTROL, r0
 800869a:	b662      	cpsie	i
 800869c:	b661      	cpsie	f
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	df00      	svc	0
 80086a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086aa:	bf00      	nop
 80086ac:	e000ed08 	.word	0xe000ed08

080086b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086b6:	4b46      	ldr	r3, [pc, #280]	; (80087d0 <xPortStartScheduler+0x120>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a46      	ldr	r2, [pc, #280]	; (80087d4 <xPortStartScheduler+0x124>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10a      	bne.n	80086d6 <xPortStartScheduler+0x26>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	613b      	str	r3, [r7, #16]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086d6:	4b3e      	ldr	r3, [pc, #248]	; (80087d0 <xPortStartScheduler+0x120>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a3f      	ldr	r2, [pc, #252]	; (80087d8 <xPortStartScheduler+0x128>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d10a      	bne.n	80086f6 <xPortStartScheduler+0x46>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	60fb      	str	r3, [r7, #12]
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086f6:	4b39      	ldr	r3, [pc, #228]	; (80087dc <xPortStartScheduler+0x12c>)
 80086f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008718:	b2da      	uxtb	r2, r3
 800871a:	4b31      	ldr	r3, [pc, #196]	; (80087e0 <xPortStartScheduler+0x130>)
 800871c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800871e:	4b31      	ldr	r3, [pc, #196]	; (80087e4 <xPortStartScheduler+0x134>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008724:	e009      	b.n	800873a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008726:	4b2f      	ldr	r3, [pc, #188]	; (80087e4 <xPortStartScheduler+0x134>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3b01      	subs	r3, #1
 800872c:	4a2d      	ldr	r2, [pc, #180]	; (80087e4 <xPortStartScheduler+0x134>)
 800872e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	b2db      	uxtb	r3, r3
 8008738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d0ef      	beq.n	8008726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008746:	4b27      	ldr	r3, [pc, #156]	; (80087e4 <xPortStartScheduler+0x134>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f1c3 0307 	rsb	r3, r3, #7
 800874e:	2b04      	cmp	r3, #4
 8008750:	d00a      	beq.n	8008768 <xPortStartScheduler+0xb8>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	60bb      	str	r3, [r7, #8]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008768:	4b1e      	ldr	r3, [pc, #120]	; (80087e4 <xPortStartScheduler+0x134>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	4a1d      	ldr	r2, [pc, #116]	; (80087e4 <xPortStartScheduler+0x134>)
 8008770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008772:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <xPortStartScheduler+0x134>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800877a:	4a1a      	ldr	r2, [pc, #104]	; (80087e4 <xPortStartScheduler+0x134>)
 800877c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008786:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <xPortStartScheduler+0x138>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a17      	ldr	r2, [pc, #92]	; (80087e8 <xPortStartScheduler+0x138>)
 800878c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <xPortStartScheduler+0x138>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a14      	ldr	r2, [pc, #80]	; (80087e8 <xPortStartScheduler+0x138>)
 8008798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800879c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800879e:	f000 f8dd 	bl	800895c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087a2:	4b12      	ldr	r3, [pc, #72]	; (80087ec <xPortStartScheduler+0x13c>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087a8:	f000 f8fc 	bl	80089a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <xPortStartScheduler+0x140>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0f      	ldr	r2, [pc, #60]	; (80087f0 <xPortStartScheduler+0x140>)
 80087b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087b8:	f7ff ff66 	bl	8008688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087bc:	f7fe ff52 	bl	8007664 <vTaskSwitchContext>
	prvTaskExitError();
 80087c0:	f7ff ff1c 	bl	80085fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	e000ed00 	.word	0xe000ed00
 80087d4:	410fc271 	.word	0x410fc271
 80087d8:	410fc270 	.word	0x410fc270
 80087dc:	e000e400 	.word	0xe000e400
 80087e0:	20000f5c 	.word	0x20000f5c
 80087e4:	20000f60 	.word	0x20000f60
 80087e8:	e000ed20 	.word	0xe000ed20
 80087ec:	2000001c 	.word	0x2000001c
 80087f0:	e000ef34 	.word	0xe000ef34

080087f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	607b      	str	r3, [r7, #4]
}
 800880c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800880e:	4b0f      	ldr	r3, [pc, #60]	; (800884c <vPortEnterCritical+0x58>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3301      	adds	r3, #1
 8008814:	4a0d      	ldr	r2, [pc, #52]	; (800884c <vPortEnterCritical+0x58>)
 8008816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <vPortEnterCritical+0x58>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d10f      	bne.n	8008840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <vPortEnterCritical+0x5c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <vPortEnterCritical+0x4c>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	603b      	str	r3, [r7, #0]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <vPortEnterCritical+0x4a>
	}
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2000001c 	.word	0x2000001c
 8008850:	e000ed04 	.word	0xe000ed04

08008854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <vPortExitCritical+0x50>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <vPortExitCritical+0x24>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	607b      	str	r3, [r7, #4]
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008878:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <vPortExitCritical+0x50>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3b01      	subs	r3, #1
 800887e:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <vPortExitCritical+0x50>)
 8008880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008882:	4b08      	ldr	r3, [pc, #32]	; (80088a4 <vPortExitCritical+0x50>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <vPortExitCritical+0x42>
 800888a:	2300      	movs	r3, #0
 800888c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f383 8811 	msr	BASEPRI, r3
}
 8008894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	2000001c 	.word	0x2000001c
	...

080088b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088b0:	f3ef 8009 	mrs	r0, PSP
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4b15      	ldr	r3, [pc, #84]	; (8008910 <pxCurrentTCBConst>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	f01e 0f10 	tst.w	lr, #16
 80088c0:	bf08      	it	eq
 80088c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	6010      	str	r0, [r2, #0]
 80088cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088d4:	f380 8811 	msr	BASEPRI, r0
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f7fe fec0 	bl	8007664 <vTaskSwitchContext>
 80088e4:	f04f 0000 	mov.w	r0, #0
 80088e8:	f380 8811 	msr	BASEPRI, r0
 80088ec:	bc09      	pop	{r0, r3}
 80088ee:	6819      	ldr	r1, [r3, #0]
 80088f0:	6808      	ldr	r0, [r1, #0]
 80088f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f6:	f01e 0f10 	tst.w	lr, #16
 80088fa:	bf08      	it	eq
 80088fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008900:	f380 8809 	msr	PSP, r0
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	f3af 8000 	nop.w

08008910 <pxCurrentTCBConst>:
 8008910:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008932:	f7fe fddd 	bl	80074f0 <xTaskIncrementTick>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <xPortSysTickHandler+0x40>)
 800893e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	f383 8811 	msr	BASEPRI, r3
}
 800894e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008960:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <vPortSetupTimerInterrupt+0x34>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008966:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <vPortSetupTimerInterrupt+0x38>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <vPortSetupTimerInterrupt+0x3c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a0a      	ldr	r2, [pc, #40]	; (800899c <vPortSetupTimerInterrupt+0x40>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	099b      	lsrs	r3, r3, #6
 8008978:	4a09      	ldr	r2, [pc, #36]	; (80089a0 <vPortSetupTimerInterrupt+0x44>)
 800897a:	3b01      	subs	r3, #1
 800897c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800897e:	4b04      	ldr	r3, [pc, #16]	; (8008990 <vPortSetupTimerInterrupt+0x34>)
 8008980:	2207      	movs	r2, #7
 8008982:	601a      	str	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	e000e010 	.word	0xe000e010
 8008994:	e000e018 	.word	0xe000e018
 8008998:	20000010 	.word	0x20000010
 800899c:	10624dd3 	.word	0x10624dd3
 80089a0:	e000e014 	.word	0xe000e014

080089a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089b4 <vPortEnableVFP+0x10>
 80089a8:	6801      	ldr	r1, [r0, #0]
 80089aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089ae:	6001      	str	r1, [r0, #0]
 80089b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089b2:	bf00      	nop
 80089b4:	e000ed88 	.word	0xe000ed88

080089b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089be:	f3ef 8305 	mrs	r3, IPSR
 80089c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	d914      	bls.n	80089f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <vPortValidateInterruptPriority+0x70>)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089d4:	4b15      	ldr	r3, [pc, #84]	; (8008a2c <vPortValidateInterruptPriority+0x74>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	7afa      	ldrb	r2, [r7, #11]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d20a      	bcs.n	80089f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	607b      	str	r3, [r7, #4]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089f4:	4b0e      	ldr	r3, [pc, #56]	; (8008a30 <vPortValidateInterruptPriority+0x78>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <vPortValidateInterruptPriority+0x7c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d90a      	bls.n	8008a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	603b      	str	r3, [r7, #0]
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <vPortValidateInterruptPriority+0x60>
	}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	e000e3f0 	.word	0xe000e3f0
 8008a2c:	20000f5c 	.word	0x20000f5c
 8008a30:	e000ed0c 	.word	0xe000ed0c
 8008a34:	20000f60 	.word	0x20000f60

08008a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	; 0x28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a44:	f7fe fc98 	bl	8007378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a48:	4b5b      	ldr	r3, [pc, #364]	; (8008bb8 <pvPortMalloc+0x180>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a50:	f000 f920 	bl	8008c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a54:	4b59      	ldr	r3, [pc, #356]	; (8008bbc <pvPortMalloc+0x184>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f040 8093 	bne.w	8008b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01d      	beq.n	8008aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a68:	2208      	movs	r2, #8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d014      	beq.n	8008aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f023 0307 	bic.w	r3, r3, #7
 8008a80:	3308      	adds	r3, #8
 8008a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	617b      	str	r3, [r7, #20]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d06e      	beq.n	8008b88 <pvPortMalloc+0x150>
 8008aaa:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <pvPortMalloc+0x188>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d869      	bhi.n	8008b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ab4:	4b43      	ldr	r3, [pc, #268]	; (8008bc4 <pvPortMalloc+0x18c>)
 8008ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ab8:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <pvPortMalloc+0x18c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008abe:	e004      	b.n	8008aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d903      	bls.n	8008adc <pvPortMalloc+0xa4>
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1f1      	bne.n	8008ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008adc:	4b36      	ldr	r3, [pc, #216]	; (8008bb8 <pvPortMalloc+0x180>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d050      	beq.n	8008b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2208      	movs	r2, #8
 8008aec:	4413      	add	r3, r2
 8008aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	2308      	movs	r3, #8
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d91f      	bls.n	8008b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <pvPortMalloc+0xf8>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	613b      	str	r3, [r7, #16]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b42:	69b8      	ldr	r0, [r7, #24]
 8008b44:	f000 f908 	bl	8008d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b56:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <pvPortMalloc+0x190>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d203      	bcs.n	8008b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b62:	4b17      	ldr	r3, [pc, #92]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a18      	ldr	r2, [pc, #96]	; (8008bc8 <pvPortMalloc+0x190>)
 8008b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <pvPortMalloc+0x184>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <pvPortMalloc+0x194>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <pvPortMalloc+0x194>)
 8008b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b88:	f7fe fc04 	bl	8007394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <pvPortMalloc+0x174>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	60fb      	str	r3, [r7, #12]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <pvPortMalloc+0x172>
	return pvReturn;
 8008bac:	69fb      	ldr	r3, [r7, #28]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20004b6c 	.word	0x20004b6c
 8008bbc:	20004b80 	.word	0x20004b80
 8008bc0:	20004b70 	.word	0x20004b70
 8008bc4:	20004b64 	.word	0x20004b64
 8008bc8:	20004b74 	.word	0x20004b74
 8008bcc:	20004b78 	.word	0x20004b78

08008bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d04d      	beq.n	8008c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008be2:	2308      	movs	r3, #8
 8008be4:	425b      	negs	r3, r3
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4413      	add	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <vPortFree+0xb8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <vPortFree+0x44>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60fb      	str	r3, [r7, #12]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <vPortFree+0x62>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60bb      	str	r3, [r7, #8]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <vPortFree+0xb8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01e      	beq.n	8008c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11a      	bne.n	8008c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	; (8008c88 <vPortFree+0xb8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	43db      	mvns	r3, r3
 8008c52:	401a      	ands	r2, r3
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c58:	f7fe fb8e 	bl	8007378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <vPortFree+0xbc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4413      	add	r3, r2
 8008c66:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <vPortFree+0xbc>)
 8008c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c6a:	6938      	ldr	r0, [r7, #16]
 8008c6c:	f000 f874 	bl	8008d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <vPortFree+0xc0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a06      	ldr	r2, [pc, #24]	; (8008c90 <vPortFree+0xc0>)
 8008c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c7a:	f7fe fb8b 	bl	8007394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c7e:	bf00      	nop
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20004b80 	.word	0x20004b80
 8008c8c:	20004b70 	.word	0x20004b70
 8008c90:	20004b7c 	.word	0x20004b7c

08008c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <prvHeapInit+0xac>)
 8008ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3307      	adds	r3, #7
 8008cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	4a1f      	ldr	r2, [pc, #124]	; (8008d40 <prvHeapInit+0xac>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ccc:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <prvHeapInit+0xb0>)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <prvHeapInit+0xb0>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ce0:	2208      	movs	r2, #8
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cf6:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <prvHeapInit+0xb4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d14:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <prvHeapInit+0xb4>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <prvHeapInit+0xb8>)
 8008d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <prvHeapInit+0xbc>)
 8008d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <prvHeapInit+0xc0>)
 8008d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	20000f64 	.word	0x20000f64
 8008d44:	20004b64 	.word	0x20004b64
 8008d48:	20004b6c 	.word	0x20004b6c
 8008d4c:	20004b74 	.word	0x20004b74
 8008d50:	20004b70 	.word	0x20004b70
 8008d54:	20004b80 	.word	0x20004b80

08008d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <prvInsertBlockIntoFreeList+0xac>)
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e002      	b.n	8008d6c <prvInsertBlockIntoFreeList+0x14>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d8f7      	bhi.n	8008d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d108      	bne.n	8008d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	441a      	add	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d118      	bne.n	8008de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d00d      	beq.n	8008dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e008      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e003      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d002      	beq.n	8008df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20004b64 	.word	0x20004b64
 8008e08:	20004b6c 	.word	0x20004b6c

08008e0c <__errno>:
 8008e0c:	4b01      	ldr	r3, [pc, #4]	; (8008e14 <__errno+0x8>)
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000020 	.word	0x20000020

08008e18 <__libc_init_array>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	4d0d      	ldr	r5, [pc, #52]	; (8008e50 <__libc_init_array+0x38>)
 8008e1c:	4c0d      	ldr	r4, [pc, #52]	; (8008e54 <__libc_init_array+0x3c>)
 8008e1e:	1b64      	subs	r4, r4, r5
 8008e20:	10a4      	asrs	r4, r4, #2
 8008e22:	2600      	movs	r6, #0
 8008e24:	42a6      	cmp	r6, r4
 8008e26:	d109      	bne.n	8008e3c <__libc_init_array+0x24>
 8008e28:	4d0b      	ldr	r5, [pc, #44]	; (8008e58 <__libc_init_array+0x40>)
 8008e2a:	4c0c      	ldr	r4, [pc, #48]	; (8008e5c <__libc_init_array+0x44>)
 8008e2c:	f002 fcf0 	bl	800b810 <_init>
 8008e30:	1b64      	subs	r4, r4, r5
 8008e32:	10a4      	asrs	r4, r4, #2
 8008e34:	2600      	movs	r6, #0
 8008e36:	42a6      	cmp	r6, r4
 8008e38:	d105      	bne.n	8008e46 <__libc_init_array+0x2e>
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e40:	4798      	blx	r3
 8008e42:	3601      	adds	r6, #1
 8008e44:	e7ee      	b.n	8008e24 <__libc_init_array+0xc>
 8008e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4a:	4798      	blx	r3
 8008e4c:	3601      	adds	r6, #1
 8008e4e:	e7f2      	b.n	8008e36 <__libc_init_array+0x1e>
 8008e50:	0800bd9c 	.word	0x0800bd9c
 8008e54:	0800bd9c 	.word	0x0800bd9c
 8008e58:	0800bd9c 	.word	0x0800bd9c
 8008e5c:	0800bda0 	.word	0x0800bda0

08008e60 <memcpy>:
 8008e60:	440a      	add	r2, r1
 8008e62:	4291      	cmp	r1, r2
 8008e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e68:	d100      	bne.n	8008e6c <memcpy+0xc>
 8008e6a:	4770      	bx	lr
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e76:	4291      	cmp	r1, r2
 8008e78:	d1f9      	bne.n	8008e6e <memcpy+0xe>
 8008e7a:	bd10      	pop	{r4, pc}

08008e7c <memset>:
 8008e7c:	4402      	add	r2, r0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d100      	bne.n	8008e86 <memset+0xa>
 8008e84:	4770      	bx	lr
 8008e86:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8a:	e7f9      	b.n	8008e80 <memset+0x4>

08008e8c <__cvt>:
 8008e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	ec55 4b10 	vmov	r4, r5, d0
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	460e      	mov	r6, r1
 8008e98:	4619      	mov	r1, r3
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	bfbb      	ittet	lt
 8008e9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ea2:	461d      	movlt	r5, r3
 8008ea4:	2300      	movge	r3, #0
 8008ea6:	232d      	movlt	r3, #45	; 0x2d
 8008ea8:	700b      	strb	r3, [r1, #0]
 8008eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008eb0:	4691      	mov	r9, r2
 8008eb2:	f023 0820 	bic.w	r8, r3, #32
 8008eb6:	bfbc      	itt	lt
 8008eb8:	4622      	movlt	r2, r4
 8008eba:	4614      	movlt	r4, r2
 8008ebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ec0:	d005      	beq.n	8008ece <__cvt+0x42>
 8008ec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ec6:	d100      	bne.n	8008eca <__cvt+0x3e>
 8008ec8:	3601      	adds	r6, #1
 8008eca:	2102      	movs	r1, #2
 8008ecc:	e000      	b.n	8008ed0 <__cvt+0x44>
 8008ece:	2103      	movs	r1, #3
 8008ed0:	ab03      	add	r3, sp, #12
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	ab02      	add	r3, sp, #8
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	ec45 4b10 	vmov	d0, r4, r5
 8008edc:	4653      	mov	r3, sl
 8008ede:	4632      	mov	r2, r6
 8008ee0:	f000 fcca 	bl	8009878 <_dtoa_r>
 8008ee4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ee8:	4607      	mov	r7, r0
 8008eea:	d102      	bne.n	8008ef2 <__cvt+0x66>
 8008eec:	f019 0f01 	tst.w	r9, #1
 8008ef0:	d022      	beq.n	8008f38 <__cvt+0xac>
 8008ef2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ef6:	eb07 0906 	add.w	r9, r7, r6
 8008efa:	d110      	bne.n	8008f1e <__cvt+0x92>
 8008efc:	783b      	ldrb	r3, [r7, #0]
 8008efe:	2b30      	cmp	r3, #48	; 0x30
 8008f00:	d10a      	bne.n	8008f18 <__cvt+0x8c>
 8008f02:	2200      	movs	r2, #0
 8008f04:	2300      	movs	r3, #0
 8008f06:	4620      	mov	r0, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	f7f7 fde5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f0e:	b918      	cbnz	r0, 8008f18 <__cvt+0x8c>
 8008f10:	f1c6 0601 	rsb	r6, r6, #1
 8008f14:	f8ca 6000 	str.w	r6, [sl]
 8008f18:	f8da 3000 	ldr.w	r3, [sl]
 8008f1c:	4499      	add	r9, r3
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2300      	movs	r3, #0
 8008f22:	4620      	mov	r0, r4
 8008f24:	4629      	mov	r1, r5
 8008f26:	f7f7 fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f2a:	b108      	cbz	r0, 8008f30 <__cvt+0xa4>
 8008f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f30:	2230      	movs	r2, #48	; 0x30
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	454b      	cmp	r3, r9
 8008f36:	d307      	bcc.n	8008f48 <__cvt+0xbc>
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f3c:	1bdb      	subs	r3, r3, r7
 8008f3e:	4638      	mov	r0, r7
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	b004      	add	sp, #16
 8008f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f48:	1c59      	adds	r1, r3, #1
 8008f4a:	9103      	str	r1, [sp, #12]
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	e7f0      	b.n	8008f32 <__cvt+0xa6>

08008f50 <__exponent>:
 8008f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f52:	4603      	mov	r3, r0
 8008f54:	2900      	cmp	r1, #0
 8008f56:	bfb8      	it	lt
 8008f58:	4249      	neglt	r1, r1
 8008f5a:	f803 2b02 	strb.w	r2, [r3], #2
 8008f5e:	bfb4      	ite	lt
 8008f60:	222d      	movlt	r2, #45	; 0x2d
 8008f62:	222b      	movge	r2, #43	; 0x2b
 8008f64:	2909      	cmp	r1, #9
 8008f66:	7042      	strb	r2, [r0, #1]
 8008f68:	dd2a      	ble.n	8008fc0 <__exponent+0x70>
 8008f6a:	f10d 0407 	add.w	r4, sp, #7
 8008f6e:	46a4      	mov	ip, r4
 8008f70:	270a      	movs	r7, #10
 8008f72:	46a6      	mov	lr, r4
 8008f74:	460a      	mov	r2, r1
 8008f76:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f7a:	fb07 1516 	mls	r5, r7, r6, r1
 8008f7e:	3530      	adds	r5, #48	; 0x30
 8008f80:	2a63      	cmp	r2, #99	; 0x63
 8008f82:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	dcf1      	bgt.n	8008f72 <__exponent+0x22>
 8008f8e:	3130      	adds	r1, #48	; 0x30
 8008f90:	f1ae 0502 	sub.w	r5, lr, #2
 8008f94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f98:	1c44      	adds	r4, r0, #1
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	4561      	cmp	r1, ip
 8008f9e:	d30a      	bcc.n	8008fb6 <__exponent+0x66>
 8008fa0:	f10d 0209 	add.w	r2, sp, #9
 8008fa4:	eba2 020e 	sub.w	r2, r2, lr
 8008fa8:	4565      	cmp	r5, ip
 8008faa:	bf88      	it	hi
 8008fac:	2200      	movhi	r2, #0
 8008fae:	4413      	add	r3, r2
 8008fb0:	1a18      	subs	r0, r3, r0
 8008fb2:	b003      	add	sp, #12
 8008fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fbe:	e7ed      	b.n	8008f9c <__exponent+0x4c>
 8008fc0:	2330      	movs	r3, #48	; 0x30
 8008fc2:	3130      	adds	r1, #48	; 0x30
 8008fc4:	7083      	strb	r3, [r0, #2]
 8008fc6:	70c1      	strb	r1, [r0, #3]
 8008fc8:	1d03      	adds	r3, r0, #4
 8008fca:	e7f1      	b.n	8008fb0 <__exponent+0x60>

08008fcc <_printf_float>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	ed2d 8b02 	vpush	{d8}
 8008fd4:	b08d      	sub	sp, #52	; 0x34
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fdc:	4616      	mov	r6, r2
 8008fde:	461f      	mov	r7, r3
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	f001 fa35 	bl	800a450 <_localeconv_r>
 8008fe6:	f8d0 a000 	ldr.w	sl, [r0]
 8008fea:	4650      	mov	r0, sl
 8008fec:	f7f7 f8f8 	bl	80001e0 <strlen>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ffc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009000:	3307      	adds	r3, #7
 8009002:	f023 0307 	bic.w	r3, r3, #7
 8009006:	f103 0208 	add.w	r2, r3, #8
 800900a:	f8c8 2000 	str.w	r2, [r8]
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009016:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800901a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800901e:	9307      	str	r3, [sp, #28]
 8009020:	f8cd 8018 	str.w	r8, [sp, #24]
 8009024:	ee08 0a10 	vmov	s16, r0
 8009028:	4b9f      	ldr	r3, [pc, #636]	; (80092a8 <_printf_float+0x2dc>)
 800902a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800902e:	f04f 32ff 	mov.w	r2, #4294967295
 8009032:	f7f7 fd83 	bl	8000b3c <__aeabi_dcmpun>
 8009036:	bb88      	cbnz	r0, 800909c <_printf_float+0xd0>
 8009038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800903c:	4b9a      	ldr	r3, [pc, #616]	; (80092a8 <_printf_float+0x2dc>)
 800903e:	f04f 32ff 	mov.w	r2, #4294967295
 8009042:	f7f7 fd5d 	bl	8000b00 <__aeabi_dcmple>
 8009046:	bb48      	cbnz	r0, 800909c <_printf_float+0xd0>
 8009048:	2200      	movs	r2, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4640      	mov	r0, r8
 800904e:	4649      	mov	r1, r9
 8009050:	f7f7 fd4c 	bl	8000aec <__aeabi_dcmplt>
 8009054:	b110      	cbz	r0, 800905c <_printf_float+0x90>
 8009056:	232d      	movs	r3, #45	; 0x2d
 8009058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800905c:	4b93      	ldr	r3, [pc, #588]	; (80092ac <_printf_float+0x2e0>)
 800905e:	4894      	ldr	r0, [pc, #592]	; (80092b0 <_printf_float+0x2e4>)
 8009060:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009064:	bf94      	ite	ls
 8009066:	4698      	movls	r8, r3
 8009068:	4680      	movhi	r8, r0
 800906a:	2303      	movs	r3, #3
 800906c:	6123      	str	r3, [r4, #16]
 800906e:	9b05      	ldr	r3, [sp, #20]
 8009070:	f023 0204 	bic.w	r2, r3, #4
 8009074:	6022      	str	r2, [r4, #0]
 8009076:	f04f 0900 	mov.w	r9, #0
 800907a:	9700      	str	r7, [sp, #0]
 800907c:	4633      	mov	r3, r6
 800907e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009080:	4621      	mov	r1, r4
 8009082:	4628      	mov	r0, r5
 8009084:	f000 f9d8 	bl	8009438 <_printf_common>
 8009088:	3001      	adds	r0, #1
 800908a:	f040 8090 	bne.w	80091ae <_printf_float+0x1e2>
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	b00d      	add	sp, #52	; 0x34
 8009094:	ecbd 8b02 	vpop	{d8}
 8009098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	f7f7 fd4a 	bl	8000b3c <__aeabi_dcmpun>
 80090a8:	b140      	cbz	r0, 80090bc <_printf_float+0xf0>
 80090aa:	464b      	mov	r3, r9
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfbc      	itt	lt
 80090b0:	232d      	movlt	r3, #45	; 0x2d
 80090b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090b6:	487f      	ldr	r0, [pc, #508]	; (80092b4 <_printf_float+0x2e8>)
 80090b8:	4b7f      	ldr	r3, [pc, #508]	; (80092b8 <_printf_float+0x2ec>)
 80090ba:	e7d1      	b.n	8009060 <_printf_float+0x94>
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090c2:	9206      	str	r2, [sp, #24]
 80090c4:	1c5a      	adds	r2, r3, #1
 80090c6:	d13f      	bne.n	8009148 <_printf_float+0x17c>
 80090c8:	2306      	movs	r3, #6
 80090ca:	6063      	str	r3, [r4, #4]
 80090cc:	9b05      	ldr	r3, [sp, #20]
 80090ce:	6861      	ldr	r1, [r4, #4]
 80090d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090d4:	2300      	movs	r3, #0
 80090d6:	9303      	str	r3, [sp, #12]
 80090d8:	ab0a      	add	r3, sp, #40	; 0x28
 80090da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090de:	ab09      	add	r3, sp, #36	; 0x24
 80090e0:	ec49 8b10 	vmov	d0, r8, r9
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	6022      	str	r2, [r4, #0]
 80090e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090ec:	4628      	mov	r0, r5
 80090ee:	f7ff fecd 	bl	8008e8c <__cvt>
 80090f2:	9b06      	ldr	r3, [sp, #24]
 80090f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090f6:	2b47      	cmp	r3, #71	; 0x47
 80090f8:	4680      	mov	r8, r0
 80090fa:	d108      	bne.n	800910e <_printf_float+0x142>
 80090fc:	1cc8      	adds	r0, r1, #3
 80090fe:	db02      	blt.n	8009106 <_printf_float+0x13a>
 8009100:	6863      	ldr	r3, [r4, #4]
 8009102:	4299      	cmp	r1, r3
 8009104:	dd41      	ble.n	800918a <_printf_float+0x1be>
 8009106:	f1ab 0b02 	sub.w	fp, fp, #2
 800910a:	fa5f fb8b 	uxtb.w	fp, fp
 800910e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009112:	d820      	bhi.n	8009156 <_printf_float+0x18a>
 8009114:	3901      	subs	r1, #1
 8009116:	465a      	mov	r2, fp
 8009118:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800911c:	9109      	str	r1, [sp, #36]	; 0x24
 800911e:	f7ff ff17 	bl	8008f50 <__exponent>
 8009122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009124:	1813      	adds	r3, r2, r0
 8009126:	2a01      	cmp	r2, #1
 8009128:	4681      	mov	r9, r0
 800912a:	6123      	str	r3, [r4, #16]
 800912c:	dc02      	bgt.n	8009134 <_printf_float+0x168>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	07d2      	lsls	r2, r2, #31
 8009132:	d501      	bpl.n	8009138 <_printf_float+0x16c>
 8009134:	3301      	adds	r3, #1
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800913c:	2b00      	cmp	r3, #0
 800913e:	d09c      	beq.n	800907a <_printf_float+0xae>
 8009140:	232d      	movs	r3, #45	; 0x2d
 8009142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009146:	e798      	b.n	800907a <_printf_float+0xae>
 8009148:	9a06      	ldr	r2, [sp, #24]
 800914a:	2a47      	cmp	r2, #71	; 0x47
 800914c:	d1be      	bne.n	80090cc <_printf_float+0x100>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1bc      	bne.n	80090cc <_printf_float+0x100>
 8009152:	2301      	movs	r3, #1
 8009154:	e7b9      	b.n	80090ca <_printf_float+0xfe>
 8009156:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800915a:	d118      	bne.n	800918e <_printf_float+0x1c2>
 800915c:	2900      	cmp	r1, #0
 800915e:	6863      	ldr	r3, [r4, #4]
 8009160:	dd0b      	ble.n	800917a <_printf_float+0x1ae>
 8009162:	6121      	str	r1, [r4, #16]
 8009164:	b913      	cbnz	r3, 800916c <_printf_float+0x1a0>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	07d0      	lsls	r0, r2, #31
 800916a:	d502      	bpl.n	8009172 <_printf_float+0x1a6>
 800916c:	3301      	adds	r3, #1
 800916e:	440b      	add	r3, r1
 8009170:	6123      	str	r3, [r4, #16]
 8009172:	65a1      	str	r1, [r4, #88]	; 0x58
 8009174:	f04f 0900 	mov.w	r9, #0
 8009178:	e7de      	b.n	8009138 <_printf_float+0x16c>
 800917a:	b913      	cbnz	r3, 8009182 <_printf_float+0x1b6>
 800917c:	6822      	ldr	r2, [r4, #0]
 800917e:	07d2      	lsls	r2, r2, #31
 8009180:	d501      	bpl.n	8009186 <_printf_float+0x1ba>
 8009182:	3302      	adds	r3, #2
 8009184:	e7f4      	b.n	8009170 <_printf_float+0x1a4>
 8009186:	2301      	movs	r3, #1
 8009188:	e7f2      	b.n	8009170 <_printf_float+0x1a4>
 800918a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800918e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009190:	4299      	cmp	r1, r3
 8009192:	db05      	blt.n	80091a0 <_printf_float+0x1d4>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	6121      	str	r1, [r4, #16]
 8009198:	07d8      	lsls	r0, r3, #31
 800919a:	d5ea      	bpl.n	8009172 <_printf_float+0x1a6>
 800919c:	1c4b      	adds	r3, r1, #1
 800919e:	e7e7      	b.n	8009170 <_printf_float+0x1a4>
 80091a0:	2900      	cmp	r1, #0
 80091a2:	bfd4      	ite	le
 80091a4:	f1c1 0202 	rsble	r2, r1, #2
 80091a8:	2201      	movgt	r2, #1
 80091aa:	4413      	add	r3, r2
 80091ac:	e7e0      	b.n	8009170 <_printf_float+0x1a4>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	055a      	lsls	r2, r3, #21
 80091b2:	d407      	bmi.n	80091c4 <_printf_float+0x1f8>
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	4642      	mov	r2, r8
 80091b8:	4631      	mov	r1, r6
 80091ba:	4628      	mov	r0, r5
 80091bc:	47b8      	blx	r7
 80091be:	3001      	adds	r0, #1
 80091c0:	d12c      	bne.n	800921c <_printf_float+0x250>
 80091c2:	e764      	b.n	800908e <_printf_float+0xc2>
 80091c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091c8:	f240 80e0 	bls.w	800938c <_printf_float+0x3c0>
 80091cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d0:	2200      	movs	r2, #0
 80091d2:	2300      	movs	r3, #0
 80091d4:	f7f7 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d034      	beq.n	8009246 <_printf_float+0x27a>
 80091dc:	4a37      	ldr	r2, [pc, #220]	; (80092bc <_printf_float+0x2f0>)
 80091de:	2301      	movs	r3, #1
 80091e0:	4631      	mov	r1, r6
 80091e2:	4628      	mov	r0, r5
 80091e4:	47b8      	blx	r7
 80091e6:	3001      	adds	r0, #1
 80091e8:	f43f af51 	beq.w	800908e <_printf_float+0xc2>
 80091ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f0:	429a      	cmp	r2, r3
 80091f2:	db02      	blt.n	80091fa <_printf_float+0x22e>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	07d8      	lsls	r0, r3, #31
 80091f8:	d510      	bpl.n	800921c <_printf_float+0x250>
 80091fa:	ee18 3a10 	vmov	r3, s16
 80091fe:	4652      	mov	r2, sl
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	f43f af41 	beq.w	800908e <_printf_float+0xc2>
 800920c:	f04f 0800 	mov.w	r8, #0
 8009210:	f104 091a 	add.w	r9, r4, #26
 8009214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009216:	3b01      	subs	r3, #1
 8009218:	4543      	cmp	r3, r8
 800921a:	dc09      	bgt.n	8009230 <_printf_float+0x264>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	079b      	lsls	r3, r3, #30
 8009220:	f100 8105 	bmi.w	800942e <_printf_float+0x462>
 8009224:	68e0      	ldr	r0, [r4, #12]
 8009226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009228:	4298      	cmp	r0, r3
 800922a:	bfb8      	it	lt
 800922c:	4618      	movlt	r0, r3
 800922e:	e730      	b.n	8009092 <_printf_float+0xc6>
 8009230:	2301      	movs	r3, #1
 8009232:	464a      	mov	r2, r9
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	f43f af27 	beq.w	800908e <_printf_float+0xc2>
 8009240:	f108 0801 	add.w	r8, r8, #1
 8009244:	e7e6      	b.n	8009214 <_printf_float+0x248>
 8009246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	dc39      	bgt.n	80092c0 <_printf_float+0x2f4>
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <_printf_float+0x2f0>)
 800924e:	2301      	movs	r3, #1
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	f43f af19 	beq.w	800908e <_printf_float+0xc2>
 800925c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009260:	4313      	orrs	r3, r2
 8009262:	d102      	bne.n	800926a <_printf_float+0x29e>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	07d9      	lsls	r1, r3, #31
 8009268:	d5d8      	bpl.n	800921c <_printf_float+0x250>
 800926a:	ee18 3a10 	vmov	r3, s16
 800926e:	4652      	mov	r2, sl
 8009270:	4631      	mov	r1, r6
 8009272:	4628      	mov	r0, r5
 8009274:	47b8      	blx	r7
 8009276:	3001      	adds	r0, #1
 8009278:	f43f af09 	beq.w	800908e <_printf_float+0xc2>
 800927c:	f04f 0900 	mov.w	r9, #0
 8009280:	f104 0a1a 	add.w	sl, r4, #26
 8009284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009286:	425b      	negs	r3, r3
 8009288:	454b      	cmp	r3, r9
 800928a:	dc01      	bgt.n	8009290 <_printf_float+0x2c4>
 800928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928e:	e792      	b.n	80091b6 <_printf_float+0x1ea>
 8009290:	2301      	movs	r3, #1
 8009292:	4652      	mov	r2, sl
 8009294:	4631      	mov	r1, r6
 8009296:	4628      	mov	r0, r5
 8009298:	47b8      	blx	r7
 800929a:	3001      	adds	r0, #1
 800929c:	f43f aef7 	beq.w	800908e <_printf_float+0xc2>
 80092a0:	f109 0901 	add.w	r9, r9, #1
 80092a4:	e7ee      	b.n	8009284 <_printf_float+0x2b8>
 80092a6:	bf00      	nop
 80092a8:	7fefffff 	.word	0x7fefffff
 80092ac:	0800b9b4 	.word	0x0800b9b4
 80092b0:	0800b9b8 	.word	0x0800b9b8
 80092b4:	0800b9c0 	.word	0x0800b9c0
 80092b8:	0800b9bc 	.word	0x0800b9bc
 80092bc:	0800b9c4 	.word	0x0800b9c4
 80092c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092c4:	429a      	cmp	r2, r3
 80092c6:	bfa8      	it	ge
 80092c8:	461a      	movge	r2, r3
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	4691      	mov	r9, r2
 80092ce:	dc37      	bgt.n	8009340 <_printf_float+0x374>
 80092d0:	f04f 0b00 	mov.w	fp, #0
 80092d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092d8:	f104 021a 	add.w	r2, r4, #26
 80092dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092de:	9305      	str	r3, [sp, #20]
 80092e0:	eba3 0309 	sub.w	r3, r3, r9
 80092e4:	455b      	cmp	r3, fp
 80092e6:	dc33      	bgt.n	8009350 <_printf_float+0x384>
 80092e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092ec:	429a      	cmp	r2, r3
 80092ee:	db3b      	blt.n	8009368 <_printf_float+0x39c>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	07da      	lsls	r2, r3, #31
 80092f4:	d438      	bmi.n	8009368 <_printf_float+0x39c>
 80092f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	eba2 0901 	sub.w	r9, r2, r1
 8009302:	4599      	cmp	r9, r3
 8009304:	bfa8      	it	ge
 8009306:	4699      	movge	r9, r3
 8009308:	f1b9 0f00 	cmp.w	r9, #0
 800930c:	dc35      	bgt.n	800937a <_printf_float+0x3ae>
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009316:	f104 0a1a 	add.w	sl, r4, #26
 800931a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800931e:	1a9b      	subs	r3, r3, r2
 8009320:	eba3 0309 	sub.w	r3, r3, r9
 8009324:	4543      	cmp	r3, r8
 8009326:	f77f af79 	ble.w	800921c <_printf_float+0x250>
 800932a:	2301      	movs	r3, #1
 800932c:	4652      	mov	r2, sl
 800932e:	4631      	mov	r1, r6
 8009330:	4628      	mov	r0, r5
 8009332:	47b8      	blx	r7
 8009334:	3001      	adds	r0, #1
 8009336:	f43f aeaa 	beq.w	800908e <_printf_float+0xc2>
 800933a:	f108 0801 	add.w	r8, r8, #1
 800933e:	e7ec      	b.n	800931a <_printf_float+0x34e>
 8009340:	4613      	mov	r3, r2
 8009342:	4631      	mov	r1, r6
 8009344:	4642      	mov	r2, r8
 8009346:	4628      	mov	r0, r5
 8009348:	47b8      	blx	r7
 800934a:	3001      	adds	r0, #1
 800934c:	d1c0      	bne.n	80092d0 <_printf_float+0x304>
 800934e:	e69e      	b.n	800908e <_printf_float+0xc2>
 8009350:	2301      	movs	r3, #1
 8009352:	4631      	mov	r1, r6
 8009354:	4628      	mov	r0, r5
 8009356:	9205      	str	r2, [sp, #20]
 8009358:	47b8      	blx	r7
 800935a:	3001      	adds	r0, #1
 800935c:	f43f ae97 	beq.w	800908e <_printf_float+0xc2>
 8009360:	9a05      	ldr	r2, [sp, #20]
 8009362:	f10b 0b01 	add.w	fp, fp, #1
 8009366:	e7b9      	b.n	80092dc <_printf_float+0x310>
 8009368:	ee18 3a10 	vmov	r3, s16
 800936c:	4652      	mov	r2, sl
 800936e:	4631      	mov	r1, r6
 8009370:	4628      	mov	r0, r5
 8009372:	47b8      	blx	r7
 8009374:	3001      	adds	r0, #1
 8009376:	d1be      	bne.n	80092f6 <_printf_float+0x32a>
 8009378:	e689      	b.n	800908e <_printf_float+0xc2>
 800937a:	9a05      	ldr	r2, [sp, #20]
 800937c:	464b      	mov	r3, r9
 800937e:	4442      	add	r2, r8
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	d1c1      	bne.n	800930e <_printf_float+0x342>
 800938a:	e680      	b.n	800908e <_printf_float+0xc2>
 800938c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800938e:	2a01      	cmp	r2, #1
 8009390:	dc01      	bgt.n	8009396 <_printf_float+0x3ca>
 8009392:	07db      	lsls	r3, r3, #31
 8009394:	d538      	bpl.n	8009408 <_printf_float+0x43c>
 8009396:	2301      	movs	r3, #1
 8009398:	4642      	mov	r2, r8
 800939a:	4631      	mov	r1, r6
 800939c:	4628      	mov	r0, r5
 800939e:	47b8      	blx	r7
 80093a0:	3001      	adds	r0, #1
 80093a2:	f43f ae74 	beq.w	800908e <_printf_float+0xc2>
 80093a6:	ee18 3a10 	vmov	r3, s16
 80093aa:	4652      	mov	r2, sl
 80093ac:	4631      	mov	r1, r6
 80093ae:	4628      	mov	r0, r5
 80093b0:	47b8      	blx	r7
 80093b2:	3001      	adds	r0, #1
 80093b4:	f43f ae6b 	beq.w	800908e <_printf_float+0xc2>
 80093b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093bc:	2200      	movs	r2, #0
 80093be:	2300      	movs	r3, #0
 80093c0:	f7f7 fb8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80093c4:	b9d8      	cbnz	r0, 80093fe <_printf_float+0x432>
 80093c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c8:	f108 0201 	add.w	r2, r8, #1
 80093cc:	3b01      	subs	r3, #1
 80093ce:	4631      	mov	r1, r6
 80093d0:	4628      	mov	r0, r5
 80093d2:	47b8      	blx	r7
 80093d4:	3001      	adds	r0, #1
 80093d6:	d10e      	bne.n	80093f6 <_printf_float+0x42a>
 80093d8:	e659      	b.n	800908e <_printf_float+0xc2>
 80093da:	2301      	movs	r3, #1
 80093dc:	4652      	mov	r2, sl
 80093de:	4631      	mov	r1, r6
 80093e0:	4628      	mov	r0, r5
 80093e2:	47b8      	blx	r7
 80093e4:	3001      	adds	r0, #1
 80093e6:	f43f ae52 	beq.w	800908e <_printf_float+0xc2>
 80093ea:	f108 0801 	add.w	r8, r8, #1
 80093ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f0:	3b01      	subs	r3, #1
 80093f2:	4543      	cmp	r3, r8
 80093f4:	dcf1      	bgt.n	80093da <_printf_float+0x40e>
 80093f6:	464b      	mov	r3, r9
 80093f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093fc:	e6dc      	b.n	80091b8 <_printf_float+0x1ec>
 80093fe:	f04f 0800 	mov.w	r8, #0
 8009402:	f104 0a1a 	add.w	sl, r4, #26
 8009406:	e7f2      	b.n	80093ee <_printf_float+0x422>
 8009408:	2301      	movs	r3, #1
 800940a:	4642      	mov	r2, r8
 800940c:	e7df      	b.n	80093ce <_printf_float+0x402>
 800940e:	2301      	movs	r3, #1
 8009410:	464a      	mov	r2, r9
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	f43f ae38 	beq.w	800908e <_printf_float+0xc2>
 800941e:	f108 0801 	add.w	r8, r8, #1
 8009422:	68e3      	ldr	r3, [r4, #12]
 8009424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009426:	1a5b      	subs	r3, r3, r1
 8009428:	4543      	cmp	r3, r8
 800942a:	dcf0      	bgt.n	800940e <_printf_float+0x442>
 800942c:	e6fa      	b.n	8009224 <_printf_float+0x258>
 800942e:	f04f 0800 	mov.w	r8, #0
 8009432:	f104 0919 	add.w	r9, r4, #25
 8009436:	e7f4      	b.n	8009422 <_printf_float+0x456>

08009438 <_printf_common>:
 8009438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943c:	4616      	mov	r6, r2
 800943e:	4699      	mov	r9, r3
 8009440:	688a      	ldr	r2, [r1, #8]
 8009442:	690b      	ldr	r3, [r1, #16]
 8009444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009448:	4293      	cmp	r3, r2
 800944a:	bfb8      	it	lt
 800944c:	4613      	movlt	r3, r2
 800944e:	6033      	str	r3, [r6, #0]
 8009450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009454:	4607      	mov	r7, r0
 8009456:	460c      	mov	r4, r1
 8009458:	b10a      	cbz	r2, 800945e <_printf_common+0x26>
 800945a:	3301      	adds	r3, #1
 800945c:	6033      	str	r3, [r6, #0]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	0699      	lsls	r1, r3, #26
 8009462:	bf42      	ittt	mi
 8009464:	6833      	ldrmi	r3, [r6, #0]
 8009466:	3302      	addmi	r3, #2
 8009468:	6033      	strmi	r3, [r6, #0]
 800946a:	6825      	ldr	r5, [r4, #0]
 800946c:	f015 0506 	ands.w	r5, r5, #6
 8009470:	d106      	bne.n	8009480 <_printf_common+0x48>
 8009472:	f104 0a19 	add.w	sl, r4, #25
 8009476:	68e3      	ldr	r3, [r4, #12]
 8009478:	6832      	ldr	r2, [r6, #0]
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	42ab      	cmp	r3, r5
 800947e:	dc26      	bgt.n	80094ce <_printf_common+0x96>
 8009480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009484:	1e13      	subs	r3, r2, #0
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	bf18      	it	ne
 800948a:	2301      	movne	r3, #1
 800948c:	0692      	lsls	r2, r2, #26
 800948e:	d42b      	bmi.n	80094e8 <_printf_common+0xb0>
 8009490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009494:	4649      	mov	r1, r9
 8009496:	4638      	mov	r0, r7
 8009498:	47c0      	blx	r8
 800949a:	3001      	adds	r0, #1
 800949c:	d01e      	beq.n	80094dc <_printf_common+0xa4>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	68e5      	ldr	r5, [r4, #12]
 80094a2:	6832      	ldr	r2, [r6, #0]
 80094a4:	f003 0306 	and.w	r3, r3, #6
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	bf08      	it	eq
 80094ac:	1aad      	subeq	r5, r5, r2
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	6922      	ldr	r2, [r4, #16]
 80094b2:	bf0c      	ite	eq
 80094b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b8:	2500      	movne	r5, #0
 80094ba:	4293      	cmp	r3, r2
 80094bc:	bfc4      	itt	gt
 80094be:	1a9b      	subgt	r3, r3, r2
 80094c0:	18ed      	addgt	r5, r5, r3
 80094c2:	2600      	movs	r6, #0
 80094c4:	341a      	adds	r4, #26
 80094c6:	42b5      	cmp	r5, r6
 80094c8:	d11a      	bne.n	8009500 <_printf_common+0xc8>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e008      	b.n	80094e0 <_printf_common+0xa8>
 80094ce:	2301      	movs	r3, #1
 80094d0:	4652      	mov	r2, sl
 80094d2:	4649      	mov	r1, r9
 80094d4:	4638      	mov	r0, r7
 80094d6:	47c0      	blx	r8
 80094d8:	3001      	adds	r0, #1
 80094da:	d103      	bne.n	80094e4 <_printf_common+0xac>
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e4:	3501      	adds	r5, #1
 80094e6:	e7c6      	b.n	8009476 <_printf_common+0x3e>
 80094e8:	18e1      	adds	r1, r4, r3
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	2030      	movs	r0, #48	; 0x30
 80094ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094f2:	4422      	add	r2, r4
 80094f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094fc:	3302      	adds	r3, #2
 80094fe:	e7c7      	b.n	8009490 <_printf_common+0x58>
 8009500:	2301      	movs	r3, #1
 8009502:	4622      	mov	r2, r4
 8009504:	4649      	mov	r1, r9
 8009506:	4638      	mov	r0, r7
 8009508:	47c0      	blx	r8
 800950a:	3001      	adds	r0, #1
 800950c:	d0e6      	beq.n	80094dc <_printf_common+0xa4>
 800950e:	3601      	adds	r6, #1
 8009510:	e7d9      	b.n	80094c6 <_printf_common+0x8e>
	...

08009514 <_printf_i>:
 8009514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	460c      	mov	r4, r1
 800951a:	4691      	mov	r9, r2
 800951c:	7e27      	ldrb	r7, [r4, #24]
 800951e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009520:	2f78      	cmp	r7, #120	; 0x78
 8009522:	4680      	mov	r8, r0
 8009524:	469a      	mov	sl, r3
 8009526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800952a:	d807      	bhi.n	800953c <_printf_i+0x28>
 800952c:	2f62      	cmp	r7, #98	; 0x62
 800952e:	d80a      	bhi.n	8009546 <_printf_i+0x32>
 8009530:	2f00      	cmp	r7, #0
 8009532:	f000 80d8 	beq.w	80096e6 <_printf_i+0x1d2>
 8009536:	2f58      	cmp	r7, #88	; 0x58
 8009538:	f000 80a3 	beq.w	8009682 <_printf_i+0x16e>
 800953c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009544:	e03a      	b.n	80095bc <_printf_i+0xa8>
 8009546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800954a:	2b15      	cmp	r3, #21
 800954c:	d8f6      	bhi.n	800953c <_printf_i+0x28>
 800954e:	a001      	add	r0, pc, #4	; (adr r0, 8009554 <_printf_i+0x40>)
 8009550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009554:	080095ad 	.word	0x080095ad
 8009558:	080095c1 	.word	0x080095c1
 800955c:	0800953d 	.word	0x0800953d
 8009560:	0800953d 	.word	0x0800953d
 8009564:	0800953d 	.word	0x0800953d
 8009568:	0800953d 	.word	0x0800953d
 800956c:	080095c1 	.word	0x080095c1
 8009570:	0800953d 	.word	0x0800953d
 8009574:	0800953d 	.word	0x0800953d
 8009578:	0800953d 	.word	0x0800953d
 800957c:	0800953d 	.word	0x0800953d
 8009580:	080096cd 	.word	0x080096cd
 8009584:	080095f1 	.word	0x080095f1
 8009588:	080096af 	.word	0x080096af
 800958c:	0800953d 	.word	0x0800953d
 8009590:	0800953d 	.word	0x0800953d
 8009594:	080096ef 	.word	0x080096ef
 8009598:	0800953d 	.word	0x0800953d
 800959c:	080095f1 	.word	0x080095f1
 80095a0:	0800953d 	.word	0x0800953d
 80095a4:	0800953d 	.word	0x0800953d
 80095a8:	080096b7 	.word	0x080096b7
 80095ac:	680b      	ldr	r3, [r1, #0]
 80095ae:	1d1a      	adds	r2, r3, #4
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	600a      	str	r2, [r1, #0]
 80095b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095bc:	2301      	movs	r3, #1
 80095be:	e0a3      	b.n	8009708 <_printf_i+0x1f4>
 80095c0:	6825      	ldr	r5, [r4, #0]
 80095c2:	6808      	ldr	r0, [r1, #0]
 80095c4:	062e      	lsls	r6, r5, #24
 80095c6:	f100 0304 	add.w	r3, r0, #4
 80095ca:	d50a      	bpl.n	80095e2 <_printf_i+0xce>
 80095cc:	6805      	ldr	r5, [r0, #0]
 80095ce:	600b      	str	r3, [r1, #0]
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	da03      	bge.n	80095dc <_printf_i+0xc8>
 80095d4:	232d      	movs	r3, #45	; 0x2d
 80095d6:	426d      	negs	r5, r5
 80095d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095dc:	485e      	ldr	r0, [pc, #376]	; (8009758 <_printf_i+0x244>)
 80095de:	230a      	movs	r3, #10
 80095e0:	e019      	b.n	8009616 <_printf_i+0x102>
 80095e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80095e6:	6805      	ldr	r5, [r0, #0]
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	bf18      	it	ne
 80095ec:	b22d      	sxthne	r5, r5
 80095ee:	e7ef      	b.n	80095d0 <_printf_i+0xbc>
 80095f0:	680b      	ldr	r3, [r1, #0]
 80095f2:	6825      	ldr	r5, [r4, #0]
 80095f4:	1d18      	adds	r0, r3, #4
 80095f6:	6008      	str	r0, [r1, #0]
 80095f8:	0628      	lsls	r0, r5, #24
 80095fa:	d501      	bpl.n	8009600 <_printf_i+0xec>
 80095fc:	681d      	ldr	r5, [r3, #0]
 80095fe:	e002      	b.n	8009606 <_printf_i+0xf2>
 8009600:	0669      	lsls	r1, r5, #25
 8009602:	d5fb      	bpl.n	80095fc <_printf_i+0xe8>
 8009604:	881d      	ldrh	r5, [r3, #0]
 8009606:	4854      	ldr	r0, [pc, #336]	; (8009758 <_printf_i+0x244>)
 8009608:	2f6f      	cmp	r7, #111	; 0x6f
 800960a:	bf0c      	ite	eq
 800960c:	2308      	moveq	r3, #8
 800960e:	230a      	movne	r3, #10
 8009610:	2100      	movs	r1, #0
 8009612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009616:	6866      	ldr	r6, [r4, #4]
 8009618:	60a6      	str	r6, [r4, #8]
 800961a:	2e00      	cmp	r6, #0
 800961c:	bfa2      	ittt	ge
 800961e:	6821      	ldrge	r1, [r4, #0]
 8009620:	f021 0104 	bicge.w	r1, r1, #4
 8009624:	6021      	strge	r1, [r4, #0]
 8009626:	b90d      	cbnz	r5, 800962c <_printf_i+0x118>
 8009628:	2e00      	cmp	r6, #0
 800962a:	d04d      	beq.n	80096c8 <_printf_i+0x1b4>
 800962c:	4616      	mov	r6, r2
 800962e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009632:	fb03 5711 	mls	r7, r3, r1, r5
 8009636:	5dc7      	ldrb	r7, [r0, r7]
 8009638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800963c:	462f      	mov	r7, r5
 800963e:	42bb      	cmp	r3, r7
 8009640:	460d      	mov	r5, r1
 8009642:	d9f4      	bls.n	800962e <_printf_i+0x11a>
 8009644:	2b08      	cmp	r3, #8
 8009646:	d10b      	bne.n	8009660 <_printf_i+0x14c>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	07df      	lsls	r7, r3, #31
 800964c:	d508      	bpl.n	8009660 <_printf_i+0x14c>
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	6861      	ldr	r1, [r4, #4]
 8009652:	4299      	cmp	r1, r3
 8009654:	bfde      	ittt	le
 8009656:	2330      	movle	r3, #48	; 0x30
 8009658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800965c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009660:	1b92      	subs	r2, r2, r6
 8009662:	6122      	str	r2, [r4, #16]
 8009664:	f8cd a000 	str.w	sl, [sp]
 8009668:	464b      	mov	r3, r9
 800966a:	aa03      	add	r2, sp, #12
 800966c:	4621      	mov	r1, r4
 800966e:	4640      	mov	r0, r8
 8009670:	f7ff fee2 	bl	8009438 <_printf_common>
 8009674:	3001      	adds	r0, #1
 8009676:	d14c      	bne.n	8009712 <_printf_i+0x1fe>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	b004      	add	sp, #16
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	4835      	ldr	r0, [pc, #212]	; (8009758 <_printf_i+0x244>)
 8009684:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	680e      	ldr	r6, [r1, #0]
 800968c:	061f      	lsls	r7, r3, #24
 800968e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009692:	600e      	str	r6, [r1, #0]
 8009694:	d514      	bpl.n	80096c0 <_printf_i+0x1ac>
 8009696:	07d9      	lsls	r1, r3, #31
 8009698:	bf44      	itt	mi
 800969a:	f043 0320 	orrmi.w	r3, r3, #32
 800969e:	6023      	strmi	r3, [r4, #0]
 80096a0:	b91d      	cbnz	r5, 80096aa <_printf_i+0x196>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	f023 0320 	bic.w	r3, r3, #32
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	2310      	movs	r3, #16
 80096ac:	e7b0      	b.n	8009610 <_printf_i+0xfc>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	f043 0320 	orr.w	r3, r3, #32
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	2378      	movs	r3, #120	; 0x78
 80096b8:	4828      	ldr	r0, [pc, #160]	; (800975c <_printf_i+0x248>)
 80096ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096be:	e7e3      	b.n	8009688 <_printf_i+0x174>
 80096c0:	065e      	lsls	r6, r3, #25
 80096c2:	bf48      	it	mi
 80096c4:	b2ad      	uxthmi	r5, r5
 80096c6:	e7e6      	b.n	8009696 <_printf_i+0x182>
 80096c8:	4616      	mov	r6, r2
 80096ca:	e7bb      	b.n	8009644 <_printf_i+0x130>
 80096cc:	680b      	ldr	r3, [r1, #0]
 80096ce:	6826      	ldr	r6, [r4, #0]
 80096d0:	6960      	ldr	r0, [r4, #20]
 80096d2:	1d1d      	adds	r5, r3, #4
 80096d4:	600d      	str	r5, [r1, #0]
 80096d6:	0635      	lsls	r5, r6, #24
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	d501      	bpl.n	80096e0 <_printf_i+0x1cc>
 80096dc:	6018      	str	r0, [r3, #0]
 80096de:	e002      	b.n	80096e6 <_printf_i+0x1d2>
 80096e0:	0671      	lsls	r1, r6, #25
 80096e2:	d5fb      	bpl.n	80096dc <_printf_i+0x1c8>
 80096e4:	8018      	strh	r0, [r3, #0]
 80096e6:	2300      	movs	r3, #0
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	4616      	mov	r6, r2
 80096ec:	e7ba      	b.n	8009664 <_printf_i+0x150>
 80096ee:	680b      	ldr	r3, [r1, #0]
 80096f0:	1d1a      	adds	r2, r3, #4
 80096f2:	600a      	str	r2, [r1, #0]
 80096f4:	681e      	ldr	r6, [r3, #0]
 80096f6:	6862      	ldr	r2, [r4, #4]
 80096f8:	2100      	movs	r1, #0
 80096fa:	4630      	mov	r0, r6
 80096fc:	f7f6 fd78 	bl	80001f0 <memchr>
 8009700:	b108      	cbz	r0, 8009706 <_printf_i+0x1f2>
 8009702:	1b80      	subs	r0, r0, r6
 8009704:	6060      	str	r0, [r4, #4]
 8009706:	6863      	ldr	r3, [r4, #4]
 8009708:	6123      	str	r3, [r4, #16]
 800970a:	2300      	movs	r3, #0
 800970c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009710:	e7a8      	b.n	8009664 <_printf_i+0x150>
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	4632      	mov	r2, r6
 8009716:	4649      	mov	r1, r9
 8009718:	4640      	mov	r0, r8
 800971a:	47d0      	blx	sl
 800971c:	3001      	adds	r0, #1
 800971e:	d0ab      	beq.n	8009678 <_printf_i+0x164>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	079b      	lsls	r3, r3, #30
 8009724:	d413      	bmi.n	800974e <_printf_i+0x23a>
 8009726:	68e0      	ldr	r0, [r4, #12]
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	4298      	cmp	r0, r3
 800972c:	bfb8      	it	lt
 800972e:	4618      	movlt	r0, r3
 8009730:	e7a4      	b.n	800967c <_printf_i+0x168>
 8009732:	2301      	movs	r3, #1
 8009734:	4632      	mov	r2, r6
 8009736:	4649      	mov	r1, r9
 8009738:	4640      	mov	r0, r8
 800973a:	47d0      	blx	sl
 800973c:	3001      	adds	r0, #1
 800973e:	d09b      	beq.n	8009678 <_printf_i+0x164>
 8009740:	3501      	adds	r5, #1
 8009742:	68e3      	ldr	r3, [r4, #12]
 8009744:	9903      	ldr	r1, [sp, #12]
 8009746:	1a5b      	subs	r3, r3, r1
 8009748:	42ab      	cmp	r3, r5
 800974a:	dcf2      	bgt.n	8009732 <_printf_i+0x21e>
 800974c:	e7eb      	b.n	8009726 <_printf_i+0x212>
 800974e:	2500      	movs	r5, #0
 8009750:	f104 0619 	add.w	r6, r4, #25
 8009754:	e7f5      	b.n	8009742 <_printf_i+0x22e>
 8009756:	bf00      	nop
 8009758:	0800b9c6 	.word	0x0800b9c6
 800975c:	0800b9d7 	.word	0x0800b9d7

08009760 <quorem>:
 8009760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	6903      	ldr	r3, [r0, #16]
 8009766:	690c      	ldr	r4, [r1, #16]
 8009768:	42a3      	cmp	r3, r4
 800976a:	4607      	mov	r7, r0
 800976c:	f2c0 8081 	blt.w	8009872 <quorem+0x112>
 8009770:	3c01      	subs	r4, #1
 8009772:	f101 0814 	add.w	r8, r1, #20
 8009776:	f100 0514 	add.w	r5, r0, #20
 800977a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009788:	3301      	adds	r3, #1
 800978a:	429a      	cmp	r2, r3
 800978c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009790:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009794:	fbb2 f6f3 	udiv	r6, r2, r3
 8009798:	d331      	bcc.n	80097fe <quorem+0x9e>
 800979a:	f04f 0e00 	mov.w	lr, #0
 800979e:	4640      	mov	r0, r8
 80097a0:	46ac      	mov	ip, r5
 80097a2:	46f2      	mov	sl, lr
 80097a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80097a8:	b293      	uxth	r3, r2
 80097aa:	fb06 e303 	mla	r3, r6, r3, lr
 80097ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	ebaa 0303 	sub.w	r3, sl, r3
 80097b8:	0c12      	lsrs	r2, r2, #16
 80097ba:	f8dc a000 	ldr.w	sl, [ip]
 80097be:	fb06 e202 	mla	r2, r6, r2, lr
 80097c2:	fa13 f38a 	uxtah	r3, r3, sl
 80097c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097ca:	fa1f fa82 	uxth.w	sl, r2
 80097ce:	f8dc 2000 	ldr.w	r2, [ip]
 80097d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80097d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097da:	b29b      	uxth	r3, r3
 80097dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097e0:	4581      	cmp	r9, r0
 80097e2:	f84c 3b04 	str.w	r3, [ip], #4
 80097e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097ea:	d2db      	bcs.n	80097a4 <quorem+0x44>
 80097ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80097f0:	b92b      	cbnz	r3, 80097fe <quorem+0x9e>
 80097f2:	9b01      	ldr	r3, [sp, #4]
 80097f4:	3b04      	subs	r3, #4
 80097f6:	429d      	cmp	r5, r3
 80097f8:	461a      	mov	r2, r3
 80097fa:	d32e      	bcc.n	800985a <quorem+0xfa>
 80097fc:	613c      	str	r4, [r7, #16]
 80097fe:	4638      	mov	r0, r7
 8009800:	f001 f8b0 	bl	800a964 <__mcmp>
 8009804:	2800      	cmp	r0, #0
 8009806:	db24      	blt.n	8009852 <quorem+0xf2>
 8009808:	3601      	adds	r6, #1
 800980a:	4628      	mov	r0, r5
 800980c:	f04f 0c00 	mov.w	ip, #0
 8009810:	f858 2b04 	ldr.w	r2, [r8], #4
 8009814:	f8d0 e000 	ldr.w	lr, [r0]
 8009818:	b293      	uxth	r3, r2
 800981a:	ebac 0303 	sub.w	r3, ip, r3
 800981e:	0c12      	lsrs	r2, r2, #16
 8009820:	fa13 f38e 	uxtah	r3, r3, lr
 8009824:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800982c:	b29b      	uxth	r3, r3
 800982e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009832:	45c1      	cmp	r9, r8
 8009834:	f840 3b04 	str.w	r3, [r0], #4
 8009838:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800983c:	d2e8      	bcs.n	8009810 <quorem+0xb0>
 800983e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009846:	b922      	cbnz	r2, 8009852 <quorem+0xf2>
 8009848:	3b04      	subs	r3, #4
 800984a:	429d      	cmp	r5, r3
 800984c:	461a      	mov	r2, r3
 800984e:	d30a      	bcc.n	8009866 <quorem+0x106>
 8009850:	613c      	str	r4, [r7, #16]
 8009852:	4630      	mov	r0, r6
 8009854:	b003      	add	sp, #12
 8009856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985a:	6812      	ldr	r2, [r2, #0]
 800985c:	3b04      	subs	r3, #4
 800985e:	2a00      	cmp	r2, #0
 8009860:	d1cc      	bne.n	80097fc <quorem+0x9c>
 8009862:	3c01      	subs	r4, #1
 8009864:	e7c7      	b.n	80097f6 <quorem+0x96>
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	3b04      	subs	r3, #4
 800986a:	2a00      	cmp	r2, #0
 800986c:	d1f0      	bne.n	8009850 <quorem+0xf0>
 800986e:	3c01      	subs	r4, #1
 8009870:	e7eb      	b.n	800984a <quorem+0xea>
 8009872:	2000      	movs	r0, #0
 8009874:	e7ee      	b.n	8009854 <quorem+0xf4>
	...

08009878 <_dtoa_r>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	ed2d 8b02 	vpush	{d8}
 8009880:	ec57 6b10 	vmov	r6, r7, d0
 8009884:	b095      	sub	sp, #84	; 0x54
 8009886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800988c:	9105      	str	r1, [sp, #20]
 800988e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009892:	4604      	mov	r4, r0
 8009894:	9209      	str	r2, [sp, #36]	; 0x24
 8009896:	930f      	str	r3, [sp, #60]	; 0x3c
 8009898:	b975      	cbnz	r5, 80098b8 <_dtoa_r+0x40>
 800989a:	2010      	movs	r0, #16
 800989c:	f000 fddc 	bl	800a458 <malloc>
 80098a0:	4602      	mov	r2, r0
 80098a2:	6260      	str	r0, [r4, #36]	; 0x24
 80098a4:	b920      	cbnz	r0, 80098b0 <_dtoa_r+0x38>
 80098a6:	4bb2      	ldr	r3, [pc, #712]	; (8009b70 <_dtoa_r+0x2f8>)
 80098a8:	21ea      	movs	r1, #234	; 0xea
 80098aa:	48b2      	ldr	r0, [pc, #712]	; (8009b74 <_dtoa_r+0x2fc>)
 80098ac:	f001 fa24 	bl	800acf8 <__assert_func>
 80098b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098b4:	6005      	str	r5, [r0, #0]
 80098b6:	60c5      	str	r5, [r0, #12]
 80098b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ba:	6819      	ldr	r1, [r3, #0]
 80098bc:	b151      	cbz	r1, 80098d4 <_dtoa_r+0x5c>
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	604a      	str	r2, [r1, #4]
 80098c2:	2301      	movs	r3, #1
 80098c4:	4093      	lsls	r3, r2
 80098c6:	608b      	str	r3, [r1, #8]
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fe0d 	bl	800a4e8 <_Bfree>
 80098ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	1e3b      	subs	r3, r7, #0
 80098d6:	bfb9      	ittee	lt
 80098d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	9303      	strlt	r3, [sp, #12]
 80098de:	2300      	movge	r3, #0
 80098e0:	f8c8 3000 	strge.w	r3, [r8]
 80098e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80098e8:	4ba3      	ldr	r3, [pc, #652]	; (8009b78 <_dtoa_r+0x300>)
 80098ea:	bfbc      	itt	lt
 80098ec:	2201      	movlt	r2, #1
 80098ee:	f8c8 2000 	strlt.w	r2, [r8]
 80098f2:	ea33 0309 	bics.w	r3, r3, r9
 80098f6:	d11b      	bne.n	8009930 <_dtoa_r+0xb8>
 80098f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009904:	4333      	orrs	r3, r6
 8009906:	f000 857a 	beq.w	800a3fe <_dtoa_r+0xb86>
 800990a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800990c:	b963      	cbnz	r3, 8009928 <_dtoa_r+0xb0>
 800990e:	4b9b      	ldr	r3, [pc, #620]	; (8009b7c <_dtoa_r+0x304>)
 8009910:	e024      	b.n	800995c <_dtoa_r+0xe4>
 8009912:	4b9b      	ldr	r3, [pc, #620]	; (8009b80 <_dtoa_r+0x308>)
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	9800      	ldr	r0, [sp, #0]
 800991e:	b015      	add	sp, #84	; 0x54
 8009920:	ecbd 8b02 	vpop	{d8}
 8009924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009928:	4b94      	ldr	r3, [pc, #592]	; (8009b7c <_dtoa_r+0x304>)
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	3303      	adds	r3, #3
 800992e:	e7f3      	b.n	8009918 <_dtoa_r+0xa0>
 8009930:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009934:	2200      	movs	r2, #0
 8009936:	ec51 0b17 	vmov	r0, r1, d7
 800993a:	2300      	movs	r3, #0
 800993c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009940:	f7f7 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009944:	4680      	mov	r8, r0
 8009946:	b158      	cbz	r0, 8009960 <_dtoa_r+0xe8>
 8009948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800994a:	2301      	movs	r3, #1
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 8551 	beq.w	800a3f8 <_dtoa_r+0xb80>
 8009956:	488b      	ldr	r0, [pc, #556]	; (8009b84 <_dtoa_r+0x30c>)
 8009958:	6018      	str	r0, [r3, #0]
 800995a:	1e43      	subs	r3, r0, #1
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	e7dd      	b.n	800991c <_dtoa_r+0xa4>
 8009960:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009964:	aa12      	add	r2, sp, #72	; 0x48
 8009966:	a913      	add	r1, sp, #76	; 0x4c
 8009968:	4620      	mov	r0, r4
 800996a:	f001 f89f 	bl	800aaac <__d2b>
 800996e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009972:	4683      	mov	fp, r0
 8009974:	2d00      	cmp	r5, #0
 8009976:	d07c      	beq.n	8009a72 <_dtoa_r+0x1fa>
 8009978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800997a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800997e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009982:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009986:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800998a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800998e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009992:	4b7d      	ldr	r3, [pc, #500]	; (8009b88 <_dtoa_r+0x310>)
 8009994:	2200      	movs	r2, #0
 8009996:	4630      	mov	r0, r6
 8009998:	4639      	mov	r1, r7
 800999a:	f7f6 fc7d 	bl	8000298 <__aeabi_dsub>
 800999e:	a36e      	add	r3, pc, #440	; (adr r3, 8009b58 <_dtoa_r+0x2e0>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7f6 fe30 	bl	8000608 <__aeabi_dmul>
 80099a8:	a36d      	add	r3, pc, #436	; (adr r3, 8009b60 <_dtoa_r+0x2e8>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fc75 	bl	800029c <__adddf3>
 80099b2:	4606      	mov	r6, r0
 80099b4:	4628      	mov	r0, r5
 80099b6:	460f      	mov	r7, r1
 80099b8:	f7f6 fdbc 	bl	8000534 <__aeabi_i2d>
 80099bc:	a36a      	add	r3, pc, #424	; (adr r3, 8009b68 <_dtoa_r+0x2f0>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fe21 	bl	8000608 <__aeabi_dmul>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4630      	mov	r0, r6
 80099cc:	4639      	mov	r1, r7
 80099ce:	f7f6 fc65 	bl	800029c <__adddf3>
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	f7f7 f8c7 	bl	8000b68 <__aeabi_d2iz>
 80099da:	2200      	movs	r2, #0
 80099dc:	4682      	mov	sl, r0
 80099de:	2300      	movs	r3, #0
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f7 f882 	bl	8000aec <__aeabi_dcmplt>
 80099e8:	b148      	cbz	r0, 80099fe <_dtoa_r+0x186>
 80099ea:	4650      	mov	r0, sl
 80099ec:	f7f6 fda2 	bl	8000534 <__aeabi_i2d>
 80099f0:	4632      	mov	r2, r6
 80099f2:	463b      	mov	r3, r7
 80099f4:	f7f7 f870 	bl	8000ad8 <__aeabi_dcmpeq>
 80099f8:	b908      	cbnz	r0, 80099fe <_dtoa_r+0x186>
 80099fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099fe:	f1ba 0f16 	cmp.w	sl, #22
 8009a02:	d854      	bhi.n	8009aae <_dtoa_r+0x236>
 8009a04:	4b61      	ldr	r3, [pc, #388]	; (8009b8c <_dtoa_r+0x314>)
 8009a06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a12:	f7f7 f86b 	bl	8000aec <__aeabi_dcmplt>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d04b      	beq.n	8009ab2 <_dtoa_r+0x23a>
 8009a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a1e:	2300      	movs	r3, #0
 8009a20:	930e      	str	r3, [sp, #56]	; 0x38
 8009a22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a24:	1b5d      	subs	r5, r3, r5
 8009a26:	1e6b      	subs	r3, r5, #1
 8009a28:	9304      	str	r3, [sp, #16]
 8009a2a:	bf43      	ittte	mi
 8009a2c:	2300      	movmi	r3, #0
 8009a2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009a32:	9304      	strmi	r3, [sp, #16]
 8009a34:	f04f 0800 	movpl.w	r8, #0
 8009a38:	f1ba 0f00 	cmp.w	sl, #0
 8009a3c:	db3b      	blt.n	8009ab6 <_dtoa_r+0x23e>
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009a44:	4453      	add	r3, sl
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	9306      	str	r3, [sp, #24]
 8009a4c:	9b05      	ldr	r3, [sp, #20]
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d869      	bhi.n	8009b26 <_dtoa_r+0x2ae>
 8009a52:	2b05      	cmp	r3, #5
 8009a54:	bfc4      	itt	gt
 8009a56:	3b04      	subgt	r3, #4
 8009a58:	9305      	strgt	r3, [sp, #20]
 8009a5a:	9b05      	ldr	r3, [sp, #20]
 8009a5c:	f1a3 0302 	sub.w	r3, r3, #2
 8009a60:	bfcc      	ite	gt
 8009a62:	2500      	movgt	r5, #0
 8009a64:	2501      	movle	r5, #1
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d869      	bhi.n	8009b3e <_dtoa_r+0x2c6>
 8009a6a:	e8df f003 	tbb	[pc, r3]
 8009a6e:	4e2c      	.short	0x4e2c
 8009a70:	5a4c      	.short	0x5a4c
 8009a72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009a76:	441d      	add	r5, r3
 8009a78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	bfc1      	itttt	gt
 8009a80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a88:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a90:	bfda      	itte	le
 8009a92:	f1c3 0320 	rsble	r3, r3, #32
 8009a96:	fa06 f003 	lslle.w	r0, r6, r3
 8009a9a:	4318      	orrgt	r0, r3
 8009a9c:	f7f6 fd3a 	bl	8000514 <__aeabi_ui2d>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009aa8:	3d01      	subs	r5, #1
 8009aaa:	9310      	str	r3, [sp, #64]	; 0x40
 8009aac:	e771      	b.n	8009992 <_dtoa_r+0x11a>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7b6      	b.n	8009a20 <_dtoa_r+0x1a8>
 8009ab2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ab4:	e7b5      	b.n	8009a22 <_dtoa_r+0x1aa>
 8009ab6:	f1ca 0300 	rsb	r3, sl, #0
 8009aba:	9306      	str	r3, [sp, #24]
 8009abc:	2300      	movs	r3, #0
 8009abe:	eba8 080a 	sub.w	r8, r8, sl
 8009ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ac4:	e7c2      	b.n	8009a4c <_dtoa_r+0x1d4>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9308      	str	r3, [sp, #32]
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dc39      	bgt.n	8009b44 <_dtoa_r+0x2cc>
 8009ad0:	f04f 0901 	mov.w	r9, #1
 8009ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ad8:	464b      	mov	r3, r9
 8009ada:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009ade:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	6042      	str	r2, [r0, #4]
 8009ae4:	2204      	movs	r2, #4
 8009ae6:	f102 0614 	add.w	r6, r2, #20
 8009aea:	429e      	cmp	r6, r3
 8009aec:	6841      	ldr	r1, [r0, #4]
 8009aee:	d92f      	bls.n	8009b50 <_dtoa_r+0x2d8>
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fcb9 	bl	800a468 <_Balloc>
 8009af6:	9000      	str	r0, [sp, #0]
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d14b      	bne.n	8009b94 <_dtoa_r+0x31c>
 8009afc:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <_dtoa_r+0x318>)
 8009afe:	4602      	mov	r2, r0
 8009b00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b04:	e6d1      	b.n	80098aa <_dtoa_r+0x32>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e7de      	b.n	8009ac8 <_dtoa_r+0x250>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9308      	str	r3, [sp, #32]
 8009b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b10:	eb0a 0903 	add.w	r9, sl, r3
 8009b14:	f109 0301 	add.w	r3, r9, #1
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	bfb8      	it	lt
 8009b1e:	2301      	movlt	r3, #1
 8009b20:	e7dd      	b.n	8009ade <_dtoa_r+0x266>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e7f2      	b.n	8009b0c <_dtoa_r+0x294>
 8009b26:	2501      	movs	r5, #1
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9305      	str	r3, [sp, #20]
 8009b2c:	9508      	str	r5, [sp, #32]
 8009b2e:	f04f 39ff 	mov.w	r9, #4294967295
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b38:	2312      	movs	r3, #18
 8009b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b3c:	e7cf      	b.n	8009ade <_dtoa_r+0x266>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9308      	str	r3, [sp, #32]
 8009b42:	e7f4      	b.n	8009b2e <_dtoa_r+0x2b6>
 8009b44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009b48:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b4c:	464b      	mov	r3, r9
 8009b4e:	e7c6      	b.n	8009ade <_dtoa_r+0x266>
 8009b50:	3101      	adds	r1, #1
 8009b52:	6041      	str	r1, [r0, #4]
 8009b54:	0052      	lsls	r2, r2, #1
 8009b56:	e7c6      	b.n	8009ae6 <_dtoa_r+0x26e>
 8009b58:	636f4361 	.word	0x636f4361
 8009b5c:	3fd287a7 	.word	0x3fd287a7
 8009b60:	8b60c8b3 	.word	0x8b60c8b3
 8009b64:	3fc68a28 	.word	0x3fc68a28
 8009b68:	509f79fb 	.word	0x509f79fb
 8009b6c:	3fd34413 	.word	0x3fd34413
 8009b70:	0800b9f5 	.word	0x0800b9f5
 8009b74:	0800ba0c 	.word	0x0800ba0c
 8009b78:	7ff00000 	.word	0x7ff00000
 8009b7c:	0800b9f1 	.word	0x0800b9f1
 8009b80:	0800b9e8 	.word	0x0800b9e8
 8009b84:	0800b9c5 	.word	0x0800b9c5
 8009b88:	3ff80000 	.word	0x3ff80000
 8009b8c:	0800bb08 	.word	0x0800bb08
 8009b90:	0800ba6b 	.word	0x0800ba6b
 8009b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b96:	9a00      	ldr	r2, [sp, #0]
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	2b0e      	cmp	r3, #14
 8009b9e:	f200 80ad 	bhi.w	8009cfc <_dtoa_r+0x484>
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	f000 80aa 	beq.w	8009cfc <_dtoa_r+0x484>
 8009ba8:	f1ba 0f00 	cmp.w	sl, #0
 8009bac:	dd36      	ble.n	8009c1c <_dtoa_r+0x3a4>
 8009bae:	4ac3      	ldr	r2, [pc, #780]	; (8009ebc <_dtoa_r+0x644>)
 8009bb0:	f00a 030f 	and.w	r3, sl, #15
 8009bb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bb8:	ed93 7b00 	vldr	d7, [r3]
 8009bbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009bc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009bc4:	eeb0 8a47 	vmov.f32	s16, s14
 8009bc8:	eef0 8a67 	vmov.f32	s17, s15
 8009bcc:	d016      	beq.n	8009bfc <_dtoa_r+0x384>
 8009bce:	4bbc      	ldr	r3, [pc, #752]	; (8009ec0 <_dtoa_r+0x648>)
 8009bd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bd8:	f7f6 fe40 	bl	800085c <__aeabi_ddiv>
 8009bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be0:	f007 070f 	and.w	r7, r7, #15
 8009be4:	2503      	movs	r5, #3
 8009be6:	4eb6      	ldr	r6, [pc, #728]	; (8009ec0 <_dtoa_r+0x648>)
 8009be8:	b957      	cbnz	r7, 8009c00 <_dtoa_r+0x388>
 8009bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bee:	ec53 2b18 	vmov	r2, r3, d8
 8009bf2:	f7f6 fe33 	bl	800085c <__aeabi_ddiv>
 8009bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bfa:	e029      	b.n	8009c50 <_dtoa_r+0x3d8>
 8009bfc:	2502      	movs	r5, #2
 8009bfe:	e7f2      	b.n	8009be6 <_dtoa_r+0x36e>
 8009c00:	07f9      	lsls	r1, r7, #31
 8009c02:	d508      	bpl.n	8009c16 <_dtoa_r+0x39e>
 8009c04:	ec51 0b18 	vmov	r0, r1, d8
 8009c08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c0c:	f7f6 fcfc 	bl	8000608 <__aeabi_dmul>
 8009c10:	ec41 0b18 	vmov	d8, r0, r1
 8009c14:	3501      	adds	r5, #1
 8009c16:	107f      	asrs	r7, r7, #1
 8009c18:	3608      	adds	r6, #8
 8009c1a:	e7e5      	b.n	8009be8 <_dtoa_r+0x370>
 8009c1c:	f000 80a6 	beq.w	8009d6c <_dtoa_r+0x4f4>
 8009c20:	f1ca 0600 	rsb	r6, sl, #0
 8009c24:	4ba5      	ldr	r3, [pc, #660]	; (8009ebc <_dtoa_r+0x644>)
 8009c26:	4fa6      	ldr	r7, [pc, #664]	; (8009ec0 <_dtoa_r+0x648>)
 8009c28:	f006 020f 	and.w	r2, r6, #15
 8009c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c38:	f7f6 fce6 	bl	8000608 <__aeabi_dmul>
 8009c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c40:	1136      	asrs	r6, r6, #4
 8009c42:	2300      	movs	r3, #0
 8009c44:	2502      	movs	r5, #2
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	f040 8085 	bne.w	8009d56 <_dtoa_r+0x4de>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1d2      	bne.n	8009bf6 <_dtoa_r+0x37e>
 8009c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 808c 	beq.w	8009d70 <_dtoa_r+0x4f8>
 8009c58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c5c:	4b99      	ldr	r3, [pc, #612]	; (8009ec4 <_dtoa_r+0x64c>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 ff42 	bl	8000aec <__aeabi_dcmplt>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f000 8081 	beq.w	8009d70 <_dtoa_r+0x4f8>
 8009c6e:	9b01      	ldr	r3, [sp, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d07d      	beq.n	8009d70 <_dtoa_r+0x4f8>
 8009c74:	f1b9 0f00 	cmp.w	r9, #0
 8009c78:	dd3c      	ble.n	8009cf4 <_dtoa_r+0x47c>
 8009c7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c7e:	9307      	str	r3, [sp, #28]
 8009c80:	2200      	movs	r2, #0
 8009c82:	4b91      	ldr	r3, [pc, #580]	; (8009ec8 <_dtoa_r+0x650>)
 8009c84:	4630      	mov	r0, r6
 8009c86:	4639      	mov	r1, r7
 8009c88:	f7f6 fcbe 	bl	8000608 <__aeabi_dmul>
 8009c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c90:	3501      	adds	r5, #1
 8009c92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7f6 fc4a 	bl	8000534 <__aeabi_i2d>
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	f7f6 fcb0 	bl	8000608 <__aeabi_dmul>
 8009ca8:	4b88      	ldr	r3, [pc, #544]	; (8009ecc <_dtoa_r+0x654>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	f7f6 faf6 	bl	800029c <__adddf3>
 8009cb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb8:	9303      	str	r3, [sp, #12]
 8009cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d15c      	bne.n	8009d7a <_dtoa_r+0x502>
 8009cc0:	4b83      	ldr	r3, [pc, #524]	; (8009ed0 <_dtoa_r+0x658>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	f7f6 fae6 	bl	8000298 <__aeabi_dsub>
 8009ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	460f      	mov	r7, r1
 8009cd4:	f7f6 ff28 	bl	8000b28 <__aeabi_dcmpgt>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	f040 8296 	bne.w	800a20a <_dtoa_r+0x992>
 8009cde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ce8:	4639      	mov	r1, r7
 8009cea:	f7f6 feff 	bl	8000aec <__aeabi_dcmplt>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f040 8288 	bne.w	800a204 <_dtoa_r+0x98c>
 8009cf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f2c0 8158 	blt.w	8009fb4 <_dtoa_r+0x73c>
 8009d04:	f1ba 0f0e 	cmp.w	sl, #14
 8009d08:	f300 8154 	bgt.w	8009fb4 <_dtoa_r+0x73c>
 8009d0c:	4b6b      	ldr	r3, [pc, #428]	; (8009ebc <_dtoa_r+0x644>)
 8009d0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f280 80e3 	bge.w	8009ee4 <_dtoa_r+0x66c>
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f300 80df 	bgt.w	8009ee4 <_dtoa_r+0x66c>
 8009d26:	f040 826d 	bne.w	800a204 <_dtoa_r+0x98c>
 8009d2a:	4b69      	ldr	r3, [pc, #420]	; (8009ed0 <_dtoa_r+0x658>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	f7f6 fc69 	bl	8000608 <__aeabi_dmul>
 8009d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d3a:	f7f6 feeb 	bl	8000b14 <__aeabi_dcmpge>
 8009d3e:	9e01      	ldr	r6, [sp, #4]
 8009d40:	4637      	mov	r7, r6
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f040 8243 	bne.w	800a1ce <_dtoa_r+0x956>
 8009d48:	9d00      	ldr	r5, [sp, #0]
 8009d4a:	2331      	movs	r3, #49	; 0x31
 8009d4c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d50:	f10a 0a01 	add.w	sl, sl, #1
 8009d54:	e23f      	b.n	800a1d6 <_dtoa_r+0x95e>
 8009d56:	07f2      	lsls	r2, r6, #31
 8009d58:	d505      	bpl.n	8009d66 <_dtoa_r+0x4ee>
 8009d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d5e:	f7f6 fc53 	bl	8000608 <__aeabi_dmul>
 8009d62:	3501      	adds	r5, #1
 8009d64:	2301      	movs	r3, #1
 8009d66:	1076      	asrs	r6, r6, #1
 8009d68:	3708      	adds	r7, #8
 8009d6a:	e76c      	b.n	8009c46 <_dtoa_r+0x3ce>
 8009d6c:	2502      	movs	r5, #2
 8009d6e:	e76f      	b.n	8009c50 <_dtoa_r+0x3d8>
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d76:	930c      	str	r3, [sp, #48]	; 0x30
 8009d78:	e78d      	b.n	8009c96 <_dtoa_r+0x41e>
 8009d7a:	9900      	ldr	r1, [sp, #0]
 8009d7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d80:	4b4e      	ldr	r3, [pc, #312]	; (8009ebc <_dtoa_r+0x644>)
 8009d82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d86:	4401      	add	r1, r0
 8009d88:	9102      	str	r1, [sp, #8]
 8009d8a:	9908      	ldr	r1, [sp, #32]
 8009d8c:	eeb0 8a47 	vmov.f32	s16, s14
 8009d90:	eef0 8a67 	vmov.f32	s17, s15
 8009d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	d045      	beq.n	8009e2c <_dtoa_r+0x5b4>
 8009da0:	494c      	ldr	r1, [pc, #304]	; (8009ed4 <_dtoa_r+0x65c>)
 8009da2:	2000      	movs	r0, #0
 8009da4:	f7f6 fd5a 	bl	800085c <__aeabi_ddiv>
 8009da8:	ec53 2b18 	vmov	r2, r3, d8
 8009dac:	f7f6 fa74 	bl	8000298 <__aeabi_dsub>
 8009db0:	9d00      	ldr	r5, [sp, #0]
 8009db2:	ec41 0b18 	vmov	d8, r0, r1
 8009db6:	4639      	mov	r1, r7
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7f6 fed5 	bl	8000b68 <__aeabi_d2iz>
 8009dbe:	900c      	str	r0, [sp, #48]	; 0x30
 8009dc0:	f7f6 fbb8 	bl	8000534 <__aeabi_i2d>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fa64 	bl	8000298 <__aeabi_dsub>
 8009dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd2:	3330      	adds	r3, #48	; 0x30
 8009dd4:	f805 3b01 	strb.w	r3, [r5], #1
 8009dd8:	ec53 2b18 	vmov	r2, r3, d8
 8009ddc:	4606      	mov	r6, r0
 8009dde:	460f      	mov	r7, r1
 8009de0:	f7f6 fe84 	bl	8000aec <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d165      	bne.n	8009eb4 <_dtoa_r+0x63c>
 8009de8:	4632      	mov	r2, r6
 8009dea:	463b      	mov	r3, r7
 8009dec:	4935      	ldr	r1, [pc, #212]	; (8009ec4 <_dtoa_r+0x64c>)
 8009dee:	2000      	movs	r0, #0
 8009df0:	f7f6 fa52 	bl	8000298 <__aeabi_dsub>
 8009df4:	ec53 2b18 	vmov	r2, r3, d8
 8009df8:	f7f6 fe78 	bl	8000aec <__aeabi_dcmplt>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f040 80b9 	bne.w	8009f74 <_dtoa_r+0x6fc>
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	429d      	cmp	r5, r3
 8009e06:	f43f af75 	beq.w	8009cf4 <_dtoa_r+0x47c>
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ec8 <_dtoa_r+0x650>)
 8009e0c:	ec51 0b18 	vmov	r0, r1, d8
 8009e10:	2200      	movs	r2, #0
 8009e12:	f7f6 fbf9 	bl	8000608 <__aeabi_dmul>
 8009e16:	4b2c      	ldr	r3, [pc, #176]	; (8009ec8 <_dtoa_r+0x650>)
 8009e18:	ec41 0b18 	vmov	d8, r0, r1
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fbf1 	bl	8000608 <__aeabi_dmul>
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	e7c4      	b.n	8009db6 <_dtoa_r+0x53e>
 8009e2c:	ec51 0b17 	vmov	r0, r1, d7
 8009e30:	f7f6 fbea 	bl	8000608 <__aeabi_dmul>
 8009e34:	9b02      	ldr	r3, [sp, #8]
 8009e36:	9d00      	ldr	r5, [sp, #0]
 8009e38:	930c      	str	r3, [sp, #48]	; 0x30
 8009e3a:	ec41 0b18 	vmov	d8, r0, r1
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4630      	mov	r0, r6
 8009e42:	f7f6 fe91 	bl	8000b68 <__aeabi_d2iz>
 8009e46:	9011      	str	r0, [sp, #68]	; 0x44
 8009e48:	f7f6 fb74 	bl	8000534 <__aeabi_i2d>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4630      	mov	r0, r6
 8009e52:	4639      	mov	r1, r7
 8009e54:	f7f6 fa20 	bl	8000298 <__aeabi_dsub>
 8009e58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e5a:	3330      	adds	r3, #48	; 0x30
 8009e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	429d      	cmp	r5, r3
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	f04f 0200 	mov.w	r2, #0
 8009e6c:	d134      	bne.n	8009ed8 <_dtoa_r+0x660>
 8009e6e:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <_dtoa_r+0x65c>)
 8009e70:	ec51 0b18 	vmov	r0, r1, d8
 8009e74:	f7f6 fa12 	bl	800029c <__adddf3>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 fe52 	bl	8000b28 <__aeabi_dcmpgt>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d175      	bne.n	8009f74 <_dtoa_r+0x6fc>
 8009e88:	ec53 2b18 	vmov	r2, r3, d8
 8009e8c:	4911      	ldr	r1, [pc, #68]	; (8009ed4 <_dtoa_r+0x65c>)
 8009e8e:	2000      	movs	r0, #0
 8009e90:	f7f6 fa02 	bl	8000298 <__aeabi_dsub>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fe26 	bl	8000aec <__aeabi_dcmplt>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f43f af27 	beq.w	8009cf4 <_dtoa_r+0x47c>
 8009ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ea8:	1e6b      	subs	r3, r5, #1
 8009eaa:	930c      	str	r3, [sp, #48]	; 0x30
 8009eac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009eb0:	2b30      	cmp	r3, #48	; 0x30
 8009eb2:	d0f8      	beq.n	8009ea6 <_dtoa_r+0x62e>
 8009eb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009eb8:	e04a      	b.n	8009f50 <_dtoa_r+0x6d8>
 8009eba:	bf00      	nop
 8009ebc:	0800bb08 	.word	0x0800bb08
 8009ec0:	0800bae0 	.word	0x0800bae0
 8009ec4:	3ff00000 	.word	0x3ff00000
 8009ec8:	40240000 	.word	0x40240000
 8009ecc:	401c0000 	.word	0x401c0000
 8009ed0:	40140000 	.word	0x40140000
 8009ed4:	3fe00000 	.word	0x3fe00000
 8009ed8:	4baf      	ldr	r3, [pc, #700]	; (800a198 <_dtoa_r+0x920>)
 8009eda:	f7f6 fb95 	bl	8000608 <__aeabi_dmul>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460f      	mov	r7, r1
 8009ee2:	e7ac      	b.n	8009e3e <_dtoa_r+0x5c6>
 8009ee4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ee8:	9d00      	ldr	r5, [sp, #0]
 8009eea:	4642      	mov	r2, r8
 8009eec:	464b      	mov	r3, r9
 8009eee:	4630      	mov	r0, r6
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	f7f6 fcb3 	bl	800085c <__aeabi_ddiv>
 8009ef6:	f7f6 fe37 	bl	8000b68 <__aeabi_d2iz>
 8009efa:	9002      	str	r0, [sp, #8]
 8009efc:	f7f6 fb1a 	bl	8000534 <__aeabi_i2d>
 8009f00:	4642      	mov	r2, r8
 8009f02:	464b      	mov	r3, r9
 8009f04:	f7f6 fb80 	bl	8000608 <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	4639      	mov	r1, r7
 8009f10:	f7f6 f9c2 	bl	8000298 <__aeabi_dsub>
 8009f14:	9e02      	ldr	r6, [sp, #8]
 8009f16:	9f01      	ldr	r7, [sp, #4]
 8009f18:	3630      	adds	r6, #48	; 0x30
 8009f1a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f1e:	9e00      	ldr	r6, [sp, #0]
 8009f20:	1bae      	subs	r6, r5, r6
 8009f22:	42b7      	cmp	r7, r6
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	d137      	bne.n	8009f9a <_dtoa_r+0x722>
 8009f2a:	f7f6 f9b7 	bl	800029c <__adddf3>
 8009f2e:	4642      	mov	r2, r8
 8009f30:	464b      	mov	r3, r9
 8009f32:	4606      	mov	r6, r0
 8009f34:	460f      	mov	r7, r1
 8009f36:	f7f6 fdf7 	bl	8000b28 <__aeabi_dcmpgt>
 8009f3a:	b9c8      	cbnz	r0, 8009f70 <_dtoa_r+0x6f8>
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	464b      	mov	r3, r9
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f48:	b110      	cbz	r0, 8009f50 <_dtoa_r+0x6d8>
 8009f4a:	9b02      	ldr	r3, [sp, #8]
 8009f4c:	07d9      	lsls	r1, r3, #31
 8009f4e:	d40f      	bmi.n	8009f70 <_dtoa_r+0x6f8>
 8009f50:	4620      	mov	r0, r4
 8009f52:	4659      	mov	r1, fp
 8009f54:	f000 fac8 	bl	800a4e8 <_Bfree>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	702b      	strb	r3, [r5, #0]
 8009f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f5e:	f10a 0001 	add.w	r0, sl, #1
 8009f62:	6018      	str	r0, [r3, #0]
 8009f64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f43f acd8 	beq.w	800991c <_dtoa_r+0xa4>
 8009f6c:	601d      	str	r5, [r3, #0]
 8009f6e:	e4d5      	b.n	800991c <_dtoa_r+0xa4>
 8009f70:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f74:	462b      	mov	r3, r5
 8009f76:	461d      	mov	r5, r3
 8009f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f7c:	2a39      	cmp	r2, #57	; 0x39
 8009f7e:	d108      	bne.n	8009f92 <_dtoa_r+0x71a>
 8009f80:	9a00      	ldr	r2, [sp, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d1f7      	bne.n	8009f76 <_dtoa_r+0x6fe>
 8009f86:	9a07      	ldr	r2, [sp, #28]
 8009f88:	9900      	ldr	r1, [sp, #0]
 8009f8a:	3201      	adds	r2, #1
 8009f8c:	9207      	str	r2, [sp, #28]
 8009f8e:	2230      	movs	r2, #48	; 0x30
 8009f90:	700a      	strb	r2, [r1, #0]
 8009f92:	781a      	ldrb	r2, [r3, #0]
 8009f94:	3201      	adds	r2, #1
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	e78c      	b.n	8009eb4 <_dtoa_r+0x63c>
 8009f9a:	4b7f      	ldr	r3, [pc, #508]	; (800a198 <_dtoa_r+0x920>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f7f6 fb33 	bl	8000608 <__aeabi_dmul>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460f      	mov	r7, r1
 8009faa:	f7f6 fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d09b      	beq.n	8009eea <_dtoa_r+0x672>
 8009fb2:	e7cd      	b.n	8009f50 <_dtoa_r+0x6d8>
 8009fb4:	9a08      	ldr	r2, [sp, #32]
 8009fb6:	2a00      	cmp	r2, #0
 8009fb8:	f000 80c4 	beq.w	800a144 <_dtoa_r+0x8cc>
 8009fbc:	9a05      	ldr	r2, [sp, #20]
 8009fbe:	2a01      	cmp	r2, #1
 8009fc0:	f300 80a8 	bgt.w	800a114 <_dtoa_r+0x89c>
 8009fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	f000 80a0 	beq.w	800a10c <_dtoa_r+0x894>
 8009fcc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fd0:	9e06      	ldr	r6, [sp, #24]
 8009fd2:	4645      	mov	r5, r8
 8009fd4:	9a04      	ldr	r2, [sp, #16]
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	441a      	add	r2, r3
 8009fda:	4620      	mov	r0, r4
 8009fdc:	4498      	add	r8, r3
 8009fde:	9204      	str	r2, [sp, #16]
 8009fe0:	f000 fb3e 	bl	800a660 <__i2b>
 8009fe4:	4607      	mov	r7, r0
 8009fe6:	2d00      	cmp	r5, #0
 8009fe8:	dd0b      	ble.n	800a002 <_dtoa_r+0x78a>
 8009fea:	9b04      	ldr	r3, [sp, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd08      	ble.n	800a002 <_dtoa_r+0x78a>
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	9a04      	ldr	r2, [sp, #16]
 8009ff4:	bfa8      	it	ge
 8009ff6:	462b      	movge	r3, r5
 8009ff8:	eba8 0803 	sub.w	r8, r8, r3
 8009ffc:	1aed      	subs	r5, r5, r3
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	9b06      	ldr	r3, [sp, #24]
 800a004:	b1fb      	cbz	r3, 800a046 <_dtoa_r+0x7ce>
 800a006:	9b08      	ldr	r3, [sp, #32]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 809f 	beq.w	800a14c <_dtoa_r+0x8d4>
 800a00e:	2e00      	cmp	r6, #0
 800a010:	dd11      	ble.n	800a036 <_dtoa_r+0x7be>
 800a012:	4639      	mov	r1, r7
 800a014:	4632      	mov	r2, r6
 800a016:	4620      	mov	r0, r4
 800a018:	f000 fbde 	bl	800a7d8 <__pow5mult>
 800a01c:	465a      	mov	r2, fp
 800a01e:	4601      	mov	r1, r0
 800a020:	4607      	mov	r7, r0
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fb32 	bl	800a68c <__multiply>
 800a028:	4659      	mov	r1, fp
 800a02a:	9007      	str	r0, [sp, #28]
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fa5b 	bl	800a4e8 <_Bfree>
 800a032:	9b07      	ldr	r3, [sp, #28]
 800a034:	469b      	mov	fp, r3
 800a036:	9b06      	ldr	r3, [sp, #24]
 800a038:	1b9a      	subs	r2, r3, r6
 800a03a:	d004      	beq.n	800a046 <_dtoa_r+0x7ce>
 800a03c:	4659      	mov	r1, fp
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 fbca 	bl	800a7d8 <__pow5mult>
 800a044:	4683      	mov	fp, r0
 800a046:	2101      	movs	r1, #1
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fb09 	bl	800a660 <__i2b>
 800a04e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a050:	2b00      	cmp	r3, #0
 800a052:	4606      	mov	r6, r0
 800a054:	dd7c      	ble.n	800a150 <_dtoa_r+0x8d8>
 800a056:	461a      	mov	r2, r3
 800a058:	4601      	mov	r1, r0
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fbbc 	bl	800a7d8 <__pow5mult>
 800a060:	9b05      	ldr	r3, [sp, #20]
 800a062:	2b01      	cmp	r3, #1
 800a064:	4606      	mov	r6, r0
 800a066:	dd76      	ble.n	800a156 <_dtoa_r+0x8de>
 800a068:	2300      	movs	r3, #0
 800a06a:	9306      	str	r3, [sp, #24]
 800a06c:	6933      	ldr	r3, [r6, #16]
 800a06e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a072:	6918      	ldr	r0, [r3, #16]
 800a074:	f000 faa4 	bl	800a5c0 <__hi0bits>
 800a078:	f1c0 0020 	rsb	r0, r0, #32
 800a07c:	9b04      	ldr	r3, [sp, #16]
 800a07e:	4418      	add	r0, r3
 800a080:	f010 001f 	ands.w	r0, r0, #31
 800a084:	f000 8086 	beq.w	800a194 <_dtoa_r+0x91c>
 800a088:	f1c0 0320 	rsb	r3, r0, #32
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	dd7f      	ble.n	800a190 <_dtoa_r+0x918>
 800a090:	f1c0 001c 	rsb	r0, r0, #28
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	4403      	add	r3, r0
 800a098:	4480      	add	r8, r0
 800a09a:	4405      	add	r5, r0
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	f1b8 0f00 	cmp.w	r8, #0
 800a0a2:	dd05      	ble.n	800a0b0 <_dtoa_r+0x838>
 800a0a4:	4659      	mov	r1, fp
 800a0a6:	4642      	mov	r2, r8
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 fbef 	bl	800a88c <__lshift>
 800a0ae:	4683      	mov	fp, r0
 800a0b0:	9b04      	ldr	r3, [sp, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd05      	ble.n	800a0c2 <_dtoa_r+0x84a>
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 fbe6 	bl	800a88c <__lshift>
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d069      	beq.n	800a19c <_dtoa_r+0x924>
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4658      	mov	r0, fp
 800a0cc:	f000 fc4a 	bl	800a964 <__mcmp>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	da63      	bge.n	800a19c <_dtoa_r+0x924>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4659      	mov	r1, fp
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 fa26 	bl	800a52c <__multadd>
 800a0e0:	9b08      	ldr	r3, [sp, #32]
 800a0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0e6:	4683      	mov	fp, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 818f 	beq.w	800a40c <_dtoa_r+0xb94>
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f000 fa19 	bl	800a52c <__multadd>
 800a0fa:	f1b9 0f00 	cmp.w	r9, #0
 800a0fe:	4607      	mov	r7, r0
 800a100:	f300 808e 	bgt.w	800a220 <_dtoa_r+0x9a8>
 800a104:	9b05      	ldr	r3, [sp, #20]
 800a106:	2b02      	cmp	r3, #2
 800a108:	dc50      	bgt.n	800a1ac <_dtoa_r+0x934>
 800a10a:	e089      	b.n	800a220 <_dtoa_r+0x9a8>
 800a10c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a10e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a112:	e75d      	b.n	8009fd0 <_dtoa_r+0x758>
 800a114:	9b01      	ldr	r3, [sp, #4]
 800a116:	1e5e      	subs	r6, r3, #1
 800a118:	9b06      	ldr	r3, [sp, #24]
 800a11a:	42b3      	cmp	r3, r6
 800a11c:	bfbf      	itttt	lt
 800a11e:	9b06      	ldrlt	r3, [sp, #24]
 800a120:	9606      	strlt	r6, [sp, #24]
 800a122:	1af2      	sublt	r2, r6, r3
 800a124:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a126:	bfb6      	itet	lt
 800a128:	189b      	addlt	r3, r3, r2
 800a12a:	1b9e      	subge	r6, r3, r6
 800a12c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	bfb8      	it	lt
 800a132:	2600      	movlt	r6, #0
 800a134:	2b00      	cmp	r3, #0
 800a136:	bfb5      	itete	lt
 800a138:	eba8 0503 	sublt.w	r5, r8, r3
 800a13c:	9b01      	ldrge	r3, [sp, #4]
 800a13e:	2300      	movlt	r3, #0
 800a140:	4645      	movge	r5, r8
 800a142:	e747      	b.n	8009fd4 <_dtoa_r+0x75c>
 800a144:	9e06      	ldr	r6, [sp, #24]
 800a146:	9f08      	ldr	r7, [sp, #32]
 800a148:	4645      	mov	r5, r8
 800a14a:	e74c      	b.n	8009fe6 <_dtoa_r+0x76e>
 800a14c:	9a06      	ldr	r2, [sp, #24]
 800a14e:	e775      	b.n	800a03c <_dtoa_r+0x7c4>
 800a150:	9b05      	ldr	r3, [sp, #20]
 800a152:	2b01      	cmp	r3, #1
 800a154:	dc18      	bgt.n	800a188 <_dtoa_r+0x910>
 800a156:	9b02      	ldr	r3, [sp, #8]
 800a158:	b9b3      	cbnz	r3, 800a188 <_dtoa_r+0x910>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a160:	b9a3      	cbnz	r3, 800a18c <_dtoa_r+0x914>
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a168:	0d1b      	lsrs	r3, r3, #20
 800a16a:	051b      	lsls	r3, r3, #20
 800a16c:	b12b      	cbz	r3, 800a17a <_dtoa_r+0x902>
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	3301      	adds	r3, #1
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	f108 0801 	add.w	r8, r8, #1
 800a178:	2301      	movs	r3, #1
 800a17a:	9306      	str	r3, [sp, #24]
 800a17c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f47f af74 	bne.w	800a06c <_dtoa_r+0x7f4>
 800a184:	2001      	movs	r0, #1
 800a186:	e779      	b.n	800a07c <_dtoa_r+0x804>
 800a188:	2300      	movs	r3, #0
 800a18a:	e7f6      	b.n	800a17a <_dtoa_r+0x902>
 800a18c:	9b02      	ldr	r3, [sp, #8]
 800a18e:	e7f4      	b.n	800a17a <_dtoa_r+0x902>
 800a190:	d085      	beq.n	800a09e <_dtoa_r+0x826>
 800a192:	4618      	mov	r0, r3
 800a194:	301c      	adds	r0, #28
 800a196:	e77d      	b.n	800a094 <_dtoa_r+0x81c>
 800a198:	40240000 	.word	0x40240000
 800a19c:	9b01      	ldr	r3, [sp, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	dc38      	bgt.n	800a214 <_dtoa_r+0x99c>
 800a1a2:	9b05      	ldr	r3, [sp, #20]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	dd35      	ble.n	800a214 <_dtoa_r+0x99c>
 800a1a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a1ac:	f1b9 0f00 	cmp.w	r9, #0
 800a1b0:	d10d      	bne.n	800a1ce <_dtoa_r+0x956>
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	464b      	mov	r3, r9
 800a1b6:	2205      	movs	r2, #5
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 f9b7 	bl	800a52c <__multadd>
 800a1be:	4601      	mov	r1, r0
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	4658      	mov	r0, fp
 800a1c4:	f000 fbce 	bl	800a964 <__mcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	f73f adbd 	bgt.w	8009d48 <_dtoa_r+0x4d0>
 800a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d0:	9d00      	ldr	r5, [sp, #0]
 800a1d2:	ea6f 0a03 	mvn.w	sl, r3
 800a1d6:	f04f 0800 	mov.w	r8, #0
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f000 f983 	bl	800a4e8 <_Bfree>
 800a1e2:	2f00      	cmp	r7, #0
 800a1e4:	f43f aeb4 	beq.w	8009f50 <_dtoa_r+0x6d8>
 800a1e8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ec:	d005      	beq.n	800a1fa <_dtoa_r+0x982>
 800a1ee:	45b8      	cmp	r8, r7
 800a1f0:	d003      	beq.n	800a1fa <_dtoa_r+0x982>
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 f977 	bl	800a4e8 <_Bfree>
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 f973 	bl	800a4e8 <_Bfree>
 800a202:	e6a5      	b.n	8009f50 <_dtoa_r+0x6d8>
 800a204:	2600      	movs	r6, #0
 800a206:	4637      	mov	r7, r6
 800a208:	e7e1      	b.n	800a1ce <_dtoa_r+0x956>
 800a20a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a20c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a210:	4637      	mov	r7, r6
 800a212:	e599      	b.n	8009d48 <_dtoa_r+0x4d0>
 800a214:	9b08      	ldr	r3, [sp, #32]
 800a216:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80fd 	beq.w	800a41a <_dtoa_r+0xba2>
 800a220:	2d00      	cmp	r5, #0
 800a222:	dd05      	ble.n	800a230 <_dtoa_r+0x9b8>
 800a224:	4639      	mov	r1, r7
 800a226:	462a      	mov	r2, r5
 800a228:	4620      	mov	r0, r4
 800a22a:	f000 fb2f 	bl	800a88c <__lshift>
 800a22e:	4607      	mov	r7, r0
 800a230:	9b06      	ldr	r3, [sp, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d05c      	beq.n	800a2f0 <_dtoa_r+0xa78>
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 f915 	bl	800a468 <_Balloc>
 800a23e:	4605      	mov	r5, r0
 800a240:	b928      	cbnz	r0, 800a24e <_dtoa_r+0x9d6>
 800a242:	4b80      	ldr	r3, [pc, #512]	; (800a444 <_dtoa_r+0xbcc>)
 800a244:	4602      	mov	r2, r0
 800a246:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a24a:	f7ff bb2e 	b.w	80098aa <_dtoa_r+0x32>
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	3202      	adds	r2, #2
 800a252:	0092      	lsls	r2, r2, #2
 800a254:	f107 010c 	add.w	r1, r7, #12
 800a258:	300c      	adds	r0, #12
 800a25a:	f7fe fe01 	bl	8008e60 <memcpy>
 800a25e:	2201      	movs	r2, #1
 800a260:	4629      	mov	r1, r5
 800a262:	4620      	mov	r0, r4
 800a264:	f000 fb12 	bl	800a88c <__lshift>
 800a268:	9b00      	ldr	r3, [sp, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	9b00      	ldr	r3, [sp, #0]
 800a270:	444b      	add	r3, r9
 800a272:	9307      	str	r3, [sp, #28]
 800a274:	9b02      	ldr	r3, [sp, #8]
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	46b8      	mov	r8, r7
 800a27c:	9306      	str	r3, [sp, #24]
 800a27e:	4607      	mov	r7, r0
 800a280:	9b01      	ldr	r3, [sp, #4]
 800a282:	4631      	mov	r1, r6
 800a284:	3b01      	subs	r3, #1
 800a286:	4658      	mov	r0, fp
 800a288:	9302      	str	r3, [sp, #8]
 800a28a:	f7ff fa69 	bl	8009760 <quorem>
 800a28e:	4603      	mov	r3, r0
 800a290:	3330      	adds	r3, #48	; 0x30
 800a292:	9004      	str	r0, [sp, #16]
 800a294:	4641      	mov	r1, r8
 800a296:	4658      	mov	r0, fp
 800a298:	9308      	str	r3, [sp, #32]
 800a29a:	f000 fb63 	bl	800a964 <__mcmp>
 800a29e:	463a      	mov	r2, r7
 800a2a0:	4681      	mov	r9, r0
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fb79 	bl	800a99c <__mdiff>
 800a2aa:	68c2      	ldr	r2, [r0, #12]
 800a2ac:	9b08      	ldr	r3, [sp, #32]
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	bb02      	cbnz	r2, 800a2f4 <_dtoa_r+0xa7c>
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	4658      	mov	r0, fp
 800a2b6:	f000 fb55 	bl	800a964 <__mcmp>
 800a2ba:	9b08      	ldr	r3, [sp, #32]
 800a2bc:	4602      	mov	r2, r0
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a2c6:	f000 f90f 	bl	800a4e8 <_Bfree>
 800a2ca:	9b05      	ldr	r3, [sp, #20]
 800a2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ce:	9d01      	ldr	r5, [sp, #4]
 800a2d0:	ea43 0102 	orr.w	r1, r3, r2
 800a2d4:	9b06      	ldr	r3, [sp, #24]
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	9b08      	ldr	r3, [sp, #32]
 800a2da:	d10d      	bne.n	800a2f8 <_dtoa_r+0xa80>
 800a2dc:	2b39      	cmp	r3, #57	; 0x39
 800a2de:	d029      	beq.n	800a334 <_dtoa_r+0xabc>
 800a2e0:	f1b9 0f00 	cmp.w	r9, #0
 800a2e4:	dd01      	ble.n	800a2ea <_dtoa_r+0xa72>
 800a2e6:	9b04      	ldr	r3, [sp, #16]
 800a2e8:	3331      	adds	r3, #49	; 0x31
 800a2ea:	9a02      	ldr	r2, [sp, #8]
 800a2ec:	7013      	strb	r3, [r2, #0]
 800a2ee:	e774      	b.n	800a1da <_dtoa_r+0x962>
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	e7b9      	b.n	800a268 <_dtoa_r+0x9f0>
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	e7e2      	b.n	800a2be <_dtoa_r+0xa46>
 800a2f8:	f1b9 0f00 	cmp.w	r9, #0
 800a2fc:	db06      	blt.n	800a30c <_dtoa_r+0xa94>
 800a2fe:	9905      	ldr	r1, [sp, #20]
 800a300:	ea41 0909 	orr.w	r9, r1, r9
 800a304:	9906      	ldr	r1, [sp, #24]
 800a306:	ea59 0101 	orrs.w	r1, r9, r1
 800a30a:	d120      	bne.n	800a34e <_dtoa_r+0xad6>
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	ddec      	ble.n	800a2ea <_dtoa_r+0xa72>
 800a310:	4659      	mov	r1, fp
 800a312:	2201      	movs	r2, #1
 800a314:	4620      	mov	r0, r4
 800a316:	9301      	str	r3, [sp, #4]
 800a318:	f000 fab8 	bl	800a88c <__lshift>
 800a31c:	4631      	mov	r1, r6
 800a31e:	4683      	mov	fp, r0
 800a320:	f000 fb20 	bl	800a964 <__mcmp>
 800a324:	2800      	cmp	r0, #0
 800a326:	9b01      	ldr	r3, [sp, #4]
 800a328:	dc02      	bgt.n	800a330 <_dtoa_r+0xab8>
 800a32a:	d1de      	bne.n	800a2ea <_dtoa_r+0xa72>
 800a32c:	07da      	lsls	r2, r3, #31
 800a32e:	d5dc      	bpl.n	800a2ea <_dtoa_r+0xa72>
 800a330:	2b39      	cmp	r3, #57	; 0x39
 800a332:	d1d8      	bne.n	800a2e6 <_dtoa_r+0xa6e>
 800a334:	9a02      	ldr	r2, [sp, #8]
 800a336:	2339      	movs	r3, #57	; 0x39
 800a338:	7013      	strb	r3, [r2, #0]
 800a33a:	462b      	mov	r3, r5
 800a33c:	461d      	mov	r5, r3
 800a33e:	3b01      	subs	r3, #1
 800a340:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a344:	2a39      	cmp	r2, #57	; 0x39
 800a346:	d050      	beq.n	800a3ea <_dtoa_r+0xb72>
 800a348:	3201      	adds	r2, #1
 800a34a:	701a      	strb	r2, [r3, #0]
 800a34c:	e745      	b.n	800a1da <_dtoa_r+0x962>
 800a34e:	2a00      	cmp	r2, #0
 800a350:	dd03      	ble.n	800a35a <_dtoa_r+0xae2>
 800a352:	2b39      	cmp	r3, #57	; 0x39
 800a354:	d0ee      	beq.n	800a334 <_dtoa_r+0xabc>
 800a356:	3301      	adds	r3, #1
 800a358:	e7c7      	b.n	800a2ea <_dtoa_r+0xa72>
 800a35a:	9a01      	ldr	r2, [sp, #4]
 800a35c:	9907      	ldr	r1, [sp, #28]
 800a35e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a362:	428a      	cmp	r2, r1
 800a364:	d02a      	beq.n	800a3bc <_dtoa_r+0xb44>
 800a366:	4659      	mov	r1, fp
 800a368:	2300      	movs	r3, #0
 800a36a:	220a      	movs	r2, #10
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f8dd 	bl	800a52c <__multadd>
 800a372:	45b8      	cmp	r8, r7
 800a374:	4683      	mov	fp, r0
 800a376:	f04f 0300 	mov.w	r3, #0
 800a37a:	f04f 020a 	mov.w	r2, #10
 800a37e:	4641      	mov	r1, r8
 800a380:	4620      	mov	r0, r4
 800a382:	d107      	bne.n	800a394 <_dtoa_r+0xb1c>
 800a384:	f000 f8d2 	bl	800a52c <__multadd>
 800a388:	4680      	mov	r8, r0
 800a38a:	4607      	mov	r7, r0
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	3301      	adds	r3, #1
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	e775      	b.n	800a280 <_dtoa_r+0xa08>
 800a394:	f000 f8ca 	bl	800a52c <__multadd>
 800a398:	4639      	mov	r1, r7
 800a39a:	4680      	mov	r8, r0
 800a39c:	2300      	movs	r3, #0
 800a39e:	220a      	movs	r2, #10
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 f8c3 	bl	800a52c <__multadd>
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	e7f0      	b.n	800a38c <_dtoa_r+0xb14>
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	9a00      	ldr	r2, [sp, #0]
 800a3b0:	bfcc      	ite	gt
 800a3b2:	464d      	movgt	r5, r9
 800a3b4:	2501      	movle	r5, #1
 800a3b6:	4415      	add	r5, r2
 800a3b8:	f04f 0800 	mov.w	r8, #0
 800a3bc:	4659      	mov	r1, fp
 800a3be:	2201      	movs	r2, #1
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	f000 fa62 	bl	800a88c <__lshift>
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4683      	mov	fp, r0
 800a3cc:	f000 faca 	bl	800a964 <__mcmp>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	dcb2      	bgt.n	800a33a <_dtoa_r+0xac2>
 800a3d4:	d102      	bne.n	800a3dc <_dtoa_r+0xb64>
 800a3d6:	9b01      	ldr	r3, [sp, #4]
 800a3d8:	07db      	lsls	r3, r3, #31
 800a3da:	d4ae      	bmi.n	800a33a <_dtoa_r+0xac2>
 800a3dc:	462b      	mov	r3, r5
 800a3de:	461d      	mov	r5, r3
 800a3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3e4:	2a30      	cmp	r2, #48	; 0x30
 800a3e6:	d0fa      	beq.n	800a3de <_dtoa_r+0xb66>
 800a3e8:	e6f7      	b.n	800a1da <_dtoa_r+0x962>
 800a3ea:	9a00      	ldr	r2, [sp, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d1a5      	bne.n	800a33c <_dtoa_r+0xac4>
 800a3f0:	f10a 0a01 	add.w	sl, sl, #1
 800a3f4:	2331      	movs	r3, #49	; 0x31
 800a3f6:	e779      	b.n	800a2ec <_dtoa_r+0xa74>
 800a3f8:	4b13      	ldr	r3, [pc, #76]	; (800a448 <_dtoa_r+0xbd0>)
 800a3fa:	f7ff baaf 	b.w	800995c <_dtoa_r+0xe4>
 800a3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a400:	2b00      	cmp	r3, #0
 800a402:	f47f aa86 	bne.w	8009912 <_dtoa_r+0x9a>
 800a406:	4b11      	ldr	r3, [pc, #68]	; (800a44c <_dtoa_r+0xbd4>)
 800a408:	f7ff baa8 	b.w	800995c <_dtoa_r+0xe4>
 800a40c:	f1b9 0f00 	cmp.w	r9, #0
 800a410:	dc03      	bgt.n	800a41a <_dtoa_r+0xba2>
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	2b02      	cmp	r3, #2
 800a416:	f73f aec9 	bgt.w	800a1ac <_dtoa_r+0x934>
 800a41a:	9d00      	ldr	r5, [sp, #0]
 800a41c:	4631      	mov	r1, r6
 800a41e:	4658      	mov	r0, fp
 800a420:	f7ff f99e 	bl	8009760 <quorem>
 800a424:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a428:	f805 3b01 	strb.w	r3, [r5], #1
 800a42c:	9a00      	ldr	r2, [sp, #0]
 800a42e:	1aaa      	subs	r2, r5, r2
 800a430:	4591      	cmp	r9, r2
 800a432:	ddba      	ble.n	800a3aa <_dtoa_r+0xb32>
 800a434:	4659      	mov	r1, fp
 800a436:	2300      	movs	r3, #0
 800a438:	220a      	movs	r2, #10
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 f876 	bl	800a52c <__multadd>
 800a440:	4683      	mov	fp, r0
 800a442:	e7eb      	b.n	800a41c <_dtoa_r+0xba4>
 800a444:	0800ba6b 	.word	0x0800ba6b
 800a448:	0800b9c4 	.word	0x0800b9c4
 800a44c:	0800b9e8 	.word	0x0800b9e8

0800a450 <_localeconv_r>:
 800a450:	4800      	ldr	r0, [pc, #0]	; (800a454 <_localeconv_r+0x4>)
 800a452:	4770      	bx	lr
 800a454:	20000174 	.word	0x20000174

0800a458 <malloc>:
 800a458:	4b02      	ldr	r3, [pc, #8]	; (800a464 <malloc+0xc>)
 800a45a:	4601      	mov	r1, r0
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	f000 bbe1 	b.w	800ac24 <_malloc_r>
 800a462:	bf00      	nop
 800a464:	20000020 	.word	0x20000020

0800a468 <_Balloc>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a46c:	4604      	mov	r4, r0
 800a46e:	460d      	mov	r5, r1
 800a470:	b976      	cbnz	r6, 800a490 <_Balloc+0x28>
 800a472:	2010      	movs	r0, #16
 800a474:	f7ff fff0 	bl	800a458 <malloc>
 800a478:	4602      	mov	r2, r0
 800a47a:	6260      	str	r0, [r4, #36]	; 0x24
 800a47c:	b920      	cbnz	r0, 800a488 <_Balloc+0x20>
 800a47e:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <_Balloc+0x78>)
 800a480:	4818      	ldr	r0, [pc, #96]	; (800a4e4 <_Balloc+0x7c>)
 800a482:	2166      	movs	r1, #102	; 0x66
 800a484:	f000 fc38 	bl	800acf8 <__assert_func>
 800a488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a48c:	6006      	str	r6, [r0, #0]
 800a48e:	60c6      	str	r6, [r0, #12]
 800a490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a492:	68f3      	ldr	r3, [r6, #12]
 800a494:	b183      	cbz	r3, 800a4b8 <_Balloc+0x50>
 800a496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a49e:	b9b8      	cbnz	r0, 800a4d0 <_Balloc+0x68>
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a4a6:	1d72      	adds	r2, r6, #5
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 fb5a 	bl	800ab64 <_calloc_r>
 800a4b0:	b160      	cbz	r0, 800a4cc <_Balloc+0x64>
 800a4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4b6:	e00e      	b.n	800a4d6 <_Balloc+0x6e>
 800a4b8:	2221      	movs	r2, #33	; 0x21
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 fb51 	bl	800ab64 <_calloc_r>
 800a4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c4:	60f0      	str	r0, [r6, #12]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e4      	bne.n	800a496 <_Balloc+0x2e>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	6802      	ldr	r2, [r0, #0]
 800a4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4dc:	e7f7      	b.n	800a4ce <_Balloc+0x66>
 800a4de:	bf00      	nop
 800a4e0:	0800b9f5 	.word	0x0800b9f5
 800a4e4:	0800ba7c 	.word	0x0800ba7c

0800a4e8 <_Bfree>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	b976      	cbnz	r6, 800a510 <_Bfree+0x28>
 800a4f2:	2010      	movs	r0, #16
 800a4f4:	f7ff ffb0 	bl	800a458 <malloc>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	6268      	str	r0, [r5, #36]	; 0x24
 800a4fc:	b920      	cbnz	r0, 800a508 <_Bfree+0x20>
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <_Bfree+0x3c>)
 800a500:	4809      	ldr	r0, [pc, #36]	; (800a528 <_Bfree+0x40>)
 800a502:	218a      	movs	r1, #138	; 0x8a
 800a504:	f000 fbf8 	bl	800acf8 <__assert_func>
 800a508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a50c:	6006      	str	r6, [r0, #0]
 800a50e:	60c6      	str	r6, [r0, #12]
 800a510:	b13c      	cbz	r4, 800a522 <_Bfree+0x3a>
 800a512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a514:	6862      	ldr	r2, [r4, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a51c:	6021      	str	r1, [r4, #0]
 800a51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	0800b9f5 	.word	0x0800b9f5
 800a528:	0800ba7c 	.word	0x0800ba7c

0800a52c <__multadd>:
 800a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a530:	690e      	ldr	r6, [r1, #16]
 800a532:	4607      	mov	r7, r0
 800a534:	4698      	mov	r8, r3
 800a536:	460c      	mov	r4, r1
 800a538:	f101 0014 	add.w	r0, r1, #20
 800a53c:	2300      	movs	r3, #0
 800a53e:	6805      	ldr	r5, [r0, #0]
 800a540:	b2a9      	uxth	r1, r5
 800a542:	fb02 8101 	mla	r1, r2, r1, r8
 800a546:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a54a:	0c2d      	lsrs	r5, r5, #16
 800a54c:	fb02 c505 	mla	r5, r2, r5, ip
 800a550:	b289      	uxth	r1, r1
 800a552:	3301      	adds	r3, #1
 800a554:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a558:	429e      	cmp	r6, r3
 800a55a:	f840 1b04 	str.w	r1, [r0], #4
 800a55e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a562:	dcec      	bgt.n	800a53e <__multadd+0x12>
 800a564:	f1b8 0f00 	cmp.w	r8, #0
 800a568:	d022      	beq.n	800a5b0 <__multadd+0x84>
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	42b3      	cmp	r3, r6
 800a56e:	dc19      	bgt.n	800a5a4 <__multadd+0x78>
 800a570:	6861      	ldr	r1, [r4, #4]
 800a572:	4638      	mov	r0, r7
 800a574:	3101      	adds	r1, #1
 800a576:	f7ff ff77 	bl	800a468 <_Balloc>
 800a57a:	4605      	mov	r5, r0
 800a57c:	b928      	cbnz	r0, 800a58a <__multadd+0x5e>
 800a57e:	4602      	mov	r2, r0
 800a580:	4b0d      	ldr	r3, [pc, #52]	; (800a5b8 <__multadd+0x8c>)
 800a582:	480e      	ldr	r0, [pc, #56]	; (800a5bc <__multadd+0x90>)
 800a584:	21b5      	movs	r1, #181	; 0xb5
 800a586:	f000 fbb7 	bl	800acf8 <__assert_func>
 800a58a:	6922      	ldr	r2, [r4, #16]
 800a58c:	3202      	adds	r2, #2
 800a58e:	f104 010c 	add.w	r1, r4, #12
 800a592:	0092      	lsls	r2, r2, #2
 800a594:	300c      	adds	r0, #12
 800a596:	f7fe fc63 	bl	8008e60 <memcpy>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff ffa3 	bl	800a4e8 <_Bfree>
 800a5a2:	462c      	mov	r4, r5
 800a5a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a5a8:	3601      	adds	r6, #1
 800a5aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800a5ae:	6126      	str	r6, [r4, #16]
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b6:	bf00      	nop
 800a5b8:	0800ba6b 	.word	0x0800ba6b
 800a5bc:	0800ba7c 	.word	0x0800ba7c

0800a5c0 <__hi0bits>:
 800a5c0:	0c03      	lsrs	r3, r0, #16
 800a5c2:	041b      	lsls	r3, r3, #16
 800a5c4:	b9d3      	cbnz	r3, 800a5fc <__hi0bits+0x3c>
 800a5c6:	0400      	lsls	r0, r0, #16
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5ce:	bf04      	itt	eq
 800a5d0:	0200      	lsleq	r0, r0, #8
 800a5d2:	3308      	addeq	r3, #8
 800a5d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5d8:	bf04      	itt	eq
 800a5da:	0100      	lsleq	r0, r0, #4
 800a5dc:	3304      	addeq	r3, #4
 800a5de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5e2:	bf04      	itt	eq
 800a5e4:	0080      	lsleq	r0, r0, #2
 800a5e6:	3302      	addeq	r3, #2
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	db05      	blt.n	800a5f8 <__hi0bits+0x38>
 800a5ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5f0:	f103 0301 	add.w	r3, r3, #1
 800a5f4:	bf08      	it	eq
 800a5f6:	2320      	moveq	r3, #32
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	4770      	bx	lr
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e7e4      	b.n	800a5ca <__hi0bits+0xa>

0800a600 <__lo0bits>:
 800a600:	6803      	ldr	r3, [r0, #0]
 800a602:	f013 0207 	ands.w	r2, r3, #7
 800a606:	4601      	mov	r1, r0
 800a608:	d00b      	beq.n	800a622 <__lo0bits+0x22>
 800a60a:	07da      	lsls	r2, r3, #31
 800a60c:	d424      	bmi.n	800a658 <__lo0bits+0x58>
 800a60e:	0798      	lsls	r0, r3, #30
 800a610:	bf49      	itett	mi
 800a612:	085b      	lsrmi	r3, r3, #1
 800a614:	089b      	lsrpl	r3, r3, #2
 800a616:	2001      	movmi	r0, #1
 800a618:	600b      	strmi	r3, [r1, #0]
 800a61a:	bf5c      	itt	pl
 800a61c:	600b      	strpl	r3, [r1, #0]
 800a61e:	2002      	movpl	r0, #2
 800a620:	4770      	bx	lr
 800a622:	b298      	uxth	r0, r3
 800a624:	b9b0      	cbnz	r0, 800a654 <__lo0bits+0x54>
 800a626:	0c1b      	lsrs	r3, r3, #16
 800a628:	2010      	movs	r0, #16
 800a62a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a62e:	bf04      	itt	eq
 800a630:	0a1b      	lsreq	r3, r3, #8
 800a632:	3008      	addeq	r0, #8
 800a634:	071a      	lsls	r2, r3, #28
 800a636:	bf04      	itt	eq
 800a638:	091b      	lsreq	r3, r3, #4
 800a63a:	3004      	addeq	r0, #4
 800a63c:	079a      	lsls	r2, r3, #30
 800a63e:	bf04      	itt	eq
 800a640:	089b      	lsreq	r3, r3, #2
 800a642:	3002      	addeq	r0, #2
 800a644:	07da      	lsls	r2, r3, #31
 800a646:	d403      	bmi.n	800a650 <__lo0bits+0x50>
 800a648:	085b      	lsrs	r3, r3, #1
 800a64a:	f100 0001 	add.w	r0, r0, #1
 800a64e:	d005      	beq.n	800a65c <__lo0bits+0x5c>
 800a650:	600b      	str	r3, [r1, #0]
 800a652:	4770      	bx	lr
 800a654:	4610      	mov	r0, r2
 800a656:	e7e8      	b.n	800a62a <__lo0bits+0x2a>
 800a658:	2000      	movs	r0, #0
 800a65a:	4770      	bx	lr
 800a65c:	2020      	movs	r0, #32
 800a65e:	4770      	bx	lr

0800a660 <__i2b>:
 800a660:	b510      	push	{r4, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	2101      	movs	r1, #1
 800a666:	f7ff feff 	bl	800a468 <_Balloc>
 800a66a:	4602      	mov	r2, r0
 800a66c:	b928      	cbnz	r0, 800a67a <__i2b+0x1a>
 800a66e:	4b05      	ldr	r3, [pc, #20]	; (800a684 <__i2b+0x24>)
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <__i2b+0x28>)
 800a672:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a676:	f000 fb3f 	bl	800acf8 <__assert_func>
 800a67a:	2301      	movs	r3, #1
 800a67c:	6144      	str	r4, [r0, #20]
 800a67e:	6103      	str	r3, [r0, #16]
 800a680:	bd10      	pop	{r4, pc}
 800a682:	bf00      	nop
 800a684:	0800ba6b 	.word	0x0800ba6b
 800a688:	0800ba7c 	.word	0x0800ba7c

0800a68c <__multiply>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	4614      	mov	r4, r2
 800a692:	690a      	ldr	r2, [r1, #16]
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	429a      	cmp	r2, r3
 800a698:	bfb8      	it	lt
 800a69a:	460b      	movlt	r3, r1
 800a69c:	460d      	mov	r5, r1
 800a69e:	bfbc      	itt	lt
 800a6a0:	4625      	movlt	r5, r4
 800a6a2:	461c      	movlt	r4, r3
 800a6a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a6a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a6ac:	68ab      	ldr	r3, [r5, #8]
 800a6ae:	6869      	ldr	r1, [r5, #4]
 800a6b0:	eb0a 0709 	add.w	r7, sl, r9
 800a6b4:	42bb      	cmp	r3, r7
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	bfb8      	it	lt
 800a6ba:	3101      	addlt	r1, #1
 800a6bc:	f7ff fed4 	bl	800a468 <_Balloc>
 800a6c0:	b930      	cbnz	r0, 800a6d0 <__multiply+0x44>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	4b42      	ldr	r3, [pc, #264]	; (800a7d0 <__multiply+0x144>)
 800a6c6:	4843      	ldr	r0, [pc, #268]	; (800a7d4 <__multiply+0x148>)
 800a6c8:	f240 115d 	movw	r1, #349	; 0x15d
 800a6cc:	f000 fb14 	bl	800acf8 <__assert_func>
 800a6d0:	f100 0614 	add.w	r6, r0, #20
 800a6d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a6d8:	4633      	mov	r3, r6
 800a6da:	2200      	movs	r2, #0
 800a6dc:	4543      	cmp	r3, r8
 800a6de:	d31e      	bcc.n	800a71e <__multiply+0x92>
 800a6e0:	f105 0c14 	add.w	ip, r5, #20
 800a6e4:	f104 0314 	add.w	r3, r4, #20
 800a6e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a6ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a6f0:	9202      	str	r2, [sp, #8]
 800a6f2:	ebac 0205 	sub.w	r2, ip, r5
 800a6f6:	3a15      	subs	r2, #21
 800a6f8:	f022 0203 	bic.w	r2, r2, #3
 800a6fc:	3204      	adds	r2, #4
 800a6fe:	f105 0115 	add.w	r1, r5, #21
 800a702:	458c      	cmp	ip, r1
 800a704:	bf38      	it	cc
 800a706:	2204      	movcc	r2, #4
 800a708:	9201      	str	r2, [sp, #4]
 800a70a:	9a02      	ldr	r2, [sp, #8]
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d808      	bhi.n	800a724 <__multiply+0x98>
 800a712:	2f00      	cmp	r7, #0
 800a714:	dc55      	bgt.n	800a7c2 <__multiply+0x136>
 800a716:	6107      	str	r7, [r0, #16]
 800a718:	b005      	add	sp, #20
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	f843 2b04 	str.w	r2, [r3], #4
 800a722:	e7db      	b.n	800a6dc <__multiply+0x50>
 800a724:	f8b3 a000 	ldrh.w	sl, [r3]
 800a728:	f1ba 0f00 	cmp.w	sl, #0
 800a72c:	d020      	beq.n	800a770 <__multiply+0xe4>
 800a72e:	f105 0e14 	add.w	lr, r5, #20
 800a732:	46b1      	mov	r9, r6
 800a734:	2200      	movs	r2, #0
 800a736:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a73a:	f8d9 b000 	ldr.w	fp, [r9]
 800a73e:	b2a1      	uxth	r1, r4
 800a740:	fa1f fb8b 	uxth.w	fp, fp
 800a744:	fb0a b101 	mla	r1, sl, r1, fp
 800a748:	4411      	add	r1, r2
 800a74a:	f8d9 2000 	ldr.w	r2, [r9]
 800a74e:	0c24      	lsrs	r4, r4, #16
 800a750:	0c12      	lsrs	r2, r2, #16
 800a752:	fb0a 2404 	mla	r4, sl, r4, r2
 800a756:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a75a:	b289      	uxth	r1, r1
 800a75c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a760:	45f4      	cmp	ip, lr
 800a762:	f849 1b04 	str.w	r1, [r9], #4
 800a766:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a76a:	d8e4      	bhi.n	800a736 <__multiply+0xaa>
 800a76c:	9901      	ldr	r1, [sp, #4]
 800a76e:	5072      	str	r2, [r6, r1]
 800a770:	9a03      	ldr	r2, [sp, #12]
 800a772:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a776:	3304      	adds	r3, #4
 800a778:	f1b9 0f00 	cmp.w	r9, #0
 800a77c:	d01f      	beq.n	800a7be <__multiply+0x132>
 800a77e:	6834      	ldr	r4, [r6, #0]
 800a780:	f105 0114 	add.w	r1, r5, #20
 800a784:	46b6      	mov	lr, r6
 800a786:	f04f 0a00 	mov.w	sl, #0
 800a78a:	880a      	ldrh	r2, [r1, #0]
 800a78c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a790:	fb09 b202 	mla	r2, r9, r2, fp
 800a794:	4492      	add	sl, r2
 800a796:	b2a4      	uxth	r4, r4
 800a798:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a79c:	f84e 4b04 	str.w	r4, [lr], #4
 800a7a0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a7a4:	f8be 2000 	ldrh.w	r2, [lr]
 800a7a8:	0c24      	lsrs	r4, r4, #16
 800a7aa:	fb09 2404 	mla	r4, r9, r4, r2
 800a7ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a7b2:	458c      	cmp	ip, r1
 800a7b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a7b8:	d8e7      	bhi.n	800a78a <__multiply+0xfe>
 800a7ba:	9a01      	ldr	r2, [sp, #4]
 800a7bc:	50b4      	str	r4, [r6, r2]
 800a7be:	3604      	adds	r6, #4
 800a7c0:	e7a3      	b.n	800a70a <__multiply+0x7e>
 800a7c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1a5      	bne.n	800a716 <__multiply+0x8a>
 800a7ca:	3f01      	subs	r7, #1
 800a7cc:	e7a1      	b.n	800a712 <__multiply+0x86>
 800a7ce:	bf00      	nop
 800a7d0:	0800ba6b 	.word	0x0800ba6b
 800a7d4:	0800ba7c 	.word	0x0800ba7c

0800a7d8 <__pow5mult>:
 800a7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7dc:	4615      	mov	r5, r2
 800a7de:	f012 0203 	ands.w	r2, r2, #3
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	d007      	beq.n	800a7f8 <__pow5mult+0x20>
 800a7e8:	4c25      	ldr	r4, [pc, #148]	; (800a880 <__pow5mult+0xa8>)
 800a7ea:	3a01      	subs	r2, #1
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7f2:	f7ff fe9b 	bl	800a52c <__multadd>
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	10ad      	asrs	r5, r5, #2
 800a7fa:	d03d      	beq.n	800a878 <__pow5mult+0xa0>
 800a7fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7fe:	b97c      	cbnz	r4, 800a820 <__pow5mult+0x48>
 800a800:	2010      	movs	r0, #16
 800a802:	f7ff fe29 	bl	800a458 <malloc>
 800a806:	4602      	mov	r2, r0
 800a808:	6270      	str	r0, [r6, #36]	; 0x24
 800a80a:	b928      	cbnz	r0, 800a818 <__pow5mult+0x40>
 800a80c:	4b1d      	ldr	r3, [pc, #116]	; (800a884 <__pow5mult+0xac>)
 800a80e:	481e      	ldr	r0, [pc, #120]	; (800a888 <__pow5mult+0xb0>)
 800a810:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a814:	f000 fa70 	bl	800acf8 <__assert_func>
 800a818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a81c:	6004      	str	r4, [r0, #0]
 800a81e:	60c4      	str	r4, [r0, #12]
 800a820:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a828:	b94c      	cbnz	r4, 800a83e <__pow5mult+0x66>
 800a82a:	f240 2171 	movw	r1, #625	; 0x271
 800a82e:	4630      	mov	r0, r6
 800a830:	f7ff ff16 	bl	800a660 <__i2b>
 800a834:	2300      	movs	r3, #0
 800a836:	f8c8 0008 	str.w	r0, [r8, #8]
 800a83a:	4604      	mov	r4, r0
 800a83c:	6003      	str	r3, [r0, #0]
 800a83e:	f04f 0900 	mov.w	r9, #0
 800a842:	07eb      	lsls	r3, r5, #31
 800a844:	d50a      	bpl.n	800a85c <__pow5mult+0x84>
 800a846:	4639      	mov	r1, r7
 800a848:	4622      	mov	r2, r4
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7ff ff1e 	bl	800a68c <__multiply>
 800a850:	4639      	mov	r1, r7
 800a852:	4680      	mov	r8, r0
 800a854:	4630      	mov	r0, r6
 800a856:	f7ff fe47 	bl	800a4e8 <_Bfree>
 800a85a:	4647      	mov	r7, r8
 800a85c:	106d      	asrs	r5, r5, #1
 800a85e:	d00b      	beq.n	800a878 <__pow5mult+0xa0>
 800a860:	6820      	ldr	r0, [r4, #0]
 800a862:	b938      	cbnz	r0, 800a874 <__pow5mult+0x9c>
 800a864:	4622      	mov	r2, r4
 800a866:	4621      	mov	r1, r4
 800a868:	4630      	mov	r0, r6
 800a86a:	f7ff ff0f 	bl	800a68c <__multiply>
 800a86e:	6020      	str	r0, [r4, #0]
 800a870:	f8c0 9000 	str.w	r9, [r0]
 800a874:	4604      	mov	r4, r0
 800a876:	e7e4      	b.n	800a842 <__pow5mult+0x6a>
 800a878:	4638      	mov	r0, r7
 800a87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a87e:	bf00      	nop
 800a880:	0800bbd0 	.word	0x0800bbd0
 800a884:	0800b9f5 	.word	0x0800b9f5
 800a888:	0800ba7c 	.word	0x0800ba7c

0800a88c <__lshift>:
 800a88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a890:	460c      	mov	r4, r1
 800a892:	6849      	ldr	r1, [r1, #4]
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	4607      	mov	r7, r0
 800a89e:	4691      	mov	r9, r2
 800a8a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8a4:	f108 0601 	add.w	r6, r8, #1
 800a8a8:	42b3      	cmp	r3, r6
 800a8aa:	db0b      	blt.n	800a8c4 <__lshift+0x38>
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	f7ff fddb 	bl	800a468 <_Balloc>
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	b948      	cbnz	r0, 800a8ca <__lshift+0x3e>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b28      	ldr	r3, [pc, #160]	; (800a95c <__lshift+0xd0>)
 800a8ba:	4829      	ldr	r0, [pc, #164]	; (800a960 <__lshift+0xd4>)
 800a8bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8c0:	f000 fa1a 	bl	800acf8 <__assert_func>
 800a8c4:	3101      	adds	r1, #1
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	e7ee      	b.n	800a8a8 <__lshift+0x1c>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f100 0114 	add.w	r1, r0, #20
 800a8d0:	f100 0210 	add.w	r2, r0, #16
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	4553      	cmp	r3, sl
 800a8d8:	db33      	blt.n	800a942 <__lshift+0xb6>
 800a8da:	6920      	ldr	r0, [r4, #16]
 800a8dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8e0:	f104 0314 	add.w	r3, r4, #20
 800a8e4:	f019 091f 	ands.w	r9, r9, #31
 800a8e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8f0:	d02b      	beq.n	800a94a <__lshift+0xbe>
 800a8f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a8f6:	468a      	mov	sl, r1
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	fa00 f009 	lsl.w	r0, r0, r9
 800a900:	4302      	orrs	r2, r0
 800a902:	f84a 2b04 	str.w	r2, [sl], #4
 800a906:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90a:	459c      	cmp	ip, r3
 800a90c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a910:	d8f3      	bhi.n	800a8fa <__lshift+0x6e>
 800a912:	ebac 0304 	sub.w	r3, ip, r4
 800a916:	3b15      	subs	r3, #21
 800a918:	f023 0303 	bic.w	r3, r3, #3
 800a91c:	3304      	adds	r3, #4
 800a91e:	f104 0015 	add.w	r0, r4, #21
 800a922:	4584      	cmp	ip, r0
 800a924:	bf38      	it	cc
 800a926:	2304      	movcc	r3, #4
 800a928:	50ca      	str	r2, [r1, r3]
 800a92a:	b10a      	cbz	r2, 800a930 <__lshift+0xa4>
 800a92c:	f108 0602 	add.w	r6, r8, #2
 800a930:	3e01      	subs	r6, #1
 800a932:	4638      	mov	r0, r7
 800a934:	612e      	str	r6, [r5, #16]
 800a936:	4621      	mov	r1, r4
 800a938:	f7ff fdd6 	bl	800a4e8 <_Bfree>
 800a93c:	4628      	mov	r0, r5
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	f842 0f04 	str.w	r0, [r2, #4]!
 800a946:	3301      	adds	r3, #1
 800a948:	e7c5      	b.n	800a8d6 <__lshift+0x4a>
 800a94a:	3904      	subs	r1, #4
 800a94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a950:	f841 2f04 	str.w	r2, [r1, #4]!
 800a954:	459c      	cmp	ip, r3
 800a956:	d8f9      	bhi.n	800a94c <__lshift+0xc0>
 800a958:	e7ea      	b.n	800a930 <__lshift+0xa4>
 800a95a:	bf00      	nop
 800a95c:	0800ba6b 	.word	0x0800ba6b
 800a960:	0800ba7c 	.word	0x0800ba7c

0800a964 <__mcmp>:
 800a964:	b530      	push	{r4, r5, lr}
 800a966:	6902      	ldr	r2, [r0, #16]
 800a968:	690c      	ldr	r4, [r1, #16]
 800a96a:	1b12      	subs	r2, r2, r4
 800a96c:	d10e      	bne.n	800a98c <__mcmp+0x28>
 800a96e:	f100 0314 	add.w	r3, r0, #20
 800a972:	3114      	adds	r1, #20
 800a974:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a978:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a97c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a980:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a984:	42a5      	cmp	r5, r4
 800a986:	d003      	beq.n	800a990 <__mcmp+0x2c>
 800a988:	d305      	bcc.n	800a996 <__mcmp+0x32>
 800a98a:	2201      	movs	r2, #1
 800a98c:	4610      	mov	r0, r2
 800a98e:	bd30      	pop	{r4, r5, pc}
 800a990:	4283      	cmp	r3, r0
 800a992:	d3f3      	bcc.n	800a97c <__mcmp+0x18>
 800a994:	e7fa      	b.n	800a98c <__mcmp+0x28>
 800a996:	f04f 32ff 	mov.w	r2, #4294967295
 800a99a:	e7f7      	b.n	800a98c <__mcmp+0x28>

0800a99c <__mdiff>:
 800a99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	4617      	mov	r7, r2
 800a9aa:	f7ff ffdb 	bl	800a964 <__mcmp>
 800a9ae:	1e05      	subs	r5, r0, #0
 800a9b0:	d110      	bne.n	800a9d4 <__mdiff+0x38>
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff fd57 	bl	800a468 <_Balloc>
 800a9ba:	b930      	cbnz	r0, 800a9ca <__mdiff+0x2e>
 800a9bc:	4b39      	ldr	r3, [pc, #228]	; (800aaa4 <__mdiff+0x108>)
 800a9be:	4602      	mov	r2, r0
 800a9c0:	f240 2132 	movw	r1, #562	; 0x232
 800a9c4:	4838      	ldr	r0, [pc, #224]	; (800aaa8 <__mdiff+0x10c>)
 800a9c6:	f000 f997 	bl	800acf8 <__assert_func>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d4:	bfa4      	itt	ge
 800a9d6:	463b      	movge	r3, r7
 800a9d8:	4627      	movge	r7, r4
 800a9da:	4630      	mov	r0, r6
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	bfa6      	itte	ge
 800a9e0:	461c      	movge	r4, r3
 800a9e2:	2500      	movge	r5, #0
 800a9e4:	2501      	movlt	r5, #1
 800a9e6:	f7ff fd3f 	bl	800a468 <_Balloc>
 800a9ea:	b920      	cbnz	r0, 800a9f6 <__mdiff+0x5a>
 800a9ec:	4b2d      	ldr	r3, [pc, #180]	; (800aaa4 <__mdiff+0x108>)
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9f4:	e7e6      	b.n	800a9c4 <__mdiff+0x28>
 800a9f6:	693e      	ldr	r6, [r7, #16]
 800a9f8:	60c5      	str	r5, [r0, #12]
 800a9fa:	6925      	ldr	r5, [r4, #16]
 800a9fc:	f107 0114 	add.w	r1, r7, #20
 800aa00:	f104 0914 	add.w	r9, r4, #20
 800aa04:	f100 0e14 	add.w	lr, r0, #20
 800aa08:	f107 0210 	add.w	r2, r7, #16
 800aa0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aa10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aa14:	46f2      	mov	sl, lr
 800aa16:	2700      	movs	r7, #0
 800aa18:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa20:	fa1f f883 	uxth.w	r8, r3
 800aa24:	fa17 f78b 	uxtah	r7, r7, fp
 800aa28:	0c1b      	lsrs	r3, r3, #16
 800aa2a:	eba7 0808 	sub.w	r8, r7, r8
 800aa2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa36:	fa1f f888 	uxth.w	r8, r8
 800aa3a:	141f      	asrs	r7, r3, #16
 800aa3c:	454d      	cmp	r5, r9
 800aa3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa42:	f84a 3b04 	str.w	r3, [sl], #4
 800aa46:	d8e7      	bhi.n	800aa18 <__mdiff+0x7c>
 800aa48:	1b2b      	subs	r3, r5, r4
 800aa4a:	3b15      	subs	r3, #21
 800aa4c:	f023 0303 	bic.w	r3, r3, #3
 800aa50:	3304      	adds	r3, #4
 800aa52:	3415      	adds	r4, #21
 800aa54:	42a5      	cmp	r5, r4
 800aa56:	bf38      	it	cc
 800aa58:	2304      	movcc	r3, #4
 800aa5a:	4419      	add	r1, r3
 800aa5c:	4473      	add	r3, lr
 800aa5e:	469e      	mov	lr, r3
 800aa60:	460d      	mov	r5, r1
 800aa62:	4565      	cmp	r5, ip
 800aa64:	d30e      	bcc.n	800aa84 <__mdiff+0xe8>
 800aa66:	f10c 0203 	add.w	r2, ip, #3
 800aa6a:	1a52      	subs	r2, r2, r1
 800aa6c:	f022 0203 	bic.w	r2, r2, #3
 800aa70:	3903      	subs	r1, #3
 800aa72:	458c      	cmp	ip, r1
 800aa74:	bf38      	it	cc
 800aa76:	2200      	movcc	r2, #0
 800aa78:	441a      	add	r2, r3
 800aa7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa7e:	b17b      	cbz	r3, 800aaa0 <__mdiff+0x104>
 800aa80:	6106      	str	r6, [r0, #16]
 800aa82:	e7a5      	b.n	800a9d0 <__mdiff+0x34>
 800aa84:	f855 8b04 	ldr.w	r8, [r5], #4
 800aa88:	fa17 f488 	uxtah	r4, r7, r8
 800aa8c:	1422      	asrs	r2, r4, #16
 800aa8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aa92:	b2a4      	uxth	r4, r4
 800aa94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aa98:	f84e 4b04 	str.w	r4, [lr], #4
 800aa9c:	1417      	asrs	r7, r2, #16
 800aa9e:	e7e0      	b.n	800aa62 <__mdiff+0xc6>
 800aaa0:	3e01      	subs	r6, #1
 800aaa2:	e7ea      	b.n	800aa7a <__mdiff+0xde>
 800aaa4:	0800ba6b 	.word	0x0800ba6b
 800aaa8:	0800ba7c 	.word	0x0800ba7c

0800aaac <__d2b>:
 800aaac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aab0:	4689      	mov	r9, r1
 800aab2:	2101      	movs	r1, #1
 800aab4:	ec57 6b10 	vmov	r6, r7, d0
 800aab8:	4690      	mov	r8, r2
 800aaba:	f7ff fcd5 	bl	800a468 <_Balloc>
 800aabe:	4604      	mov	r4, r0
 800aac0:	b930      	cbnz	r0, 800aad0 <__d2b+0x24>
 800aac2:	4602      	mov	r2, r0
 800aac4:	4b25      	ldr	r3, [pc, #148]	; (800ab5c <__d2b+0xb0>)
 800aac6:	4826      	ldr	r0, [pc, #152]	; (800ab60 <__d2b+0xb4>)
 800aac8:	f240 310a 	movw	r1, #778	; 0x30a
 800aacc:	f000 f914 	bl	800acf8 <__assert_func>
 800aad0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aad4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aad8:	bb35      	cbnz	r5, 800ab28 <__d2b+0x7c>
 800aada:	2e00      	cmp	r6, #0
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	d028      	beq.n	800ab32 <__d2b+0x86>
 800aae0:	4668      	mov	r0, sp
 800aae2:	9600      	str	r6, [sp, #0]
 800aae4:	f7ff fd8c 	bl	800a600 <__lo0bits>
 800aae8:	9900      	ldr	r1, [sp, #0]
 800aaea:	b300      	cbz	r0, 800ab2e <__d2b+0x82>
 800aaec:	9a01      	ldr	r2, [sp, #4]
 800aaee:	f1c0 0320 	rsb	r3, r0, #32
 800aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf6:	430b      	orrs	r3, r1
 800aaf8:	40c2      	lsrs	r2, r0
 800aafa:	6163      	str	r3, [r4, #20]
 800aafc:	9201      	str	r2, [sp, #4]
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	61a3      	str	r3, [r4, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf14      	ite	ne
 800ab06:	2202      	movne	r2, #2
 800ab08:	2201      	moveq	r2, #1
 800ab0a:	6122      	str	r2, [r4, #16]
 800ab0c:	b1d5      	cbz	r5, 800ab44 <__d2b+0x98>
 800ab0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab12:	4405      	add	r5, r0
 800ab14:	f8c9 5000 	str.w	r5, [r9]
 800ab18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab1c:	f8c8 0000 	str.w	r0, [r8]
 800ab20:	4620      	mov	r0, r4
 800ab22:	b003      	add	sp, #12
 800ab24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab2c:	e7d5      	b.n	800aada <__d2b+0x2e>
 800ab2e:	6161      	str	r1, [r4, #20]
 800ab30:	e7e5      	b.n	800aafe <__d2b+0x52>
 800ab32:	a801      	add	r0, sp, #4
 800ab34:	f7ff fd64 	bl	800a600 <__lo0bits>
 800ab38:	9b01      	ldr	r3, [sp, #4]
 800ab3a:	6163      	str	r3, [r4, #20]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	6122      	str	r2, [r4, #16]
 800ab40:	3020      	adds	r0, #32
 800ab42:	e7e3      	b.n	800ab0c <__d2b+0x60>
 800ab44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab4c:	f8c9 0000 	str.w	r0, [r9]
 800ab50:	6918      	ldr	r0, [r3, #16]
 800ab52:	f7ff fd35 	bl	800a5c0 <__hi0bits>
 800ab56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab5a:	e7df      	b.n	800ab1c <__d2b+0x70>
 800ab5c:	0800ba6b 	.word	0x0800ba6b
 800ab60:	0800ba7c 	.word	0x0800ba7c

0800ab64 <_calloc_r>:
 800ab64:	b513      	push	{r0, r1, r4, lr}
 800ab66:	434a      	muls	r2, r1
 800ab68:	4611      	mov	r1, r2
 800ab6a:	9201      	str	r2, [sp, #4]
 800ab6c:	f000 f85a 	bl	800ac24 <_malloc_r>
 800ab70:	4604      	mov	r4, r0
 800ab72:	b118      	cbz	r0, 800ab7c <_calloc_r+0x18>
 800ab74:	9a01      	ldr	r2, [sp, #4]
 800ab76:	2100      	movs	r1, #0
 800ab78:	f7fe f980 	bl	8008e7c <memset>
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	b002      	add	sp, #8
 800ab80:	bd10      	pop	{r4, pc}
	...

0800ab84 <_free_r>:
 800ab84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab86:	2900      	cmp	r1, #0
 800ab88:	d048      	beq.n	800ac1c <_free_r+0x98>
 800ab8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab8e:	9001      	str	r0, [sp, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f1a1 0404 	sub.w	r4, r1, #4
 800ab96:	bfb8      	it	lt
 800ab98:	18e4      	addlt	r4, r4, r3
 800ab9a:	f000 f8ef 	bl	800ad7c <__malloc_lock>
 800ab9e:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <_free_r+0x9c>)
 800aba0:	9801      	ldr	r0, [sp, #4]
 800aba2:	6813      	ldr	r3, [r2, #0]
 800aba4:	4615      	mov	r5, r2
 800aba6:	b933      	cbnz	r3, 800abb6 <_free_r+0x32>
 800aba8:	6063      	str	r3, [r4, #4]
 800abaa:	6014      	str	r4, [r2, #0]
 800abac:	b003      	add	sp, #12
 800abae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abb2:	f000 b8e9 	b.w	800ad88 <__malloc_unlock>
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	d90b      	bls.n	800abd2 <_free_r+0x4e>
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	1862      	adds	r2, r4, r1
 800abbe:	4293      	cmp	r3, r2
 800abc0:	bf04      	itt	eq
 800abc2:	681a      	ldreq	r2, [r3, #0]
 800abc4:	685b      	ldreq	r3, [r3, #4]
 800abc6:	6063      	str	r3, [r4, #4]
 800abc8:	bf04      	itt	eq
 800abca:	1852      	addeq	r2, r2, r1
 800abcc:	6022      	streq	r2, [r4, #0]
 800abce:	602c      	str	r4, [r5, #0]
 800abd0:	e7ec      	b.n	800abac <_free_r+0x28>
 800abd2:	461a      	mov	r2, r3
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	b10b      	cbz	r3, 800abdc <_free_r+0x58>
 800abd8:	42a3      	cmp	r3, r4
 800abda:	d9fa      	bls.n	800abd2 <_free_r+0x4e>
 800abdc:	6811      	ldr	r1, [r2, #0]
 800abde:	1855      	adds	r5, r2, r1
 800abe0:	42a5      	cmp	r5, r4
 800abe2:	d10b      	bne.n	800abfc <_free_r+0x78>
 800abe4:	6824      	ldr	r4, [r4, #0]
 800abe6:	4421      	add	r1, r4
 800abe8:	1854      	adds	r4, r2, r1
 800abea:	42a3      	cmp	r3, r4
 800abec:	6011      	str	r1, [r2, #0]
 800abee:	d1dd      	bne.n	800abac <_free_r+0x28>
 800abf0:	681c      	ldr	r4, [r3, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	6053      	str	r3, [r2, #4]
 800abf6:	4421      	add	r1, r4
 800abf8:	6011      	str	r1, [r2, #0]
 800abfa:	e7d7      	b.n	800abac <_free_r+0x28>
 800abfc:	d902      	bls.n	800ac04 <_free_r+0x80>
 800abfe:	230c      	movs	r3, #12
 800ac00:	6003      	str	r3, [r0, #0]
 800ac02:	e7d3      	b.n	800abac <_free_r+0x28>
 800ac04:	6825      	ldr	r5, [r4, #0]
 800ac06:	1961      	adds	r1, r4, r5
 800ac08:	428b      	cmp	r3, r1
 800ac0a:	bf04      	itt	eq
 800ac0c:	6819      	ldreq	r1, [r3, #0]
 800ac0e:	685b      	ldreq	r3, [r3, #4]
 800ac10:	6063      	str	r3, [r4, #4]
 800ac12:	bf04      	itt	eq
 800ac14:	1949      	addeq	r1, r1, r5
 800ac16:	6021      	streq	r1, [r4, #0]
 800ac18:	6054      	str	r4, [r2, #4]
 800ac1a:	e7c7      	b.n	800abac <_free_r+0x28>
 800ac1c:	b003      	add	sp, #12
 800ac1e:	bd30      	pop	{r4, r5, pc}
 800ac20:	20004b84 	.word	0x20004b84

0800ac24 <_malloc_r>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	1ccd      	adds	r5, r1, #3
 800ac28:	f025 0503 	bic.w	r5, r5, #3
 800ac2c:	3508      	adds	r5, #8
 800ac2e:	2d0c      	cmp	r5, #12
 800ac30:	bf38      	it	cc
 800ac32:	250c      	movcc	r5, #12
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	4606      	mov	r6, r0
 800ac38:	db01      	blt.n	800ac3e <_malloc_r+0x1a>
 800ac3a:	42a9      	cmp	r1, r5
 800ac3c:	d903      	bls.n	800ac46 <_malloc_r+0x22>
 800ac3e:	230c      	movs	r3, #12
 800ac40:	6033      	str	r3, [r6, #0]
 800ac42:	2000      	movs	r0, #0
 800ac44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac46:	f000 f899 	bl	800ad7c <__malloc_lock>
 800ac4a:	4921      	ldr	r1, [pc, #132]	; (800acd0 <_malloc_r+0xac>)
 800ac4c:	680a      	ldr	r2, [r1, #0]
 800ac4e:	4614      	mov	r4, r2
 800ac50:	b99c      	cbnz	r4, 800ac7a <_malloc_r+0x56>
 800ac52:	4f20      	ldr	r7, [pc, #128]	; (800acd4 <_malloc_r+0xb0>)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	b923      	cbnz	r3, 800ac62 <_malloc_r+0x3e>
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 f83c 	bl	800acd8 <_sbrk_r>
 800ac60:	6038      	str	r0, [r7, #0]
 800ac62:	4629      	mov	r1, r5
 800ac64:	4630      	mov	r0, r6
 800ac66:	f000 f837 	bl	800acd8 <_sbrk_r>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d123      	bne.n	800acb6 <_malloc_r+0x92>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	6033      	str	r3, [r6, #0]
 800ac72:	4630      	mov	r0, r6
 800ac74:	f000 f888 	bl	800ad88 <__malloc_unlock>
 800ac78:	e7e3      	b.n	800ac42 <_malloc_r+0x1e>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	1b5b      	subs	r3, r3, r5
 800ac7e:	d417      	bmi.n	800acb0 <_malloc_r+0x8c>
 800ac80:	2b0b      	cmp	r3, #11
 800ac82:	d903      	bls.n	800ac8c <_malloc_r+0x68>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	441c      	add	r4, r3
 800ac88:	6025      	str	r5, [r4, #0]
 800ac8a:	e004      	b.n	800ac96 <_malloc_r+0x72>
 800ac8c:	6863      	ldr	r3, [r4, #4]
 800ac8e:	42a2      	cmp	r2, r4
 800ac90:	bf0c      	ite	eq
 800ac92:	600b      	streq	r3, [r1, #0]
 800ac94:	6053      	strne	r3, [r2, #4]
 800ac96:	4630      	mov	r0, r6
 800ac98:	f000 f876 	bl	800ad88 <__malloc_unlock>
 800ac9c:	f104 000b 	add.w	r0, r4, #11
 800aca0:	1d23      	adds	r3, r4, #4
 800aca2:	f020 0007 	bic.w	r0, r0, #7
 800aca6:	1ac2      	subs	r2, r0, r3
 800aca8:	d0cc      	beq.n	800ac44 <_malloc_r+0x20>
 800acaa:	1a1b      	subs	r3, r3, r0
 800acac:	50a3      	str	r3, [r4, r2]
 800acae:	e7c9      	b.n	800ac44 <_malloc_r+0x20>
 800acb0:	4622      	mov	r2, r4
 800acb2:	6864      	ldr	r4, [r4, #4]
 800acb4:	e7cc      	b.n	800ac50 <_malloc_r+0x2c>
 800acb6:	1cc4      	adds	r4, r0, #3
 800acb8:	f024 0403 	bic.w	r4, r4, #3
 800acbc:	42a0      	cmp	r0, r4
 800acbe:	d0e3      	beq.n	800ac88 <_malloc_r+0x64>
 800acc0:	1a21      	subs	r1, r4, r0
 800acc2:	4630      	mov	r0, r6
 800acc4:	f000 f808 	bl	800acd8 <_sbrk_r>
 800acc8:	3001      	adds	r0, #1
 800acca:	d1dd      	bne.n	800ac88 <_malloc_r+0x64>
 800accc:	e7cf      	b.n	800ac6e <_malloc_r+0x4a>
 800acce:	bf00      	nop
 800acd0:	20004b84 	.word	0x20004b84
 800acd4:	20004b88 	.word	0x20004b88

0800acd8 <_sbrk_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d06      	ldr	r5, [pc, #24]	; (800acf4 <_sbrk_r+0x1c>)
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	f7f8 fb2e 	bl	8003344 <_sbrk>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_sbrk_r+0x1a>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_sbrk_r+0x1a>
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	20004cc8 	.word	0x20004cc8

0800acf8 <__assert_func>:
 800acf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acfa:	4614      	mov	r4, r2
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <__assert_func+0x2c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4605      	mov	r5, r0
 800ad04:	68d8      	ldr	r0, [r3, #12]
 800ad06:	b14c      	cbz	r4, 800ad1c <__assert_func+0x24>
 800ad08:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <__assert_func+0x30>)
 800ad0a:	9100      	str	r1, [sp, #0]
 800ad0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad10:	4906      	ldr	r1, [pc, #24]	; (800ad2c <__assert_func+0x34>)
 800ad12:	462b      	mov	r3, r5
 800ad14:	f000 f80e 	bl	800ad34 <fiprintf>
 800ad18:	f000 fa64 	bl	800b1e4 <abort>
 800ad1c:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <__assert_func+0x38>)
 800ad1e:	461c      	mov	r4, r3
 800ad20:	e7f3      	b.n	800ad0a <__assert_func+0x12>
 800ad22:	bf00      	nop
 800ad24:	20000020 	.word	0x20000020
 800ad28:	0800bbdc 	.word	0x0800bbdc
 800ad2c:	0800bbe9 	.word	0x0800bbe9
 800ad30:	0800bc17 	.word	0x0800bc17

0800ad34 <fiprintf>:
 800ad34:	b40e      	push	{r1, r2, r3}
 800ad36:	b503      	push	{r0, r1, lr}
 800ad38:	4601      	mov	r1, r0
 800ad3a:	ab03      	add	r3, sp, #12
 800ad3c:	4805      	ldr	r0, [pc, #20]	; (800ad54 <fiprintf+0x20>)
 800ad3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad42:	6800      	ldr	r0, [r0, #0]
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	f000 f84f 	bl	800ade8 <_vfiprintf_r>
 800ad4a:	b002      	add	sp, #8
 800ad4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad50:	b003      	add	sp, #12
 800ad52:	4770      	bx	lr
 800ad54:	20000020 	.word	0x20000020

0800ad58 <__ascii_mbtowc>:
 800ad58:	b082      	sub	sp, #8
 800ad5a:	b901      	cbnz	r1, 800ad5e <__ascii_mbtowc+0x6>
 800ad5c:	a901      	add	r1, sp, #4
 800ad5e:	b142      	cbz	r2, 800ad72 <__ascii_mbtowc+0x1a>
 800ad60:	b14b      	cbz	r3, 800ad76 <__ascii_mbtowc+0x1e>
 800ad62:	7813      	ldrb	r3, [r2, #0]
 800ad64:	600b      	str	r3, [r1, #0]
 800ad66:	7812      	ldrb	r2, [r2, #0]
 800ad68:	1e10      	subs	r0, r2, #0
 800ad6a:	bf18      	it	ne
 800ad6c:	2001      	movne	r0, #1
 800ad6e:	b002      	add	sp, #8
 800ad70:	4770      	bx	lr
 800ad72:	4610      	mov	r0, r2
 800ad74:	e7fb      	b.n	800ad6e <__ascii_mbtowc+0x16>
 800ad76:	f06f 0001 	mvn.w	r0, #1
 800ad7a:	e7f8      	b.n	800ad6e <__ascii_mbtowc+0x16>

0800ad7c <__malloc_lock>:
 800ad7c:	4801      	ldr	r0, [pc, #4]	; (800ad84 <__malloc_lock+0x8>)
 800ad7e:	f000 bbf1 	b.w	800b564 <__retarget_lock_acquire_recursive>
 800ad82:	bf00      	nop
 800ad84:	20004cd0 	.word	0x20004cd0

0800ad88 <__malloc_unlock>:
 800ad88:	4801      	ldr	r0, [pc, #4]	; (800ad90 <__malloc_unlock+0x8>)
 800ad8a:	f000 bbec 	b.w	800b566 <__retarget_lock_release_recursive>
 800ad8e:	bf00      	nop
 800ad90:	20004cd0 	.word	0x20004cd0

0800ad94 <__sfputc_r>:
 800ad94:	6893      	ldr	r3, [r2, #8]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	b410      	push	{r4}
 800ad9c:	6093      	str	r3, [r2, #8]
 800ad9e:	da08      	bge.n	800adb2 <__sfputc_r+0x1e>
 800ada0:	6994      	ldr	r4, [r2, #24]
 800ada2:	42a3      	cmp	r3, r4
 800ada4:	db01      	blt.n	800adaa <__sfputc_r+0x16>
 800ada6:	290a      	cmp	r1, #10
 800ada8:	d103      	bne.n	800adb2 <__sfputc_r+0x1e>
 800adaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adae:	f000 b94b 	b.w	800b048 <__swbuf_r>
 800adb2:	6813      	ldr	r3, [r2, #0]
 800adb4:	1c58      	adds	r0, r3, #1
 800adb6:	6010      	str	r0, [r2, #0]
 800adb8:	7019      	strb	r1, [r3, #0]
 800adba:	4608      	mov	r0, r1
 800adbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <__sfputs_r>:
 800adc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc4:	4606      	mov	r6, r0
 800adc6:	460f      	mov	r7, r1
 800adc8:	4614      	mov	r4, r2
 800adca:	18d5      	adds	r5, r2, r3
 800adcc:	42ac      	cmp	r4, r5
 800adce:	d101      	bne.n	800add4 <__sfputs_r+0x12>
 800add0:	2000      	movs	r0, #0
 800add2:	e007      	b.n	800ade4 <__sfputs_r+0x22>
 800add4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add8:	463a      	mov	r2, r7
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ffda 	bl	800ad94 <__sfputc_r>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d1f3      	bne.n	800adcc <__sfputs_r+0xa>
 800ade4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ade8 <_vfiprintf_r>:
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	460d      	mov	r5, r1
 800adee:	b09d      	sub	sp, #116	; 0x74
 800adf0:	4614      	mov	r4, r2
 800adf2:	4698      	mov	r8, r3
 800adf4:	4606      	mov	r6, r0
 800adf6:	b118      	cbz	r0, 800ae00 <_vfiprintf_r+0x18>
 800adf8:	6983      	ldr	r3, [r0, #24]
 800adfa:	b90b      	cbnz	r3, 800ae00 <_vfiprintf_r+0x18>
 800adfc:	f000 fb14 	bl	800b428 <__sinit>
 800ae00:	4b89      	ldr	r3, [pc, #548]	; (800b028 <_vfiprintf_r+0x240>)
 800ae02:	429d      	cmp	r5, r3
 800ae04:	d11b      	bne.n	800ae3e <_vfiprintf_r+0x56>
 800ae06:	6875      	ldr	r5, [r6, #4]
 800ae08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae0a:	07d9      	lsls	r1, r3, #31
 800ae0c:	d405      	bmi.n	800ae1a <_vfiprintf_r+0x32>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	059a      	lsls	r2, r3, #22
 800ae12:	d402      	bmi.n	800ae1a <_vfiprintf_r+0x32>
 800ae14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae16:	f000 fba5 	bl	800b564 <__retarget_lock_acquire_recursive>
 800ae1a:	89ab      	ldrh	r3, [r5, #12]
 800ae1c:	071b      	lsls	r3, r3, #28
 800ae1e:	d501      	bpl.n	800ae24 <_vfiprintf_r+0x3c>
 800ae20:	692b      	ldr	r3, [r5, #16]
 800ae22:	b9eb      	cbnz	r3, 800ae60 <_vfiprintf_r+0x78>
 800ae24:	4629      	mov	r1, r5
 800ae26:	4630      	mov	r0, r6
 800ae28:	f000 f96e 	bl	800b108 <__swsetup_r>
 800ae2c:	b1c0      	cbz	r0, 800ae60 <_vfiprintf_r+0x78>
 800ae2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae30:	07dc      	lsls	r4, r3, #31
 800ae32:	d50e      	bpl.n	800ae52 <_vfiprintf_r+0x6a>
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	b01d      	add	sp, #116	; 0x74
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	4b7b      	ldr	r3, [pc, #492]	; (800b02c <_vfiprintf_r+0x244>)
 800ae40:	429d      	cmp	r5, r3
 800ae42:	d101      	bne.n	800ae48 <_vfiprintf_r+0x60>
 800ae44:	68b5      	ldr	r5, [r6, #8]
 800ae46:	e7df      	b.n	800ae08 <_vfiprintf_r+0x20>
 800ae48:	4b79      	ldr	r3, [pc, #484]	; (800b030 <_vfiprintf_r+0x248>)
 800ae4a:	429d      	cmp	r5, r3
 800ae4c:	bf08      	it	eq
 800ae4e:	68f5      	ldreq	r5, [r6, #12]
 800ae50:	e7da      	b.n	800ae08 <_vfiprintf_r+0x20>
 800ae52:	89ab      	ldrh	r3, [r5, #12]
 800ae54:	0598      	lsls	r0, r3, #22
 800ae56:	d4ed      	bmi.n	800ae34 <_vfiprintf_r+0x4c>
 800ae58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae5a:	f000 fb84 	bl	800b566 <__retarget_lock_release_recursive>
 800ae5e:	e7e9      	b.n	800ae34 <_vfiprintf_r+0x4c>
 800ae60:	2300      	movs	r3, #0
 800ae62:	9309      	str	r3, [sp, #36]	; 0x24
 800ae64:	2320      	movs	r3, #32
 800ae66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae6e:	2330      	movs	r3, #48	; 0x30
 800ae70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b034 <_vfiprintf_r+0x24c>
 800ae74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae78:	f04f 0901 	mov.w	r9, #1
 800ae7c:	4623      	mov	r3, r4
 800ae7e:	469a      	mov	sl, r3
 800ae80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae84:	b10a      	cbz	r2, 800ae8a <_vfiprintf_r+0xa2>
 800ae86:	2a25      	cmp	r2, #37	; 0x25
 800ae88:	d1f9      	bne.n	800ae7e <_vfiprintf_r+0x96>
 800ae8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ae8e:	d00b      	beq.n	800aea8 <_vfiprintf_r+0xc0>
 800ae90:	465b      	mov	r3, fp
 800ae92:	4622      	mov	r2, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff ff93 	bl	800adc2 <__sfputs_r>
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	f000 80aa 	beq.w	800aff6 <_vfiprintf_r+0x20e>
 800aea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea4:	445a      	add	r2, fp
 800aea6:	9209      	str	r2, [sp, #36]	; 0x24
 800aea8:	f89a 3000 	ldrb.w	r3, [sl]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 80a2 	beq.w	800aff6 <_vfiprintf_r+0x20e>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aebc:	f10a 0a01 	add.w	sl, sl, #1
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	9307      	str	r3, [sp, #28]
 800aec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aec8:	931a      	str	r3, [sp, #104]	; 0x68
 800aeca:	4654      	mov	r4, sl
 800aecc:	2205      	movs	r2, #5
 800aece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed2:	4858      	ldr	r0, [pc, #352]	; (800b034 <_vfiprintf_r+0x24c>)
 800aed4:	f7f5 f98c 	bl	80001f0 <memchr>
 800aed8:	9a04      	ldr	r2, [sp, #16]
 800aeda:	b9d8      	cbnz	r0, 800af14 <_vfiprintf_r+0x12c>
 800aedc:	06d1      	lsls	r1, r2, #27
 800aede:	bf44      	itt	mi
 800aee0:	2320      	movmi	r3, #32
 800aee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aee6:	0713      	lsls	r3, r2, #28
 800aee8:	bf44      	itt	mi
 800aeea:	232b      	movmi	r3, #43	; 0x2b
 800aeec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aef0:	f89a 3000 	ldrb.w	r3, [sl]
 800aef4:	2b2a      	cmp	r3, #42	; 0x2a
 800aef6:	d015      	beq.n	800af24 <_vfiprintf_r+0x13c>
 800aef8:	9a07      	ldr	r2, [sp, #28]
 800aefa:	4654      	mov	r4, sl
 800aefc:	2000      	movs	r0, #0
 800aefe:	f04f 0c0a 	mov.w	ip, #10
 800af02:	4621      	mov	r1, r4
 800af04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af08:	3b30      	subs	r3, #48	; 0x30
 800af0a:	2b09      	cmp	r3, #9
 800af0c:	d94e      	bls.n	800afac <_vfiprintf_r+0x1c4>
 800af0e:	b1b0      	cbz	r0, 800af3e <_vfiprintf_r+0x156>
 800af10:	9207      	str	r2, [sp, #28]
 800af12:	e014      	b.n	800af3e <_vfiprintf_r+0x156>
 800af14:	eba0 0308 	sub.w	r3, r0, r8
 800af18:	fa09 f303 	lsl.w	r3, r9, r3
 800af1c:	4313      	orrs	r3, r2
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	46a2      	mov	sl, r4
 800af22:	e7d2      	b.n	800aeca <_vfiprintf_r+0xe2>
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	1d19      	adds	r1, r3, #4
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	9103      	str	r1, [sp, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bfbb      	ittet	lt
 800af30:	425b      	neglt	r3, r3
 800af32:	f042 0202 	orrlt.w	r2, r2, #2
 800af36:	9307      	strge	r3, [sp, #28]
 800af38:	9307      	strlt	r3, [sp, #28]
 800af3a:	bfb8      	it	lt
 800af3c:	9204      	strlt	r2, [sp, #16]
 800af3e:	7823      	ldrb	r3, [r4, #0]
 800af40:	2b2e      	cmp	r3, #46	; 0x2e
 800af42:	d10c      	bne.n	800af5e <_vfiprintf_r+0x176>
 800af44:	7863      	ldrb	r3, [r4, #1]
 800af46:	2b2a      	cmp	r3, #42	; 0x2a
 800af48:	d135      	bne.n	800afb6 <_vfiprintf_r+0x1ce>
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	1d1a      	adds	r2, r3, #4
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	9203      	str	r2, [sp, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	bfb8      	it	lt
 800af56:	f04f 33ff 	movlt.w	r3, #4294967295
 800af5a:	3402      	adds	r4, #2
 800af5c:	9305      	str	r3, [sp, #20]
 800af5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b044 <_vfiprintf_r+0x25c>
 800af62:	7821      	ldrb	r1, [r4, #0]
 800af64:	2203      	movs	r2, #3
 800af66:	4650      	mov	r0, sl
 800af68:	f7f5 f942 	bl	80001f0 <memchr>
 800af6c:	b140      	cbz	r0, 800af80 <_vfiprintf_r+0x198>
 800af6e:	2340      	movs	r3, #64	; 0x40
 800af70:	eba0 000a 	sub.w	r0, r0, sl
 800af74:	fa03 f000 	lsl.w	r0, r3, r0
 800af78:	9b04      	ldr	r3, [sp, #16]
 800af7a:	4303      	orrs	r3, r0
 800af7c:	3401      	adds	r4, #1
 800af7e:	9304      	str	r3, [sp, #16]
 800af80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af84:	482c      	ldr	r0, [pc, #176]	; (800b038 <_vfiprintf_r+0x250>)
 800af86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af8a:	2206      	movs	r2, #6
 800af8c:	f7f5 f930 	bl	80001f0 <memchr>
 800af90:	2800      	cmp	r0, #0
 800af92:	d03f      	beq.n	800b014 <_vfiprintf_r+0x22c>
 800af94:	4b29      	ldr	r3, [pc, #164]	; (800b03c <_vfiprintf_r+0x254>)
 800af96:	bb1b      	cbnz	r3, 800afe0 <_vfiprintf_r+0x1f8>
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	3307      	adds	r3, #7
 800af9c:	f023 0307 	bic.w	r3, r3, #7
 800afa0:	3308      	adds	r3, #8
 800afa2:	9303      	str	r3, [sp, #12]
 800afa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa6:	443b      	add	r3, r7
 800afa8:	9309      	str	r3, [sp, #36]	; 0x24
 800afaa:	e767      	b.n	800ae7c <_vfiprintf_r+0x94>
 800afac:	fb0c 3202 	mla	r2, ip, r2, r3
 800afb0:	460c      	mov	r4, r1
 800afb2:	2001      	movs	r0, #1
 800afb4:	e7a5      	b.n	800af02 <_vfiprintf_r+0x11a>
 800afb6:	2300      	movs	r3, #0
 800afb8:	3401      	adds	r4, #1
 800afba:	9305      	str	r3, [sp, #20]
 800afbc:	4619      	mov	r1, r3
 800afbe:	f04f 0c0a 	mov.w	ip, #10
 800afc2:	4620      	mov	r0, r4
 800afc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afc8:	3a30      	subs	r2, #48	; 0x30
 800afca:	2a09      	cmp	r2, #9
 800afcc:	d903      	bls.n	800afd6 <_vfiprintf_r+0x1ee>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0c5      	beq.n	800af5e <_vfiprintf_r+0x176>
 800afd2:	9105      	str	r1, [sp, #20]
 800afd4:	e7c3      	b.n	800af5e <_vfiprintf_r+0x176>
 800afd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800afda:	4604      	mov	r4, r0
 800afdc:	2301      	movs	r3, #1
 800afde:	e7f0      	b.n	800afc2 <_vfiprintf_r+0x1da>
 800afe0:	ab03      	add	r3, sp, #12
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	462a      	mov	r2, r5
 800afe6:	4b16      	ldr	r3, [pc, #88]	; (800b040 <_vfiprintf_r+0x258>)
 800afe8:	a904      	add	r1, sp, #16
 800afea:	4630      	mov	r0, r6
 800afec:	f7fd ffee 	bl	8008fcc <_printf_float>
 800aff0:	4607      	mov	r7, r0
 800aff2:	1c78      	adds	r0, r7, #1
 800aff4:	d1d6      	bne.n	800afa4 <_vfiprintf_r+0x1bc>
 800aff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aff8:	07d9      	lsls	r1, r3, #31
 800affa:	d405      	bmi.n	800b008 <_vfiprintf_r+0x220>
 800affc:	89ab      	ldrh	r3, [r5, #12]
 800affe:	059a      	lsls	r2, r3, #22
 800b000:	d402      	bmi.n	800b008 <_vfiprintf_r+0x220>
 800b002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b004:	f000 faaf 	bl	800b566 <__retarget_lock_release_recursive>
 800b008:	89ab      	ldrh	r3, [r5, #12]
 800b00a:	065b      	lsls	r3, r3, #25
 800b00c:	f53f af12 	bmi.w	800ae34 <_vfiprintf_r+0x4c>
 800b010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b012:	e711      	b.n	800ae38 <_vfiprintf_r+0x50>
 800b014:	ab03      	add	r3, sp, #12
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	462a      	mov	r2, r5
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <_vfiprintf_r+0x258>)
 800b01c:	a904      	add	r1, sp, #16
 800b01e:	4630      	mov	r0, r6
 800b020:	f7fe fa78 	bl	8009514 <_printf_i>
 800b024:	e7e4      	b.n	800aff0 <_vfiprintf_r+0x208>
 800b026:	bf00      	nop
 800b028:	0800bd54 	.word	0x0800bd54
 800b02c:	0800bd74 	.word	0x0800bd74
 800b030:	0800bd34 	.word	0x0800bd34
 800b034:	0800bc22 	.word	0x0800bc22
 800b038:	0800bc2c 	.word	0x0800bc2c
 800b03c:	08008fcd 	.word	0x08008fcd
 800b040:	0800adc3 	.word	0x0800adc3
 800b044:	0800bc28 	.word	0x0800bc28

0800b048 <__swbuf_r>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	460e      	mov	r6, r1
 800b04c:	4614      	mov	r4, r2
 800b04e:	4605      	mov	r5, r0
 800b050:	b118      	cbz	r0, 800b05a <__swbuf_r+0x12>
 800b052:	6983      	ldr	r3, [r0, #24]
 800b054:	b90b      	cbnz	r3, 800b05a <__swbuf_r+0x12>
 800b056:	f000 f9e7 	bl	800b428 <__sinit>
 800b05a:	4b21      	ldr	r3, [pc, #132]	; (800b0e0 <__swbuf_r+0x98>)
 800b05c:	429c      	cmp	r4, r3
 800b05e:	d12b      	bne.n	800b0b8 <__swbuf_r+0x70>
 800b060:	686c      	ldr	r4, [r5, #4]
 800b062:	69a3      	ldr	r3, [r4, #24]
 800b064:	60a3      	str	r3, [r4, #8]
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	071a      	lsls	r2, r3, #28
 800b06a:	d52f      	bpl.n	800b0cc <__swbuf_r+0x84>
 800b06c:	6923      	ldr	r3, [r4, #16]
 800b06e:	b36b      	cbz	r3, 800b0cc <__swbuf_r+0x84>
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	1ac0      	subs	r0, r0, r3
 800b076:	6963      	ldr	r3, [r4, #20]
 800b078:	b2f6      	uxtb	r6, r6
 800b07a:	4283      	cmp	r3, r0
 800b07c:	4637      	mov	r7, r6
 800b07e:	dc04      	bgt.n	800b08a <__swbuf_r+0x42>
 800b080:	4621      	mov	r1, r4
 800b082:	4628      	mov	r0, r5
 800b084:	f000 f93c 	bl	800b300 <_fflush_r>
 800b088:	bb30      	cbnz	r0, 800b0d8 <__swbuf_r+0x90>
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	60a3      	str	r3, [r4, #8]
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	6022      	str	r2, [r4, #0]
 800b096:	701e      	strb	r6, [r3, #0]
 800b098:	6963      	ldr	r3, [r4, #20]
 800b09a:	3001      	adds	r0, #1
 800b09c:	4283      	cmp	r3, r0
 800b09e:	d004      	beq.n	800b0aa <__swbuf_r+0x62>
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	07db      	lsls	r3, r3, #31
 800b0a4:	d506      	bpl.n	800b0b4 <__swbuf_r+0x6c>
 800b0a6:	2e0a      	cmp	r6, #10
 800b0a8:	d104      	bne.n	800b0b4 <__swbuf_r+0x6c>
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f000 f927 	bl	800b300 <_fflush_r>
 800b0b2:	b988      	cbnz	r0, 800b0d8 <__swbuf_r+0x90>
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b8:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <__swbuf_r+0x9c>)
 800b0ba:	429c      	cmp	r4, r3
 800b0bc:	d101      	bne.n	800b0c2 <__swbuf_r+0x7a>
 800b0be:	68ac      	ldr	r4, [r5, #8]
 800b0c0:	e7cf      	b.n	800b062 <__swbuf_r+0x1a>
 800b0c2:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <__swbuf_r+0xa0>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	bf08      	it	eq
 800b0c8:	68ec      	ldreq	r4, [r5, #12]
 800b0ca:	e7ca      	b.n	800b062 <__swbuf_r+0x1a>
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 f81a 	bl	800b108 <__swsetup_r>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d0cb      	beq.n	800b070 <__swbuf_r+0x28>
 800b0d8:	f04f 37ff 	mov.w	r7, #4294967295
 800b0dc:	e7ea      	b.n	800b0b4 <__swbuf_r+0x6c>
 800b0de:	bf00      	nop
 800b0e0:	0800bd54 	.word	0x0800bd54
 800b0e4:	0800bd74 	.word	0x0800bd74
 800b0e8:	0800bd34 	.word	0x0800bd34

0800b0ec <__ascii_wctomb>:
 800b0ec:	b149      	cbz	r1, 800b102 <__ascii_wctomb+0x16>
 800b0ee:	2aff      	cmp	r2, #255	; 0xff
 800b0f0:	bf85      	ittet	hi
 800b0f2:	238a      	movhi	r3, #138	; 0x8a
 800b0f4:	6003      	strhi	r3, [r0, #0]
 800b0f6:	700a      	strbls	r2, [r1, #0]
 800b0f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0fc:	bf98      	it	ls
 800b0fe:	2001      	movls	r0, #1
 800b100:	4770      	bx	lr
 800b102:	4608      	mov	r0, r1
 800b104:	4770      	bx	lr
	...

0800b108 <__swsetup_r>:
 800b108:	4b32      	ldr	r3, [pc, #200]	; (800b1d4 <__swsetup_r+0xcc>)
 800b10a:	b570      	push	{r4, r5, r6, lr}
 800b10c:	681d      	ldr	r5, [r3, #0]
 800b10e:	4606      	mov	r6, r0
 800b110:	460c      	mov	r4, r1
 800b112:	b125      	cbz	r5, 800b11e <__swsetup_r+0x16>
 800b114:	69ab      	ldr	r3, [r5, #24]
 800b116:	b913      	cbnz	r3, 800b11e <__swsetup_r+0x16>
 800b118:	4628      	mov	r0, r5
 800b11a:	f000 f985 	bl	800b428 <__sinit>
 800b11e:	4b2e      	ldr	r3, [pc, #184]	; (800b1d8 <__swsetup_r+0xd0>)
 800b120:	429c      	cmp	r4, r3
 800b122:	d10f      	bne.n	800b144 <__swsetup_r+0x3c>
 800b124:	686c      	ldr	r4, [r5, #4]
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b12c:	0719      	lsls	r1, r3, #28
 800b12e:	d42c      	bmi.n	800b18a <__swsetup_r+0x82>
 800b130:	06dd      	lsls	r5, r3, #27
 800b132:	d411      	bmi.n	800b158 <__swsetup_r+0x50>
 800b134:	2309      	movs	r3, #9
 800b136:	6033      	str	r3, [r6, #0]
 800b138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	f04f 30ff 	mov.w	r0, #4294967295
 800b142:	e03e      	b.n	800b1c2 <__swsetup_r+0xba>
 800b144:	4b25      	ldr	r3, [pc, #148]	; (800b1dc <__swsetup_r+0xd4>)
 800b146:	429c      	cmp	r4, r3
 800b148:	d101      	bne.n	800b14e <__swsetup_r+0x46>
 800b14a:	68ac      	ldr	r4, [r5, #8]
 800b14c:	e7eb      	b.n	800b126 <__swsetup_r+0x1e>
 800b14e:	4b24      	ldr	r3, [pc, #144]	; (800b1e0 <__swsetup_r+0xd8>)
 800b150:	429c      	cmp	r4, r3
 800b152:	bf08      	it	eq
 800b154:	68ec      	ldreq	r4, [r5, #12]
 800b156:	e7e6      	b.n	800b126 <__swsetup_r+0x1e>
 800b158:	0758      	lsls	r0, r3, #29
 800b15a:	d512      	bpl.n	800b182 <__swsetup_r+0x7a>
 800b15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b15e:	b141      	cbz	r1, 800b172 <__swsetup_r+0x6a>
 800b160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b164:	4299      	cmp	r1, r3
 800b166:	d002      	beq.n	800b16e <__swsetup_r+0x66>
 800b168:	4630      	mov	r0, r6
 800b16a:	f7ff fd0b 	bl	800ab84 <_free_r>
 800b16e:	2300      	movs	r3, #0
 800b170:	6363      	str	r3, [r4, #52]	; 0x34
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b178:	81a3      	strh	r3, [r4, #12]
 800b17a:	2300      	movs	r3, #0
 800b17c:	6063      	str	r3, [r4, #4]
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	f043 0308 	orr.w	r3, r3, #8
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	b94b      	cbnz	r3, 800b1a2 <__swsetup_r+0x9a>
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b198:	d003      	beq.n	800b1a2 <__swsetup_r+0x9a>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4630      	mov	r0, r6
 800b19e:	f000 fa07 	bl	800b5b0 <__smakebuf_r>
 800b1a2:	89a0      	ldrh	r0, [r4, #12]
 800b1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1a8:	f010 0301 	ands.w	r3, r0, #1
 800b1ac:	d00a      	beq.n	800b1c4 <__swsetup_r+0xbc>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6963      	ldr	r3, [r4, #20]
 800b1b4:	425b      	negs	r3, r3
 800b1b6:	61a3      	str	r3, [r4, #24]
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	b943      	cbnz	r3, 800b1ce <__swsetup_r+0xc6>
 800b1bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1c0:	d1ba      	bne.n	800b138 <__swsetup_r+0x30>
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	0781      	lsls	r1, r0, #30
 800b1c6:	bf58      	it	pl
 800b1c8:	6963      	ldrpl	r3, [r4, #20]
 800b1ca:	60a3      	str	r3, [r4, #8]
 800b1cc:	e7f4      	b.n	800b1b8 <__swsetup_r+0xb0>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e7f7      	b.n	800b1c2 <__swsetup_r+0xba>
 800b1d2:	bf00      	nop
 800b1d4:	20000020 	.word	0x20000020
 800b1d8:	0800bd54 	.word	0x0800bd54
 800b1dc:	0800bd74 	.word	0x0800bd74
 800b1e0:	0800bd34 	.word	0x0800bd34

0800b1e4 <abort>:
 800b1e4:	b508      	push	{r3, lr}
 800b1e6:	2006      	movs	r0, #6
 800b1e8:	f000 fa4a 	bl	800b680 <raise>
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f7f8 f831 	bl	8003254 <_exit>
	...

0800b1f4 <__sflush_r>:
 800b1f4:	898a      	ldrh	r2, [r1, #12]
 800b1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	0710      	lsls	r0, r2, #28
 800b1fe:	460c      	mov	r4, r1
 800b200:	d458      	bmi.n	800b2b4 <__sflush_r+0xc0>
 800b202:	684b      	ldr	r3, [r1, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	dc05      	bgt.n	800b214 <__sflush_r+0x20>
 800b208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dc02      	bgt.n	800b214 <__sflush_r+0x20>
 800b20e:	2000      	movs	r0, #0
 800b210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b216:	2e00      	cmp	r6, #0
 800b218:	d0f9      	beq.n	800b20e <__sflush_r+0x1a>
 800b21a:	2300      	movs	r3, #0
 800b21c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b220:	682f      	ldr	r7, [r5, #0]
 800b222:	602b      	str	r3, [r5, #0]
 800b224:	d032      	beq.n	800b28c <__sflush_r+0x98>
 800b226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	075a      	lsls	r2, r3, #29
 800b22c:	d505      	bpl.n	800b23a <__sflush_r+0x46>
 800b22e:	6863      	ldr	r3, [r4, #4]
 800b230:	1ac0      	subs	r0, r0, r3
 800b232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b234:	b10b      	cbz	r3, 800b23a <__sflush_r+0x46>
 800b236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b238:	1ac0      	subs	r0, r0, r3
 800b23a:	2300      	movs	r3, #0
 800b23c:	4602      	mov	r2, r0
 800b23e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b240:	6a21      	ldr	r1, [r4, #32]
 800b242:	4628      	mov	r0, r5
 800b244:	47b0      	blx	r6
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	d106      	bne.n	800b25a <__sflush_r+0x66>
 800b24c:	6829      	ldr	r1, [r5, #0]
 800b24e:	291d      	cmp	r1, #29
 800b250:	d82c      	bhi.n	800b2ac <__sflush_r+0xb8>
 800b252:	4a2a      	ldr	r2, [pc, #168]	; (800b2fc <__sflush_r+0x108>)
 800b254:	40ca      	lsrs	r2, r1
 800b256:	07d6      	lsls	r6, r2, #31
 800b258:	d528      	bpl.n	800b2ac <__sflush_r+0xb8>
 800b25a:	2200      	movs	r2, #0
 800b25c:	6062      	str	r2, [r4, #4]
 800b25e:	04d9      	lsls	r1, r3, #19
 800b260:	6922      	ldr	r2, [r4, #16]
 800b262:	6022      	str	r2, [r4, #0]
 800b264:	d504      	bpl.n	800b270 <__sflush_r+0x7c>
 800b266:	1c42      	adds	r2, r0, #1
 800b268:	d101      	bne.n	800b26e <__sflush_r+0x7a>
 800b26a:	682b      	ldr	r3, [r5, #0]
 800b26c:	b903      	cbnz	r3, 800b270 <__sflush_r+0x7c>
 800b26e:	6560      	str	r0, [r4, #84]	; 0x54
 800b270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b272:	602f      	str	r7, [r5, #0]
 800b274:	2900      	cmp	r1, #0
 800b276:	d0ca      	beq.n	800b20e <__sflush_r+0x1a>
 800b278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b27c:	4299      	cmp	r1, r3
 800b27e:	d002      	beq.n	800b286 <__sflush_r+0x92>
 800b280:	4628      	mov	r0, r5
 800b282:	f7ff fc7f 	bl	800ab84 <_free_r>
 800b286:	2000      	movs	r0, #0
 800b288:	6360      	str	r0, [r4, #52]	; 0x34
 800b28a:	e7c1      	b.n	800b210 <__sflush_r+0x1c>
 800b28c:	6a21      	ldr	r1, [r4, #32]
 800b28e:	2301      	movs	r3, #1
 800b290:	4628      	mov	r0, r5
 800b292:	47b0      	blx	r6
 800b294:	1c41      	adds	r1, r0, #1
 800b296:	d1c7      	bne.n	800b228 <__sflush_r+0x34>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0c4      	beq.n	800b228 <__sflush_r+0x34>
 800b29e:	2b1d      	cmp	r3, #29
 800b2a0:	d001      	beq.n	800b2a6 <__sflush_r+0xb2>
 800b2a2:	2b16      	cmp	r3, #22
 800b2a4:	d101      	bne.n	800b2aa <__sflush_r+0xb6>
 800b2a6:	602f      	str	r7, [r5, #0]
 800b2a8:	e7b1      	b.n	800b20e <__sflush_r+0x1a>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	e7ad      	b.n	800b210 <__sflush_r+0x1c>
 800b2b4:	690f      	ldr	r7, [r1, #16]
 800b2b6:	2f00      	cmp	r7, #0
 800b2b8:	d0a9      	beq.n	800b20e <__sflush_r+0x1a>
 800b2ba:	0793      	lsls	r3, r2, #30
 800b2bc:	680e      	ldr	r6, [r1, #0]
 800b2be:	bf08      	it	eq
 800b2c0:	694b      	ldreq	r3, [r1, #20]
 800b2c2:	600f      	str	r7, [r1, #0]
 800b2c4:	bf18      	it	ne
 800b2c6:	2300      	movne	r3, #0
 800b2c8:	eba6 0807 	sub.w	r8, r6, r7
 800b2cc:	608b      	str	r3, [r1, #8]
 800b2ce:	f1b8 0f00 	cmp.w	r8, #0
 800b2d2:	dd9c      	ble.n	800b20e <__sflush_r+0x1a>
 800b2d4:	6a21      	ldr	r1, [r4, #32]
 800b2d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2d8:	4643      	mov	r3, r8
 800b2da:	463a      	mov	r2, r7
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b0      	blx	r6
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	dc06      	bgt.n	800b2f2 <__sflush_r+0xfe>
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ea:	81a3      	strh	r3, [r4, #12]
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e78e      	b.n	800b210 <__sflush_r+0x1c>
 800b2f2:	4407      	add	r7, r0
 800b2f4:	eba8 0800 	sub.w	r8, r8, r0
 800b2f8:	e7e9      	b.n	800b2ce <__sflush_r+0xda>
 800b2fa:	bf00      	nop
 800b2fc:	20400001 	.word	0x20400001

0800b300 <_fflush_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	690b      	ldr	r3, [r1, #16]
 800b304:	4605      	mov	r5, r0
 800b306:	460c      	mov	r4, r1
 800b308:	b913      	cbnz	r3, 800b310 <_fflush_r+0x10>
 800b30a:	2500      	movs	r5, #0
 800b30c:	4628      	mov	r0, r5
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	b118      	cbz	r0, 800b31a <_fflush_r+0x1a>
 800b312:	6983      	ldr	r3, [r0, #24]
 800b314:	b90b      	cbnz	r3, 800b31a <_fflush_r+0x1a>
 800b316:	f000 f887 	bl	800b428 <__sinit>
 800b31a:	4b14      	ldr	r3, [pc, #80]	; (800b36c <_fflush_r+0x6c>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	d11b      	bne.n	800b358 <_fflush_r+0x58>
 800b320:	686c      	ldr	r4, [r5, #4]
 800b322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d0ef      	beq.n	800b30a <_fflush_r+0xa>
 800b32a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b32c:	07d0      	lsls	r0, r2, #31
 800b32e:	d404      	bmi.n	800b33a <_fflush_r+0x3a>
 800b330:	0599      	lsls	r1, r3, #22
 800b332:	d402      	bmi.n	800b33a <_fflush_r+0x3a>
 800b334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b336:	f000 f915 	bl	800b564 <__retarget_lock_acquire_recursive>
 800b33a:	4628      	mov	r0, r5
 800b33c:	4621      	mov	r1, r4
 800b33e:	f7ff ff59 	bl	800b1f4 <__sflush_r>
 800b342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b344:	07da      	lsls	r2, r3, #31
 800b346:	4605      	mov	r5, r0
 800b348:	d4e0      	bmi.n	800b30c <_fflush_r+0xc>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	059b      	lsls	r3, r3, #22
 800b34e:	d4dd      	bmi.n	800b30c <_fflush_r+0xc>
 800b350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b352:	f000 f908 	bl	800b566 <__retarget_lock_release_recursive>
 800b356:	e7d9      	b.n	800b30c <_fflush_r+0xc>
 800b358:	4b05      	ldr	r3, [pc, #20]	; (800b370 <_fflush_r+0x70>)
 800b35a:	429c      	cmp	r4, r3
 800b35c:	d101      	bne.n	800b362 <_fflush_r+0x62>
 800b35e:	68ac      	ldr	r4, [r5, #8]
 800b360:	e7df      	b.n	800b322 <_fflush_r+0x22>
 800b362:	4b04      	ldr	r3, [pc, #16]	; (800b374 <_fflush_r+0x74>)
 800b364:	429c      	cmp	r4, r3
 800b366:	bf08      	it	eq
 800b368:	68ec      	ldreq	r4, [r5, #12]
 800b36a:	e7da      	b.n	800b322 <_fflush_r+0x22>
 800b36c:	0800bd54 	.word	0x0800bd54
 800b370:	0800bd74 	.word	0x0800bd74
 800b374:	0800bd34 	.word	0x0800bd34

0800b378 <std>:
 800b378:	2300      	movs	r3, #0
 800b37a:	b510      	push	{r4, lr}
 800b37c:	4604      	mov	r4, r0
 800b37e:	e9c0 3300 	strd	r3, r3, [r0]
 800b382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b386:	6083      	str	r3, [r0, #8]
 800b388:	8181      	strh	r1, [r0, #12]
 800b38a:	6643      	str	r3, [r0, #100]	; 0x64
 800b38c:	81c2      	strh	r2, [r0, #14]
 800b38e:	6183      	str	r3, [r0, #24]
 800b390:	4619      	mov	r1, r3
 800b392:	2208      	movs	r2, #8
 800b394:	305c      	adds	r0, #92	; 0x5c
 800b396:	f7fd fd71 	bl	8008e7c <memset>
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <std+0x38>)
 800b39c:	6263      	str	r3, [r4, #36]	; 0x24
 800b39e:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <std+0x3c>)
 800b3a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3a2:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <std+0x40>)
 800b3a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <std+0x44>)
 800b3a8:	6224      	str	r4, [r4, #32]
 800b3aa:	6323      	str	r3, [r4, #48]	; 0x30
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800b6b9 	.word	0x0800b6b9
 800b3b4:	0800b6db 	.word	0x0800b6db
 800b3b8:	0800b713 	.word	0x0800b713
 800b3bc:	0800b737 	.word	0x0800b737

0800b3c0 <_cleanup_r>:
 800b3c0:	4901      	ldr	r1, [pc, #4]	; (800b3c8 <_cleanup_r+0x8>)
 800b3c2:	f000 b8af 	b.w	800b524 <_fwalk_reent>
 800b3c6:	bf00      	nop
 800b3c8:	0800b301 	.word	0x0800b301

0800b3cc <__sfmoreglue>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	1e4a      	subs	r2, r1, #1
 800b3d0:	2568      	movs	r5, #104	; 0x68
 800b3d2:	4355      	muls	r5, r2
 800b3d4:	460e      	mov	r6, r1
 800b3d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3da:	f7ff fc23 	bl	800ac24 <_malloc_r>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	b140      	cbz	r0, 800b3f4 <__sfmoreglue+0x28>
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	e9c0 1600 	strd	r1, r6, [r0]
 800b3e8:	300c      	adds	r0, #12
 800b3ea:	60a0      	str	r0, [r4, #8]
 800b3ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3f0:	f7fd fd44 	bl	8008e7c <memset>
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}

0800b3f8 <__sfp_lock_acquire>:
 800b3f8:	4801      	ldr	r0, [pc, #4]	; (800b400 <__sfp_lock_acquire+0x8>)
 800b3fa:	f000 b8b3 	b.w	800b564 <__retarget_lock_acquire_recursive>
 800b3fe:	bf00      	nop
 800b400:	20004cd4 	.word	0x20004cd4

0800b404 <__sfp_lock_release>:
 800b404:	4801      	ldr	r0, [pc, #4]	; (800b40c <__sfp_lock_release+0x8>)
 800b406:	f000 b8ae 	b.w	800b566 <__retarget_lock_release_recursive>
 800b40a:	bf00      	nop
 800b40c:	20004cd4 	.word	0x20004cd4

0800b410 <__sinit_lock_acquire>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__sinit_lock_acquire+0x8>)
 800b412:	f000 b8a7 	b.w	800b564 <__retarget_lock_acquire_recursive>
 800b416:	bf00      	nop
 800b418:	20004ccf 	.word	0x20004ccf

0800b41c <__sinit_lock_release>:
 800b41c:	4801      	ldr	r0, [pc, #4]	; (800b424 <__sinit_lock_release+0x8>)
 800b41e:	f000 b8a2 	b.w	800b566 <__retarget_lock_release_recursive>
 800b422:	bf00      	nop
 800b424:	20004ccf 	.word	0x20004ccf

0800b428 <__sinit>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	4604      	mov	r4, r0
 800b42c:	f7ff fff0 	bl	800b410 <__sinit_lock_acquire>
 800b430:	69a3      	ldr	r3, [r4, #24]
 800b432:	b11b      	cbz	r3, 800b43c <__sinit+0x14>
 800b434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b438:	f7ff bff0 	b.w	800b41c <__sinit_lock_release>
 800b43c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b440:	6523      	str	r3, [r4, #80]	; 0x50
 800b442:	4b13      	ldr	r3, [pc, #76]	; (800b490 <__sinit+0x68>)
 800b444:	4a13      	ldr	r2, [pc, #76]	; (800b494 <__sinit+0x6c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	62a2      	str	r2, [r4, #40]	; 0x28
 800b44a:	42a3      	cmp	r3, r4
 800b44c:	bf04      	itt	eq
 800b44e:	2301      	moveq	r3, #1
 800b450:	61a3      	streq	r3, [r4, #24]
 800b452:	4620      	mov	r0, r4
 800b454:	f000 f820 	bl	800b498 <__sfp>
 800b458:	6060      	str	r0, [r4, #4]
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 f81c 	bl	800b498 <__sfp>
 800b460:	60a0      	str	r0, [r4, #8]
 800b462:	4620      	mov	r0, r4
 800b464:	f000 f818 	bl	800b498 <__sfp>
 800b468:	2200      	movs	r2, #0
 800b46a:	60e0      	str	r0, [r4, #12]
 800b46c:	2104      	movs	r1, #4
 800b46e:	6860      	ldr	r0, [r4, #4]
 800b470:	f7ff ff82 	bl	800b378 <std>
 800b474:	68a0      	ldr	r0, [r4, #8]
 800b476:	2201      	movs	r2, #1
 800b478:	2109      	movs	r1, #9
 800b47a:	f7ff ff7d 	bl	800b378 <std>
 800b47e:	68e0      	ldr	r0, [r4, #12]
 800b480:	2202      	movs	r2, #2
 800b482:	2112      	movs	r1, #18
 800b484:	f7ff ff78 	bl	800b378 <std>
 800b488:	2301      	movs	r3, #1
 800b48a:	61a3      	str	r3, [r4, #24]
 800b48c:	e7d2      	b.n	800b434 <__sinit+0xc>
 800b48e:	bf00      	nop
 800b490:	0800b9b0 	.word	0x0800b9b0
 800b494:	0800b3c1 	.word	0x0800b3c1

0800b498 <__sfp>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	4607      	mov	r7, r0
 800b49c:	f7ff ffac 	bl	800b3f8 <__sfp_lock_acquire>
 800b4a0:	4b1e      	ldr	r3, [pc, #120]	; (800b51c <__sfp+0x84>)
 800b4a2:	681e      	ldr	r6, [r3, #0]
 800b4a4:	69b3      	ldr	r3, [r6, #24]
 800b4a6:	b913      	cbnz	r3, 800b4ae <__sfp+0x16>
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f7ff ffbd 	bl	800b428 <__sinit>
 800b4ae:	3648      	adds	r6, #72	; 0x48
 800b4b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	d503      	bpl.n	800b4c0 <__sfp+0x28>
 800b4b8:	6833      	ldr	r3, [r6, #0]
 800b4ba:	b30b      	cbz	r3, 800b500 <__sfp+0x68>
 800b4bc:	6836      	ldr	r6, [r6, #0]
 800b4be:	e7f7      	b.n	800b4b0 <__sfp+0x18>
 800b4c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4c4:	b9d5      	cbnz	r5, 800b4fc <__sfp+0x64>
 800b4c6:	4b16      	ldr	r3, [pc, #88]	; (800b520 <__sfp+0x88>)
 800b4c8:	60e3      	str	r3, [r4, #12]
 800b4ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4ce:	6665      	str	r5, [r4, #100]	; 0x64
 800b4d0:	f000 f847 	bl	800b562 <__retarget_lock_init_recursive>
 800b4d4:	f7ff ff96 	bl	800b404 <__sfp_lock_release>
 800b4d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4e0:	6025      	str	r5, [r4, #0]
 800b4e2:	61a5      	str	r5, [r4, #24]
 800b4e4:	2208      	movs	r2, #8
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4ec:	f7fd fcc6 	bl	8008e7c <memset>
 800b4f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4fc:	3468      	adds	r4, #104	; 0x68
 800b4fe:	e7d9      	b.n	800b4b4 <__sfp+0x1c>
 800b500:	2104      	movs	r1, #4
 800b502:	4638      	mov	r0, r7
 800b504:	f7ff ff62 	bl	800b3cc <__sfmoreglue>
 800b508:	4604      	mov	r4, r0
 800b50a:	6030      	str	r0, [r6, #0]
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d1d5      	bne.n	800b4bc <__sfp+0x24>
 800b510:	f7ff ff78 	bl	800b404 <__sfp_lock_release>
 800b514:	230c      	movs	r3, #12
 800b516:	603b      	str	r3, [r7, #0]
 800b518:	e7ee      	b.n	800b4f8 <__sfp+0x60>
 800b51a:	bf00      	nop
 800b51c:	0800b9b0 	.word	0x0800b9b0
 800b520:	ffff0001 	.word	0xffff0001

0800b524 <_fwalk_reent>:
 800b524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b528:	4606      	mov	r6, r0
 800b52a:	4688      	mov	r8, r1
 800b52c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b530:	2700      	movs	r7, #0
 800b532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b536:	f1b9 0901 	subs.w	r9, r9, #1
 800b53a:	d505      	bpl.n	800b548 <_fwalk_reent+0x24>
 800b53c:	6824      	ldr	r4, [r4, #0]
 800b53e:	2c00      	cmp	r4, #0
 800b540:	d1f7      	bne.n	800b532 <_fwalk_reent+0xe>
 800b542:	4638      	mov	r0, r7
 800b544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b548:	89ab      	ldrh	r3, [r5, #12]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d907      	bls.n	800b55e <_fwalk_reent+0x3a>
 800b54e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b552:	3301      	adds	r3, #1
 800b554:	d003      	beq.n	800b55e <_fwalk_reent+0x3a>
 800b556:	4629      	mov	r1, r5
 800b558:	4630      	mov	r0, r6
 800b55a:	47c0      	blx	r8
 800b55c:	4307      	orrs	r7, r0
 800b55e:	3568      	adds	r5, #104	; 0x68
 800b560:	e7e9      	b.n	800b536 <_fwalk_reent+0x12>

0800b562 <__retarget_lock_init_recursive>:
 800b562:	4770      	bx	lr

0800b564 <__retarget_lock_acquire_recursive>:
 800b564:	4770      	bx	lr

0800b566 <__retarget_lock_release_recursive>:
 800b566:	4770      	bx	lr

0800b568 <__swhatbuf_r>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	460e      	mov	r6, r1
 800b56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b570:	2900      	cmp	r1, #0
 800b572:	b096      	sub	sp, #88	; 0x58
 800b574:	4614      	mov	r4, r2
 800b576:	461d      	mov	r5, r3
 800b578:	da07      	bge.n	800b58a <__swhatbuf_r+0x22>
 800b57a:	2300      	movs	r3, #0
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	89b3      	ldrh	r3, [r6, #12]
 800b580:	061a      	lsls	r2, r3, #24
 800b582:	d410      	bmi.n	800b5a6 <__swhatbuf_r+0x3e>
 800b584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b588:	e00e      	b.n	800b5a8 <__swhatbuf_r+0x40>
 800b58a:	466a      	mov	r2, sp
 800b58c:	f000 f8fa 	bl	800b784 <_fstat_r>
 800b590:	2800      	cmp	r0, #0
 800b592:	dbf2      	blt.n	800b57a <__swhatbuf_r+0x12>
 800b594:	9a01      	ldr	r2, [sp, #4]
 800b596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b59a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b59e:	425a      	negs	r2, r3
 800b5a0:	415a      	adcs	r2, r3
 800b5a2:	602a      	str	r2, [r5, #0]
 800b5a4:	e7ee      	b.n	800b584 <__swhatbuf_r+0x1c>
 800b5a6:	2340      	movs	r3, #64	; 0x40
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	b016      	add	sp, #88	; 0x58
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}

0800b5b0 <__smakebuf_r>:
 800b5b0:	898b      	ldrh	r3, [r1, #12]
 800b5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5b4:	079d      	lsls	r5, r3, #30
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	d507      	bpl.n	800b5cc <__smakebuf_r+0x1c>
 800b5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	6163      	str	r3, [r4, #20]
 800b5c8:	b002      	add	sp, #8
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	ab01      	add	r3, sp, #4
 800b5ce:	466a      	mov	r2, sp
 800b5d0:	f7ff ffca 	bl	800b568 <__swhatbuf_r>
 800b5d4:	9900      	ldr	r1, [sp, #0]
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff fb23 	bl	800ac24 <_malloc_r>
 800b5de:	b948      	cbnz	r0, 800b5f4 <__smakebuf_r+0x44>
 800b5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e4:	059a      	lsls	r2, r3, #22
 800b5e6:	d4ef      	bmi.n	800b5c8 <__smakebuf_r+0x18>
 800b5e8:	f023 0303 	bic.w	r3, r3, #3
 800b5ec:	f043 0302 	orr.w	r3, r3, #2
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	e7e3      	b.n	800b5bc <__smakebuf_r+0xc>
 800b5f4:	4b0d      	ldr	r3, [pc, #52]	; (800b62c <__smakebuf_r+0x7c>)
 800b5f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	6020      	str	r0, [r4, #0]
 800b5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b600:	81a3      	strh	r3, [r4, #12]
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	6163      	str	r3, [r4, #20]
 800b606:	9b01      	ldr	r3, [sp, #4]
 800b608:	6120      	str	r0, [r4, #16]
 800b60a:	b15b      	cbz	r3, 800b624 <__smakebuf_r+0x74>
 800b60c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b610:	4630      	mov	r0, r6
 800b612:	f000 f8c9 	bl	800b7a8 <_isatty_r>
 800b616:	b128      	cbz	r0, 800b624 <__smakebuf_r+0x74>
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	f023 0303 	bic.w	r3, r3, #3
 800b61e:	f043 0301 	orr.w	r3, r3, #1
 800b622:	81a3      	strh	r3, [r4, #12]
 800b624:	89a0      	ldrh	r0, [r4, #12]
 800b626:	4305      	orrs	r5, r0
 800b628:	81a5      	strh	r5, [r4, #12]
 800b62a:	e7cd      	b.n	800b5c8 <__smakebuf_r+0x18>
 800b62c:	0800b3c1 	.word	0x0800b3c1

0800b630 <_raise_r>:
 800b630:	291f      	cmp	r1, #31
 800b632:	b538      	push	{r3, r4, r5, lr}
 800b634:	4604      	mov	r4, r0
 800b636:	460d      	mov	r5, r1
 800b638:	d904      	bls.n	800b644 <_raise_r+0x14>
 800b63a:	2316      	movs	r3, #22
 800b63c:	6003      	str	r3, [r0, #0]
 800b63e:	f04f 30ff 	mov.w	r0, #4294967295
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b646:	b112      	cbz	r2, 800b64e <_raise_r+0x1e>
 800b648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b64c:	b94b      	cbnz	r3, 800b662 <_raise_r+0x32>
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 f830 	bl	800b6b4 <_getpid_r>
 800b654:	462a      	mov	r2, r5
 800b656:	4601      	mov	r1, r0
 800b658:	4620      	mov	r0, r4
 800b65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65e:	f000 b817 	b.w	800b690 <_kill_r>
 800b662:	2b01      	cmp	r3, #1
 800b664:	d00a      	beq.n	800b67c <_raise_r+0x4c>
 800b666:	1c59      	adds	r1, r3, #1
 800b668:	d103      	bne.n	800b672 <_raise_r+0x42>
 800b66a:	2316      	movs	r3, #22
 800b66c:	6003      	str	r3, [r0, #0]
 800b66e:	2001      	movs	r0, #1
 800b670:	e7e7      	b.n	800b642 <_raise_r+0x12>
 800b672:	2400      	movs	r4, #0
 800b674:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b678:	4628      	mov	r0, r5
 800b67a:	4798      	blx	r3
 800b67c:	2000      	movs	r0, #0
 800b67e:	e7e0      	b.n	800b642 <_raise_r+0x12>

0800b680 <raise>:
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <raise+0xc>)
 800b682:	4601      	mov	r1, r0
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	f7ff bfd3 	b.w	800b630 <_raise_r>
 800b68a:	bf00      	nop
 800b68c:	20000020 	.word	0x20000020

0800b690 <_kill_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	; (800b6b0 <_kill_r+0x20>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	4611      	mov	r1, r2
 800b69c:	602b      	str	r3, [r5, #0]
 800b69e:	f7f7 fdc9 	bl	8003234 <_kill>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d102      	bne.n	800b6ac <_kill_r+0x1c>
 800b6a6:	682b      	ldr	r3, [r5, #0]
 800b6a8:	b103      	cbz	r3, 800b6ac <_kill_r+0x1c>
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	bd38      	pop	{r3, r4, r5, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20004cc8 	.word	0x20004cc8

0800b6b4 <_getpid_r>:
 800b6b4:	f7f7 bdb6 	b.w	8003224 <_getpid>

0800b6b8 <__sread>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	f000 f894 	bl	800b7ec <_read_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	bfab      	itete	ge
 800b6c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b6cc:	181b      	addge	r3, r3, r0
 800b6ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6d2:	bfac      	ite	ge
 800b6d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6d6:	81a3      	strhlt	r3, [r4, #12]
 800b6d8:	bd10      	pop	{r4, pc}

0800b6da <__swrite>:
 800b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	461f      	mov	r7, r3
 800b6e0:	898b      	ldrh	r3, [r1, #12]
 800b6e2:	05db      	lsls	r3, r3, #23
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	d505      	bpl.n	800b6f8 <__swrite+0x1e>
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f000 f868 	bl	800b7c8 <_lseek_r>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b702:	81a3      	strh	r3, [r4, #12]
 800b704:	4632      	mov	r2, r6
 800b706:	463b      	mov	r3, r7
 800b708:	4628      	mov	r0, r5
 800b70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	f000 b817 	b.w	800b740 <_write_r>

0800b712 <__sseek>:
 800b712:	b510      	push	{r4, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71a:	f000 f855 	bl	800b7c8 <_lseek_r>
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	bf15      	itete	ne
 800b724:	6560      	strne	r0, [r4, #84]	; 0x54
 800b726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b72a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b72e:	81a3      	strheq	r3, [r4, #12]
 800b730:	bf18      	it	ne
 800b732:	81a3      	strhne	r3, [r4, #12]
 800b734:	bd10      	pop	{r4, pc}

0800b736 <__sclose>:
 800b736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73a:	f000 b813 	b.w	800b764 <_close_r>
	...

0800b740 <_write_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d07      	ldr	r5, [pc, #28]	; (800b760 <_write_r+0x20>)
 800b744:	4604      	mov	r4, r0
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f7f7 fda7 	bl	80032a2 <_write>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_write_r+0x1e>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_write_r+0x1e>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20004cc8 	.word	0x20004cc8

0800b764 <_close_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d06      	ldr	r5, [pc, #24]	; (800b780 <_close_r+0x1c>)
 800b768:	2300      	movs	r3, #0
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	602b      	str	r3, [r5, #0]
 800b770:	f7f7 fdb3 	bl	80032da <_close>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_close_r+0x1a>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_close_r+0x1a>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	20004cc8 	.word	0x20004cc8

0800b784 <_fstat_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d07      	ldr	r5, [pc, #28]	; (800b7a4 <_fstat_r+0x20>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	4611      	mov	r1, r2
 800b790:	602b      	str	r3, [r5, #0]
 800b792:	f7f7 fdae 	bl	80032f2 <_fstat>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d102      	bne.n	800b7a0 <_fstat_r+0x1c>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	b103      	cbz	r3, 800b7a0 <_fstat_r+0x1c>
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	bd38      	pop	{r3, r4, r5, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20004cc8 	.word	0x20004cc8

0800b7a8 <_isatty_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d06      	ldr	r5, [pc, #24]	; (800b7c4 <_isatty_r+0x1c>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	f7f7 fdad 	bl	8003312 <_isatty>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_isatty_r+0x1a>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_isatty_r+0x1a>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20004cc8 	.word	0x20004cc8

0800b7c8 <_lseek_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	; (800b7e8 <_lseek_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7f7 fda6 	bl	8003328 <_lseek>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_lseek_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_lseek_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20004cc8 	.word	0x20004cc8

0800b7ec <_read_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4d07      	ldr	r5, [pc, #28]	; (800b80c <_read_r+0x20>)
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	4608      	mov	r0, r1
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	602a      	str	r2, [r5, #0]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f7f7 fd34 	bl	8003268 <_read>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_read_r+0x1e>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_read_r+0x1e>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20004cc8 	.word	0x20004cc8

0800b810 <_init>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr

0800b81c <_fini>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	bf00      	nop
 800b820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b822:	bc08      	pop	{r3}
 800b824:	469e      	mov	lr, r3
 800b826:	4770      	bx	lr
