
AccSpiUartRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c898  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  0800ca38  0800ca38  0001ca38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d22c  0800d22c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d22c  0800d22c  0001d22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d234  0800d234  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d234  0800d234  0001d234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d23c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  200001fc  0800d438  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d04  0800d438  00024d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234fd  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046af  00000000  00000000  00043729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  00047dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  000496b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b210  00000000  00000000  0004ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8ce  00000000  00000000  00065ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d054  00000000  00000000  000828be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077ec  00000000  00000000  0011f968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ca20 	.word	0x0800ca20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800ca20 	.word	0x0800ca20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <LIS302DL_WriteIO>:
static float zScale = 1.0f;

//Private functions
//Write IO
static void LIS302DL_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	73fb      	strb	r3, [r7, #15]
	_LIS302DL_CS_ENBALE;
 8000f04:	2200      	movs	r2, #0
 8000f06:	2108      	movs	r1, #8
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LIS302DL_WriteIO+0x4c>)
 8000f0a:	f003 f8af 	bl	800406c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000f0e:	f107 010f 	add.w	r1, r7, #15
 8000f12:	230a      	movs	r3, #10
 8000f14:	2201      	movs	r2, #1
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <LIS302DL_WriteIO+0x50>)
 8000f18:	f003 fdc5 	bl	8004aa6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	230a      	movs	r3, #10
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <LIS302DL_WriteIO+0x50>)
 8000f26:	f003 fdbe 	bl	8004aa6 <HAL_SPI_Transmit>
	_LIS302DL_CS_DISABLE;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <LIS302DL_WriteIO+0x4c>)
 8000f30:	f003 f89c 	bl	800406c <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	20000218 	.word	0x20000218

08000f44 <LIS302DL_ReadIO>:

//Read IO
static void LIS302DL_ReadIO(uint8_t reg, int8_t *dataR, uint8_t size)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	723b      	strb	r3, [r7, #8]
	_LIS302DL_CS_ENBALE;
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2108      	movs	r1, #8
 8000f62:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <LIS302DL_ReadIO+0x84>)
 8000f64:	f003 f882 	bl	800406c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000f68:	f107 0108 	add.w	r1, r7, #8
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <LIS302DL_ReadIO+0x88>)
 8000f72:	f003 fd98 	bl	8004aa6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	f107 0108 	add.w	r1, r7, #8
 8000f7e:	230a      	movs	r3, #10
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <LIS302DL_ReadIO+0x88>)
 8000f82:	f003 fecc 	bl	8004d1e <HAL_SPI_Receive>
	_LIS302DL_CS_DISABLE;
 8000f86:	2201      	movs	r2, #1
 8000f88:	2108      	movs	r1, #8
 8000f8a:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <LIS302DL_ReadIO+0x84>)
 8000f8c:	f003 f86e 	bl	800406c <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e00d      	b.n	8000fb2 <LIS302DL_ReadIO+0x6e>
	{
		dataR[i] = spiBuf[i];
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	f107 0210 	add.w	r2, r7, #16
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b24a      	sxtb	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dbeb      	blt.n	8000f96 <LIS302DL_ReadIO+0x52>
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <LIS302DL_Init>:

//Public functions
//Accelerometer initialise function
void LIS302DL_Init(SPI_HandleTypeDef *accSPI, LIS302DL_Init_t *accInitDef)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	uint8_t spiData;
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000fda:	2258      	movs	r2, #88	; 0x58
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	483a      	ldr	r0, [pc, #232]	; (80010c8 <LIS302DL_Init+0xf8>)
 8000fe0:	f009 f846 	bl	800a070 <memcpy>

	//CTRL_REG1 forming
	spiData = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->dataRate)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <LIS302DL_Init+0x2a>
	{
		spiData |= 0x80;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
	}
	if (accInitDef->powerDown)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <LIS302DL_Init+0x3c>
	{
		spiData |= 0x40;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
	}
	if (accInitDef->fullScale)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	789b      	ldrb	r3, [r3, #2]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <LIS302DL_Init+0x4e>
	{
		spiData |= 0x20;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f043 0320 	orr.w	r3, r3, #32
 800101a:	b2db      	uxtb	r3, r3
 800101c:	73fb      	strb	r3, [r7, #15]
	}
	spiData |= (accInitDef->enableAxes & 0x07);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	78db      	ldrb	r3, [r3, #3]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	b25a      	sxtb	r2, r3
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
	//Write CTRL_REG1
	LIS302DL_WriteIO(LIS302DL_CTRL_REG1_ADDR, &spiData, 1);
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	2020      	movs	r0, #32
 8001040:	f7ff ff56 	bl	8000ef0 <LIS302DL_WriteIO>

	//CTRL_REG2 forming
	spiData = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
	if (accInitDef->serialInterfaceMode)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	791b      	ldrb	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <LIS302DL_Init+0x8a>
	{
		spiData |= 0x80;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73fb      	strb	r3, [r7, #15]
	}
	if (accInitDef->rebootMemory)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	795b      	ldrb	r3, [r3, #5]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <LIS302DL_Init+0x9c>
	{
		spiData |= 0x40;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	b2db      	uxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
	}
	if (accInitDef->filterConfig)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	799b      	ldrb	r3, [r3, #6]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <LIS302DL_Init+0xae>
	{
		spiData |= 0x1F;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f043 031f 	orr.w	r3, r3, #31
 800107a:	b2db      	uxtb	r3, r3
 800107c:	73fb      	strb	r3, [r7, #15]
	}
	//Write CTRL_REG2
	LIS302DL_WriteIO(LIS302DL_CTRL_REG2_ADDR, &spiData, 1);
 800107e:	f107 030f 	add.w	r3, r7, #15
 8001082:	2201      	movs	r2, #1
 8001084:	4619      	mov	r1, r3
 8001086:	2021      	movs	r0, #33	; 0x21
 8001088:	f7ff ff32 	bl	8000ef0 <LIS302DL_WriteIO>


	if (accInitDef->interruptConfig)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	79db      	ldrb	r3, [r3, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <LIS302DL_Init+0xd8>
	{
		//CTRL_REG3 forming
		spiData = accInitDef->interruptConfig;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	79db      	ldrb	r3, [r3, #7]
 8001098:	73fb      	strb	r3, [r7, #15]
		//Write CTRL_REG3
		LIS302DL_WriteIO(LIS302DL_CTRL_REG3_ADDR, &spiData, 1);
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	2022      	movs	r0, #34	; 0x22
 80010a4:	f7ff ff24 	bl	8000ef0 <LIS302DL_WriteIO>

	}

	//Assign sensor sensitivity
	if (accInitDef->fullScale)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <LIS302DL_Init+0xe8>
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_018G;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <LIS302DL_Init+0xfc>)
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <LIS302DL_Init+0x100>)
 80010b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
	}
}
 80010b6:	e002      	b.n	80010be <LIS302DL_Init+0xee>
		LIS302DL_Sensitivity = LIS302DL_SENSITIVITY_0_072G;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <LIS302DL_Init+0xfc>)
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <LIS302DL_Init+0x104>)
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000218 	.word	0x20000218
 80010cc:	20000000 	.word	0x20000000
 80010d0:	3c9374bc 	.word	0x3c9374bc
 80010d4:	3d9374bc 	.word	0x3d9374bc

080010d8 <LIS302DL_GetDataRaw>:

//Get Accelerometer raw data
LIS302DL_DataRaw_t LIS302DL_GetDataRaw(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	LIS302DL_DataRaw_t tempDataRaw;
	LIS302DL_ReadIO(LIS302DL_OUT_X_ADDR, &tempDataRaw.x, 1);
 80010de:	463b      	mov	r3, r7
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	2029      	movs	r0, #41	; 0x29
 80010e6:	f7ff ff2d 	bl	8000f44 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Y_ADDR, &tempDataRaw.y, 1);
 80010ea:	463b      	mov	r3, r7
 80010ec:	3301      	adds	r3, #1
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	202b      	movs	r0, #43	; 0x2b
 80010f4:	f7ff ff26 	bl	8000f44 <LIS302DL_ReadIO>
	LIS302DL_ReadIO(LIS302DL_OUT_Z_ADDR, &tempDataRaw.z, 1);
 80010f8:	463b      	mov	r3, r7
 80010fa:	3302      	adds	r3, #2
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	202d      	movs	r0, #45	; 0x2d
 8001102:	f7ff ff1f 	bl	8000f44 <LIS302DL_ReadIO>

	return tempDataRaw;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	463a      	mov	r2, r7
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4611      	mov	r1, r2
 800110e:	8019      	strh	r1, [r3, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	0c12      	lsrs	r2, r2, #16
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	793a      	ldrb	r2, [r7, #4]
 800111a:	f362 0307 	bfi	r3, r2, #0, #8
 800111e:	797a      	ldrb	r2, [r7, #5]
 8001120:	f362 230f 	bfi	r3, r2, #8, #8
 8001124:	79ba      	ldrb	r2, [r7, #6]
 8001126:	f362 4317 	bfi	r3, r2, #16, #8
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <LIS302DL_GetDataScaled>:
//Get Accelerometer scaled data [g]
LIS302DL_DataScaled_t LIS302DL_GetDataScaled(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0

	LIS302DL_DataRaw_t tempRawData = LIS302DL_GetDataRaw();
 800113a:	f7ff ffcd 	bl	80010d8 <LIS302DL_GetDataRaw>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	f887 2020 	strb.w	r2, [r7, #32]
 8001146:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800114a:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800114e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	LIS302DL_DataScaled_t tempScaledData;
	tempScaledData.x = (tempRawData.x * LIS302DL_Sensitivity * xScale) + 0.0f - xOffset;
 8001156:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <LIS302DL_GetDataScaled+0xf8>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <LIS302DL_GetDataScaled+0xfc>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001234 <LIS302DL_GetDataScaled+0x100>
 800117a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <LIS302DL_GetDataScaled+0x104>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.y = (tempRawData.y * LIS302DL_Sensitivity * yScale) + 0.0f - yOffset;
 800118c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <LIS302DL_GetDataScaled+0xf8>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <LIS302DL_GetDataScaled+0x108>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001234 <LIS302DL_GetDataScaled+0x100>
 80011b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <LIS302DL_GetDataScaled+0x10c>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a06 	vstr	s15, [r7, #24]
	tempScaledData.z = (tempRawData.z * LIS302DL_Sensitivity * zScale) + 0.0f - zOffset;
 80011c2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <LIS302DL_GetDataScaled+0xf8>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <LIS302DL_GetDataScaled+0x110>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001234 <LIS302DL_GetDataScaled+0x100>
 80011e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <LIS302DL_GetDataScaled+0x114>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	edc7 7a07 	vstr	s15, [r7, #28]
	return tempScaledData;
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	f107 0214 	add.w	r2, r7, #20
 8001200:	ca07      	ldmia	r2, {r0, r1, r2}
 8001202:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	ee06 1a90 	vmov	s13, r1
 8001210:	ee07 2a10 	vmov	s14, r2
 8001214:	ee07 3a90 	vmov	s15, r3
}
 8001218:	eeb0 0a66 	vmov.f32	s0, s13
 800121c:	eef0 0a47 	vmov.f32	s1, s14
 8001220:	eeb0 1a67 	vmov.f32	s2, s15
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	20000004 	.word	0x20000004
 8001234:	00000000 	.word	0x00000000
 8001238:	20000270 	.word	0x20000270
 800123c:	20000008 	.word	0x20000008
 8001240:	20000274 	.word	0x20000274
 8001244:	2000000c 	.word	0x2000000c
 8001248:	20000278 	.word	0x20000278

0800124c <LIS302DL_X_calibrate>:
}

//Calibration functions //
//X-Axis calibrate
void LIS302DL_X_calibrate(float x_min, float x_max)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	ed87 0a01 	vstr	s0, [r7, #4]
 8001256:	edc7 0a00 	vstr	s1, [r7]
	xOffset = (x_max + x_min) / 2.0f;
 800125a:	ed97 7a00 	vldr	s14, [r7]
 800125e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001266:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800126a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <LIS302DL_X_calibrate+0x50>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	xScale = 2.0f / (x_max - x_min);
 8001274:	ed97 7a00 	vldr	s14, [r7]
 8001278:	edd7 7a01 	vldr	s15, [r7, #4]
 800127c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001280:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <LIS302DL_X_calibrate+0x54>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000270 	.word	0x20000270
 80012a0:	20000004 	.word	0x20000004

080012a4 <LIS302DL_Y_calibrate>:
//Y-Axis calibrate
void LIS302DL_Y_calibrate(float y_min, float y_max)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ae:	edc7 0a00 	vstr	s1, [r7]
	yOffset = (y_max + y_min) / 2.0f;
 80012b2:	ed97 7a00 	vldr	s14, [r7]
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <LIS302DL_Y_calibrate+0x50>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
	yScale = 2.0f / (y_max - y_min);
 80012cc:	ed97 7a00 	vldr	s14, [r7]
 80012d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <LIS302DL_Y_calibrate+0x54>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000274 	.word	0x20000274
 80012f8:	20000008 	.word	0x20000008

080012fc <LIS302DL_Z_calibrate>:
//Z-Axis calibrate
void LIS302DL_Z_calibrate(float z_min, float z_max)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
 8001306:	edc7 0a00 	vstr	s1, [r7]
	zOffset = (z_max + z_min) / 2.0f;
 800130a:	ed97 7a00 	vldr	s14, [r7]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001316:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <LIS302DL_Z_calibrate+0x50>)
 8001320:	edc3 7a00 	vstr	s15, [r3]
	zScale = 2.0f / (z_max - z_min);
 8001324:	ed97 7a00 	vldr	s14, [r7]
 8001328:	edd7 7a01 	vldr	s15, [r7, #4]
 800132c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <LIS302DL_Z_calibrate+0x54>)
 800133a:	edc3 7a00 	vstr	s15, [r3]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000278 	.word	0x20000278
 8001350:	2000000c 	.word	0x2000000c

08001354 <Led_ShowTilt>:

//Public functions

//1. Show tilt on leds
void Led_ShowTilt(Led_Tilt_t tilt)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	eef0 7a60 	vmov.f32	s15, s1
 8001362:	ed87 7a00 	vstr	s14, [r7]
 8001366:	edc7 7a01 	vstr	s15, [r7, #4]
	if (tilt.y > ZeroMargin)
 800136a:	ed97 7a01 	vldr	s14, [r7, #4]
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <Led_ShowTilt+0xe0>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	dd06      	ble.n	800138c <Led_ShowTilt+0x38>
	{
		HAL_GPIO_WritePin(LedPort, Green, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001384:	482c      	ldr	r0, [pc, #176]	; (8001438 <Led_ShowTilt+0xe4>)
 8001386:	f002 fe71 	bl	800406c <HAL_GPIO_WritePin>
 800138a:	e005      	b.n	8001398 <Led_ShowTilt+0x44>
	}
	else
	{
		HAL_GPIO_WritePin(LedPort, Green, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001392:	4829      	ldr	r0, [pc, #164]	; (8001438 <Led_ShowTilt+0xe4>)
 8001394:	f002 fe6a 	bl	800406c <HAL_GPIO_WritePin>
	}

	if (tilt.y < -ZeroMargin)
 8001398:	ed97 7a01 	vldr	s14, [r7, #4]
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <Led_ShowTilt+0xe0>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eef1 7a67 	vneg.f32	s15, s15
 80013a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	d506      	bpl.n	80013be <Led_ShowTilt+0x6a>
	{
		HAL_GPIO_WritePin(LedPort, Red, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b6:	4820      	ldr	r0, [pc, #128]	; (8001438 <Led_ShowTilt+0xe4>)
 80013b8:	f002 fe58 	bl	800406c <HAL_GPIO_WritePin>
 80013bc:	e005      	b.n	80013ca <Led_ShowTilt+0x76>
	}
	else
	{
		HAL_GPIO_WritePin(LedPort, Red, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <Led_ShowTilt+0xe4>)
 80013c6:	f002 fe51 	bl	800406c <HAL_GPIO_WritePin>
	}


	if (tilt.x > ZeroMargin)
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <Led_ShowTilt+0xe0>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	dd06      	ble.n	80013ec <Led_ShowTilt+0x98>
	{
		HAL_GPIO_WritePin(LedPort, Orange, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <Led_ShowTilt+0xe4>)
 80013e6:	f002 fe41 	bl	800406c <HAL_GPIO_WritePin>
 80013ea:	e005      	b.n	80013f8 <Led_ShowTilt+0xa4>
	}
	else
	{
		HAL_GPIO_WritePin(LedPort, Orange, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <Led_ShowTilt+0xe4>)
 80013f4:	f002 fe3a 	bl	800406c <HAL_GPIO_WritePin>
	}

	if (tilt.x < -ZeroMargin)
 80013f8:	ed97 7a00 	vldr	s14, [r7]
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <Led_ShowTilt+0xe0>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eef1 7a67 	vneg.f32	s15, s15
 8001406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	d506      	bpl.n	800141e <Led_ShowTilt+0xca>
	{
		HAL_GPIO_WritePin(LedPort, Blue, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001416:	4808      	ldr	r0, [pc, #32]	; (8001438 <Led_ShowTilt+0xe4>)
 8001418:	f002 fe28 	bl	800406c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LedPort, Blue, GPIO_PIN_RESET);
	}
}
 800141c:	e005      	b.n	800142a <Led_ShowTilt+0xd6>
		HAL_GPIO_WritePin(LedPort, Blue, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <Led_ShowTilt+0xe4>)
 8001426:	f002 fe21 	bl	800406c <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000018 	.word	0x20000018
 8001438:	40020c00 	.word	0x40020c00

0800143c <Led_AllON>:

//2. Swich all leds ON
void Led_AllON(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < NumnerOfLeds; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e00c      	b.n	8001462 <Led_AllON+0x26>
	{
		HAL_GPIO_WritePin(LedPort, *(leds+i), GPIO_PIN_SET);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <Led_AllON+0x38>)
 800144e:	4413      	add	r3, r2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4619      	mov	r1, r3
 8001456:	4808      	ldr	r0, [pc, #32]	; (8001478 <Led_AllON+0x3c>)
 8001458:	f002 fe08 	bl	800406c <HAL_GPIO_WritePin>
	for (i = 0; i < NumnerOfLeds; i++)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	3301      	adds	r3, #1
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d9ef      	bls.n	8001448 <Led_AllON+0xc>
	}
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000010 	.word	0x20000010
 8001478:	40020c00 	.word	0x40020c00

0800147c <Led_AllOFF>:

//3. Switch all leds OFF
void Led_AllOFF(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < NumnerOfLeds; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	e00c      	b.n	80014a2 <Led_AllOFF+0x26>
	{
		HAL_GPIO_WritePin(LedPort, *(leds+i), GPIO_PIN_RESET);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <Led_AllOFF+0x38>)
 800148e:	4413      	add	r3, r2
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	4808      	ldr	r0, [pc, #32]	; (80014b8 <Led_AllOFF+0x3c>)
 8001498:	f002 fde8 	bl	800406c <HAL_GPIO_WritePin>
	for (i = 0; i < NumnerOfLeds; i++)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3301      	adds	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d9ef      	bls.n	8001488 <Led_AllOFF+0xc>
	}
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000010 	.word	0x20000010
 80014b8:	40020c00 	.word	0x40020c00

080014bc <Led_SetZeroMargin>:
	}
}

//5. Set flat position tolerance
void Led_SetZeroMargin(float _ZeroMargin)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	ed87 0a01 	vstr	s0, [r7, #4]
	ZeroMargin = _ZeroMargin;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <Led_SetZeroMargin+0x1c>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000018 	.word	0x20000018

080014dc <Led_Init>:

//6. Init state
void Led_Init()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	Led_AllOFF();
 80014e0:	f7ff ffcc 	bl	800147c <Led_AllOFF>
	Led_SetZeroMargin(ZeroMarginDefault);
 80014e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80014f0 <Led_Init+0x14>
 80014e8:	f7ff ffe8 	bl	80014bc <Led_SetZeroMargin>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	3dcccccd 	.word	0x3dcccccd

080014f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreUartTransmitData */
  SemaphoreUartTransmitDataHandle = osSemaphoreNew(1, 1, &SemaphoreUartTransmitData_attributes);
 80014f8:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <MX_FREERTOS_Init+0xcc>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	2001      	movs	r0, #1
 80014fe:	f005 fbeb 	bl	8006cd8 <osSemaphoreNew>
 8001502:	4603      	mov	r3, r0
 8001504:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <MX_FREERTOS_Init+0xd0>)
 8001506:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreGetData */
  SemaphoreGetDataHandle = osSemaphoreNew(1, 1, &SemaphoreGetData_attributes);
 8001508:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <MX_FREERTOS_Init+0xd4>)
 800150a:	2101      	movs	r1, #1
 800150c:	2001      	movs	r0, #1
 800150e:	f005 fbe3 	bl	8006cd8 <osSemaphoreNew>
 8001512:	4603      	mov	r3, r0
 8001514:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <MX_FREERTOS_Init+0xd8>)
 8001516:	6013      	str	r3, [r2, #0]

  /* creation of SemaphorePcRequestDataToLed */
  SemaphorePcRequestDataToLedHandle = osSemaphoreNew(1, 1, &SemaphorePcRequestDataToLed_attributes);
 8001518:	4a2d      	ldr	r2, [pc, #180]	; (80015d0 <MX_FREERTOS_Init+0xdc>)
 800151a:	2101      	movs	r1, #1
 800151c:	2001      	movs	r0, #1
 800151e:	f005 fbdb 	bl	8006cd8 <osSemaphoreNew>
 8001522:	4603      	mov	r3, r0
 8001524:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <MX_FREERTOS_Init+0xe0>)
 8001526:	6013      	str	r3, [r2, #0]

  /* creation of SemaphorePcRequestDataToText */
  SemaphorePcRequestDataToTextHandle = osSemaphoreNew(1, 1, &SemaphorePcRequestDataToText_attributes);
 8001528:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <MX_FREERTOS_Init+0xe4>)
 800152a:	2101      	movs	r1, #1
 800152c:	2001      	movs	r0, #1
 800152e:	f005 fbd3 	bl	8006cd8 <osSemaphoreNew>
 8001532:	4603      	mov	r3, r0
 8001534:	4a29      	ldr	r2, [pc, #164]	; (80015dc <MX_FREERTOS_Init+0xe8>)
 8001536:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerPcRequestSimulator */
  TimerPcRequestSimulatorHandle = osTimerNew(CallbackTimerPcRequestSimulator, osTimerPeriodic, NULL, &TimerPcRequestSimulator_attributes);
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_FREERTOS_Init+0xec>)
 800153a:	2200      	movs	r2, #0
 800153c:	2101      	movs	r1, #1
 800153e:	4829      	ldr	r0, [pc, #164]	; (80015e4 <MX_FREERTOS_Init+0xf0>)
 8001540:	f005 fb4e 	bl	8006be0 <osTimerNew>
 8001544:	4603      	mov	r3, r0
 8001546:	4a28      	ldr	r2, [pc, #160]	; (80015e8 <MX_FREERTOS_Init+0xf4>)
 8001548:	6013      	str	r3, [r2, #0]

  /* creation of TimerUartTransmitData */
  TimerUartTransmitDataHandle = osTimerNew(CallbackTimerUartTransmitData, osTimerPeriodic, NULL, &TimerUartTransmitData_attributes);
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <MX_FREERTOS_Init+0xf8>)
 800154c:	2200      	movs	r2, #0
 800154e:	2101      	movs	r1, #1
 8001550:	4827      	ldr	r0, [pc, #156]	; (80015f0 <MX_FREERTOS_Init+0xfc>)
 8001552:	f005 fb45 	bl	8006be0 <osTimerNew>
 8001556:	4603      	mov	r3, r0
 8001558:	4a26      	ldr	r2, [pc, #152]	; (80015f4 <MX_FREERTOS_Init+0x100>)
 800155a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueAccData */
  QueueAccDataHandle = osMessageQueueNew (8, sizeof(LIS302DL_DataScaled_t), &QueueAccData_attributes);
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <MX_FREERTOS_Init+0x104>)
 800155e:	210c      	movs	r1, #12
 8001560:	2008      	movs	r0, #8
 8001562:	f005 fc42 	bl	8006dea <osMessageQueueNew>
 8001566:	4603      	mov	r3, r0
 8001568:	4a24      	ldr	r2, [pc, #144]	; (80015fc <MX_FREERTOS_Init+0x108>)
 800156a:	6013      	str	r3, [r2, #0]

  /* creation of QueueUartTransmitData */
  QueueUartTransmitDataHandle = osMessageQueueNew (8, sizeof(LIS302DL_DataScaled_t), &QueueUartTransmitData_attributes);
 800156c:	4a24      	ldr	r2, [pc, #144]	; (8001600 <MX_FREERTOS_Init+0x10c>)
 800156e:	210c      	movs	r1, #12
 8001570:	2008      	movs	r0, #8
 8001572:	f005 fc3a 	bl	8006dea <osMessageQueueNew>
 8001576:	4603      	mov	r3, r0
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <MX_FREERTOS_Init+0x110>)
 800157a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <MX_FREERTOS_Init+0x114>)
 800157e:	2100      	movs	r1, #0
 8001580:	4822      	ldr	r0, [pc, #136]	; (800160c <MX_FREERTOS_Init+0x118>)
 8001582:	f005 fa85 	bl	8006a90 <osThreadNew>
 8001586:	4603      	mov	r3, r0
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <MX_FREERTOS_Init+0x11c>)
 800158a:	6013      	str	r3, [r2, #0]

  /* creation of HardBitTask */
  HardBitTaskHandle = osThreadNew(StartHardBitTask, NULL, &HardBitTask_attributes);
 800158c:	4a21      	ldr	r2, [pc, #132]	; (8001614 <MX_FREERTOS_Init+0x120>)
 800158e:	2100      	movs	r1, #0
 8001590:	4821      	ldr	r0, [pc, #132]	; (8001618 <MX_FREERTOS_Init+0x124>)
 8001592:	f005 fa7d 	bl	8006a90 <osThreadNew>
 8001596:	4603      	mov	r3, r0
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <MX_FREERTOS_Init+0x128>)
 800159a:	6013      	str	r3, [r2, #0]

  /* creation of AccTask */
  AccTaskHandle = osThreadNew(StartAccTask, NULL, &AccTask_attributes);
 800159c:	4a20      	ldr	r2, [pc, #128]	; (8001620 <MX_FREERTOS_Init+0x12c>)
 800159e:	2100      	movs	r1, #0
 80015a0:	4820      	ldr	r0, [pc, #128]	; (8001624 <MX_FREERTOS_Init+0x130>)
 80015a2:	f005 fa75 	bl	8006a90 <osThreadNew>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <MX_FREERTOS_Init+0x134>)
 80015aa:	6013      	str	r3, [r2, #0]

  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartUartTask, NULL, &UartTask_attributes);
 80015ac:	4a1f      	ldr	r2, [pc, #124]	; (800162c <MX_FREERTOS_Init+0x138>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	481f      	ldr	r0, [pc, #124]	; (8001630 <MX_FREERTOS_Init+0x13c>)
 80015b2:	f005 fa6d 	bl	8006a90 <osThreadNew>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_FREERTOS_Init+0x140>)
 80015ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	0800cd9c 	.word	0x0800cd9c
 80015c4:	20004bc8 	.word	0x20004bc8
 80015c8:	0800cdac 	.word	0x0800cdac
 80015cc:	20004b9c 	.word	0x20004b9c
 80015d0:	0800cdbc 	.word	0x0800cdbc
 80015d4:	20004ba8 	.word	0x20004ba8
 80015d8:	0800cdcc 	.word	0x0800cdcc
 80015dc:	20004ba4 	.word	0x20004ba4
 80015e0:	0800cd7c 	.word	0x0800cd7c
 80015e4:	08001989 	.word	0x08001989
 80015e8:	20004bb8 	.word	0x20004bb8
 80015ec:	0800cd8c 	.word	0x0800cd8c
 80015f0:	0800199d 	.word	0x0800199d
 80015f4:	20004bac 	.word	0x20004bac
 80015f8:	0800cd4c 	.word	0x0800cd4c
 80015fc:	20004bbc 	.word	0x20004bbc
 8001600:	0800cd64 	.word	0x0800cd64
 8001604:	20004b98 	.word	0x20004b98
 8001608:	0800ccbc 	.word	0x0800ccbc
 800160c:	08001639 	.word	0x08001639
 8001610:	20004ba0 	.word	0x20004ba0
 8001614:	0800cce0 	.word	0x0800cce0
 8001618:	080016f5 	.word	0x080016f5
 800161c:	20004bb0 	.word	0x20004bb0
 8001620:	0800cd04 	.word	0x0800cd04
 8001624:	08001709 	.word	0x08001709
 8001628:	20004bc4 	.word	0x20004bc4
 800162c:	0800cd28 	.word	0x0800cd28
 8001630:	080017c5 	.word	0x080017c5
 8001634:	20004bc0 	.word	0x20004bc0

08001638 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	LIS302DL_DataScaled_t _myData;
	Led_Tilt_t actualTilt;

	xTimerChangePeriod((TimerHandle_t)TimerPcRequestSimulatorHandle, 3000 / portTICK_PERIOD_MS, portMAX_DELAY);
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <StartMainTask+0xa4>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001650:	2104      	movs	r1, #4
 8001652:	f007 fd85 	bl	8009160 <xTimerGenericCommand>
  /* Infinite loop */
  for(;;)
  {

	  //get data()
	  if (pdTRUE == xSemaphoreTake(SemaphoreGetDataHandle,0))
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <StartMainTask+0xa8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 f941 	bl	80078e4 <xQueueSemaphoreTake>
 8001662:	4603      	mov	r3, r0
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <StartMainTask+0x42>
	  {
		  xQueueReceive(QueueAccDataHandle, &_myData, portMAX_DELAY);
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <StartMainTask+0xac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f107 0114 	add.w	r1, r7, #20
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	4618      	mov	r0, r3
 8001676:	f006 f855 	bl	8007724 <xQueueReceive>
	  }

	  //Parse_ACC_data()
	  actualTilt.x = _myData.x;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	60fb      	str	r3, [r7, #12]
	  actualTilt.y = _myData.y;
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	613b      	str	r3, [r7, #16]

	  //Set leds
	  if (pdTRUE == xSemaphoreGive((SemaphoreHandle_t)SemaphorePcRequestDataToLedHandle))
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <StartMainTask+0xb0>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	2300      	movs	r3, #0
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	f005 feb0 	bl	80073f0 <xQueueGenericSend>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <StartMainTask+0x64>
	  {
			Led_AllON();
 8001696:	f7ff fed1 	bl	800143c <Led_AllON>
 800169a:	e009      	b.n	80016b0 <StartMainTask+0x78>
	  }
	  else
	  {
		  	Led_ShowTilt(actualTilt);
 800169c:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a4:	eeb0 0a47 	vmov.f32	s0, s14
 80016a8:	eef0 0a67 	vmov.f32	s1, s15
 80016ac:	f7ff fe52 	bl	8001354 <Led_ShowTilt>
	  }

	  if (pdTRUE == xSemaphoreTake(SemaphoreUartTransmitDataHandle,0))
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <StartMainTask+0xb4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f006 f914 	bl	80078e4 <xQueueSemaphoreTake>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <StartMainTask+0x9a>
	  {
		  xQueueSendToBack(QueueUartTransmitDataHandle, &_myData, 0);
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <StartMainTask+0xb8>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f107 0114 	add.w	r1, r7, #20
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	f005 fe8f 	bl	80073f0 <xQueueGenericSend>
	  }


	  //wait 500ms
	  vTaskDelay(100 / portTICK_PERIOD_MS);
 80016d2:	2064      	movs	r0, #100	; 0x64
 80016d4:	f006 fe08 	bl	80082e8 <vTaskDelay>
	  if (pdTRUE == xSemaphoreTake(SemaphoreGetDataHandle,0))
 80016d8:	e7bd      	b.n	8001656 <StartMainTask+0x1e>
 80016da:	bf00      	nop
 80016dc:	20004bb8 	.word	0x20004bb8
 80016e0:	20004b9c 	.word	0x20004b9c
 80016e4:	20004bbc 	.word	0x20004bbc
 80016e8:	20004ba8 	.word	0x20004ba8
 80016ec:	20004bc8 	.word	0x20004bc8
 80016f0:	20004b98 	.word	0x20004b98

080016f4 <StartHardBitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHardBitTask */
void StartHardBitTask(void *argument)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardBitTask */
  /* Infinite loop */
  for(;;)
  {
	  	//printf(".");
		vTaskDelay(500 / portTICK_PERIOD_MS);
 80016fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001700:	f006 fdf2 	bl	80082e8 <vTaskDelay>
 8001704:	e7fa      	b.n	80016fc <StartHardBitTask+0x8>
	...

08001708 <StartAccTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccTask */
void StartAccTask(void *argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccTask */
	LIS302DL_DataScaled_t _myData;
	LIS302DL_Init_t myAccel;

	taskENTER_CRITICAL();
 8001710:	f008 f978 	bl	8009a04 <vPortEnterCritical>

	myAccel.dataRate=LIS302DL_DATARATE_400;
 8001714:	2301      	movs	r3, #1
 8001716:	733b      	strb	r3, [r7, #12]
	myAccel.powerDown=LIS302DL_ACTIVE;
 8001718:	2301      	movs	r3, #1
 800171a:	737b      	strb	r3, [r7, #13]
	myAccel.fullScale=LIS302DL_FULLSCALE_2;
 800171c:	2300      	movs	r3, #0
 800171e:	73bb      	strb	r3, [r7, #14]
	myAccel.enableAxes=LIS302DL_XYZ_ENABLE;
 8001720:	2307      	movs	r3, #7
 8001722:	73fb      	strb	r3, [r7, #15]
	myAccel.serialInterfaceMode=LIS302DL_SERIAL_INTERFACE_4WIRE;
 8001724:	2300      	movs	r3, #0
 8001726:	743b      	strb	r3, [r7, #16]
	myAccel.rebootMemory=LIS302DL_BOOT_NORMAL_MODE;
 8001728:	2300      	movs	r3, #0
 800172a:	747b      	strb	r3, [r7, #17]
	myAccel.filterConfig=LIS302DL_FILTERING_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	74bb      	strb	r3, [r7, #18]
	myAccel.interruptConfig=LIS302DL_INTERRUPT_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	74fb      	strb	r3, [r7, #19]

	LIS302DL_Init(&hspi1, &myAccel);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4619      	mov	r1, r3
 800173a:	481f      	ldr	r0, [pc, #124]	; (80017b8 <StartAccTask+0xb0>)
 800173c:	f7ff fc48 	bl	8000fd0 <LIS302DL_Init>

	//calibration acc to meas range
	LIS302DL_X_calibrate(4.0, -4.0);
 8001740:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8001744:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001748:	f7ff fd80 	bl	800124c <LIS302DL_X_calibrate>
	LIS302DL_Y_calibrate(4.0, -4.0);
 800174c:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8001750:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001754:	f7ff fda6 	bl	80012a4 <LIS302DL_Y_calibrate>
	LIS302DL_Z_calibrate(4.0, -4.0);
 8001758:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 800175c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001760:	f7ff fdcc 	bl	80012fc <LIS302DL_Z_calibrate>

	Led_Init();
 8001764:	f7ff feba 	bl	80014dc <Led_Init>

	taskEXIT_CRITICAL();
 8001768:	f008 f97c 	bl	8009a64 <vPortExitCritical>

  /* Infinite loop */
  for(;;)
  {
	  if (pdTRUE == xSemaphoreGive((SemaphoreHandle_t)SemaphoreGetDataHandle))
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <StartAccTask+0xb4>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	f005 fe3b 	bl	80073f0 <xQueueGenericSend>
 800177a:	4603      	mov	r3, r0
 800177c:	2b01      	cmp	r3, #1
 800177e:	d116      	bne.n	80017ae <StartAccTask+0xa6>
	  {
		  //if (LIS302DL_DRDY_Test())
		  {
			  _myData = LIS302DL_GetDataScaled();
 8001780:	f7ff fcd8 	bl	8001134 <LIS302DL_GetDataScaled>
 8001784:	eef0 6a40 	vmov.f32	s13, s0
 8001788:	eeb0 7a60 	vmov.f32	s14, s1
 800178c:	eef0 7a41 	vmov.f32	s15, s2
 8001790:	edc7 6a05 	vstr	s13, [r7, #20]
 8001794:	ed87 7a06 	vstr	s14, [r7, #24]
 8001798:	edc7 7a07 	vstr	s15, [r7, #28]
			  xQueueSendToBack(QueueAccDataHandle, &_myData, portMAX_DELAY);
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <StartAccTask+0xb8>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	f107 0114 	add.w	r1, r7, #20
 80017a4:	2300      	movs	r3, #0
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
 80017aa:	f005 fe21 	bl	80073f0 <xQueueGenericSend>
		  }
	  }
	  vTaskDelay(100 / portTICK_PERIOD_MS);
 80017ae:	2064      	movs	r0, #100	; 0x64
 80017b0:	f006 fd9a 	bl	80082e8 <vTaskDelay>
	  if (pdTRUE == xSemaphoreGive((SemaphoreHandle_t)SemaphoreGetDataHandle))
 80017b4:	e7da      	b.n	800176c <StartAccTask+0x64>
 80017b6:	bf00      	nop
 80017b8:	20004bcc 	.word	0x20004bcc
 80017bc:	20004b9c 	.word	0x20004b9c
 80017c0:	20004bbc 	.word	0x20004bbc

080017c4 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 80017c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017c8:	b08a      	sub	sp, #40	; 0x28
 80017ca:	af04      	add	r7, sp, #16
 80017cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
  /* Infinite loop */
	LIS302DL_DataScaled_t _myData;

	xTimerChangePeriod((TimerHandle_t)TimerUartTransmitDataHandle, 100 / portTICK_PERIOD_MS, portMAX_DELAY);
 80017ce:	4b62      	ldr	r3, [pc, #392]	; (8001958 <StartUartTask+0x194>)
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	2264      	movs	r2, #100	; 0x64
 80017dc:	2104      	movs	r1, #4
 80017de:	f007 fcbf 	bl	8009160 <xTimerGenericCommand>
	HAL_UART_Receive_IT(&huart2, &ReciveBuffer, 1);
 80017e2:	2201      	movs	r2, #1
 80017e4:	495d      	ldr	r1, [pc, #372]	; (800195c <StartUartTask+0x198>)
 80017e6:	485e      	ldr	r0, [pc, #376]	; (8001960 <StartUartTask+0x19c>)
 80017e8:	f004 f9db 	bl	8005ba2 <HAL_UART_Receive_IT>

  for(;;)
  {

	  xQueueReceive(QueueUartTransmitDataHandle, &_myData, portMAX_DELAY);
 80017ec:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <StartUartTask+0x1a0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	4618      	mov	r0, r3
 80017fa:	f005 ff93 	bl	8007724 <xQueueReceive>

		  if (pdTRUE == xSemaphoreGive((SemaphoreHandle_t)SemaphorePcRequestDataToTextHandle))
 80017fe:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <StartUartTask+0x1a4>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	f005 fdf2 	bl	80073f0 <xQueueGenericSend>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	f040 8083 	bne.w	800191a <StartUartTask+0x156>
		  {
			  printf("\n\r****************************************************");
 8001814:	4855      	ldr	r0, [pc, #340]	; (800196c <StartUartTask+0x1a8>)
 8001816:	f001 fe33 	bl	8003480 <printf_>
			  switch (ReciveBuffer)
 800181a:	4b50      	ldr	r3, [pc, #320]	; (800195c <StartUartTask+0x198>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b3f      	cmp	r3, #63	; 0x3f
 8001820:	d052      	beq.n	80018c8 <StartUartTask+0x104>
 8001822:	2b3f      	cmp	r3, #63	; 0x3f
 8001824:	db72      	blt.n	800190c <StartUartTask+0x148>
 8001826:	2b7a      	cmp	r3, #122	; 0x7a
 8001828:	dc70      	bgt.n	800190c <StartUartTask+0x148>
 800182a:	2b58      	cmp	r3, #88	; 0x58
 800182c:	db6e      	blt.n	800190c <StartUartTask+0x148>
 800182e:	3b58      	subs	r3, #88	; 0x58
 8001830:	2b22      	cmp	r3, #34	; 0x22
 8001832:	d86b      	bhi.n	800190c <StartUartTask+0x148>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <StartUartTask+0x78>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	080018d1 	.word	0x080018d1
 8001840:	080018e5 	.word	0x080018e5
 8001844:	080018f9 	.word	0x080018f9
 8001848:	0800190d 	.word	0x0800190d
 800184c:	0800190d 	.word	0x0800190d
 8001850:	0800190d 	.word	0x0800190d
 8001854:	0800190d 	.word	0x0800190d
 8001858:	0800190d 	.word	0x0800190d
 800185c:	0800190d 	.word	0x0800190d
 8001860:	0800190d 	.word	0x0800190d
 8001864:	0800190d 	.word	0x0800190d
 8001868:	0800190d 	.word	0x0800190d
 800186c:	0800190d 	.word	0x0800190d
 8001870:	0800190d 	.word	0x0800190d
 8001874:	0800190d 	.word	0x0800190d
 8001878:	0800190d 	.word	0x0800190d
 800187c:	0800190d 	.word	0x0800190d
 8001880:	0800190d 	.word	0x0800190d
 8001884:	0800190d 	.word	0x0800190d
 8001888:	0800190d 	.word	0x0800190d
 800188c:	0800190d 	.word	0x0800190d
 8001890:	0800190d 	.word	0x0800190d
 8001894:	0800190d 	.word	0x0800190d
 8001898:	0800190d 	.word	0x0800190d
 800189c:	0800190d 	.word	0x0800190d
 80018a0:	0800190d 	.word	0x0800190d
 80018a4:	0800190d 	.word	0x0800190d
 80018a8:	0800190d 	.word	0x0800190d
 80018ac:	0800190d 	.word	0x0800190d
 80018b0:	0800190d 	.word	0x0800190d
 80018b4:	0800190d 	.word	0x0800190d
 80018b8:	0800190d 	.word	0x0800190d
 80018bc:	080018d1 	.word	0x080018d1
 80018c0:	080018e5 	.word	0x080018e5
 80018c4:	080018f9 	.word	0x080018f9
			  {

			  case '?':
						  printf("\n\r*** What do you want PC? <- Answer to PC request ***");
 80018c8:	4829      	ldr	r0, [pc, #164]	; (8001970 <StartUartTask+0x1ac>)
 80018ca:	f001 fdd9 	bl	8003480 <printf_>
						  break;
 80018ce:	e020      	b.n	8001912 <StartUartTask+0x14e>
			  case 'x':
			  case 'X':
						  printf("\n\r*** x = %4.1f <- Answer to PC request             ***",_myData.x);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe40 	bl	8000558 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4825      	ldr	r0, [pc, #148]	; (8001974 <StartUartTask+0x1b0>)
 80018de:	f001 fdcf 	bl	8003480 <printf_>
						  break;
 80018e2:	e016      	b.n	8001912 <StartUartTask+0x14e>
			  case 'y':
			  case 'Y':
						  printf("\n\r*** y = %4.1f <- Answer to PC request             ***",_myData.y);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe36 	bl	8000558 <__aeabi_f2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4821      	ldr	r0, [pc, #132]	; (8001978 <StartUartTask+0x1b4>)
 80018f2:	f001 fdc5 	bl	8003480 <printf_>
						  break;
 80018f6:	e00c      	b.n	8001912 <StartUartTask+0x14e>
			  case 'z':
			  case 'Z':
						  printf("\n\r*** z = %4.1f <- Answer to PC request             ***",_myData.z);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe2c 	bl	8000558 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	481d      	ldr	r0, [pc, #116]	; (800197c <StartUartTask+0x1b8>)
 8001906:	f001 fdbb 	bl	8003480 <printf_>
						  break;
 800190a:	e002      	b.n	8001912 <StartUartTask+0x14e>
			  default:
						  printf("\n\r*** Unknown command <- Answer to PC request");
 800190c:	481c      	ldr	r0, [pc, #112]	; (8001980 <StartUartTask+0x1bc>)
 800190e:	f001 fdb7 	bl	8003480 <printf_>
			  }
			  printf("\n\r****************************************************");
 8001912:	4816      	ldr	r0, [pc, #88]	; (800196c <StartUartTask+0x1a8>)
 8001914:	f001 fdb4 	bl	8003480 <printf_>
 8001918:	e01a      	b.n	8001950 <StartUartTask+0x18c>
		  }
		  else
		  {
			  printf("\n\rx:%4.1f y:%4.1f z:%4.1f", _myData.x, _myData.y, _myData.z);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe1b 	bl	8000558 <__aeabi_f2d>
 8001922:	4680      	mov	r8, r0
 8001924:	4689      	mov	r9, r1
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe15 	bl	8000558 <__aeabi_f2d>
 800192e:	4604      	mov	r4, r0
 8001930:	460d      	mov	r5, r1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe0f 	bl	8000558 <__aeabi_f2d>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001942:	e9cd 4500 	strd	r4, r5, [sp]
 8001946:	4642      	mov	r2, r8
 8001948:	464b      	mov	r3, r9
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <StartUartTask+0x1c0>)
 800194c:	f001 fd98 	bl	8003480 <printf_>
		  }

	  vTaskDelay(100 / portTICK_PERIOD_MS);
 8001950:	2064      	movs	r0, #100	; 0x64
 8001952:	f006 fcc9 	bl	80082e8 <vTaskDelay>
	  xQueueReceive(QueueUartTransmitDataHandle, &_myData, portMAX_DELAY);
 8001956:	e749      	b.n	80017ec <StartUartTask+0x28>
 8001958:	20004bac 	.word	0x20004bac
 800195c:	20004bb4 	.word	0x20004bb4
 8001960:	20004c6c 	.word	0x20004c6c
 8001964:	20004b98 	.word	0x20004b98
 8001968:	20004ba4 	.word	0x20004ba4
 800196c:	0800cb28 	.word	0x0800cb28
 8001970:	0800cb60 	.word	0x0800cb60
 8001974:	0800cb98 	.word	0x0800cb98
 8001978:	0800cbd0 	.word	0x0800cbd0
 800197c:	0800cc08 	.word	0x0800cc08
 8001980:	0800cc40 	.word	0x0800cc40
 8001984:	0800cc70 	.word	0x0800cc70

08001988 <CallbackTimerPcRequestSimulator>:
  /* USER CODE END StartUartTask */
}

/* CallbackTimerPcRequestSimulator function */
void CallbackTimerPcRequestSimulator(void *argument)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
//	xSemaphoreTake((SemaphoreHandle_t)SemaphorePcRequestDataToLedHandle, 0);
//	xSemaphoreTake((SemaphoreHandle_t)SemaphorePcRequestDataToTextHandle, 0);
	//printf("\n\rPC");

  /* USER CODE END CallbackTimerPcRequestSimulator */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <CallbackTimerUartTransmitData>:

/* CallbackTimerUartTransmitData function */
void CallbackTimerUartTransmitData(void *argument)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerUartTransmitData */
	xSemaphoreGive(SemaphoreUartTransmitDataHandle);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <CallbackTimerUartTransmitData+0x20>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	f005 fd1f 	bl	80073f0 <xQueueGenericSend>
  /* USER CODE END CallbackTimerUartTransmitData */
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20004bc8 	.word	0x20004bc8

080019c0 <_putchar>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*) &character, 1, 1000);
 80019ca:	1df9      	adds	r1, r7, #7
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	2201      	movs	r2, #1
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <_putchar+0x20>)
 80019d4:	f004 f853 	bl	8005a7e <HAL_UART_Transmit>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20004c6c 	.word	0x20004c6c

080019e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	if (USART2 == huart->Instance)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_UART_RxCpltCallback+0x40>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d112      	bne.n	8001a1c <HAL_UART_RxCpltCallback+0x38>
	{
//		printf("\n\rSomething is comming on UART");
		xSemaphoreTakeFromISR((SemaphoreHandle_t)SemaphorePcRequestDataToLedHandle, NULL);
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_UART_RxCpltCallback+0x44>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 f87c 	bl	8007afc <xQueueReceiveFromISR>
		xSemaphoreTakeFromISR((SemaphoreHandle_t)SemaphorePcRequestDataToTextHandle, NULL);
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_UART_RxCpltCallback+0x48>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f006 f875 	bl	8007afc <xQueueReceiveFromISR>
		HAL_UART_Receive_IT(&huart2, &ReciveBuffer, 1);
 8001a12:	2201      	movs	r2, #1
 8001a14:	4906      	ldr	r1, [pc, #24]	; (8001a30 <HAL_UART_RxCpltCallback+0x4c>)
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <HAL_UART_RxCpltCallback+0x50>)
 8001a18:	f004 f8c3 	bl	8005ba2 <HAL_UART_Receive_IT>
//		printf("\n\rSomething is comming on UART");
	}

}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40004400 	.word	0x40004400
 8001a28:	20004ba8 	.word	0x20004ba8
 8001a2c:	20004ba4 	.word	0x20004ba4
 8001a30:	20004bb4 	.word	0x20004bb4
 8001a34:	20004c6c 	.word	0x20004c6c

08001a38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a29      	ldr	r2, [pc, #164]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b27      	ldr	r3, [pc, #156]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <MX_GPIO_Init+0xc4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	4816      	ldr	r0, [pc, #88]	; (8001b00 <MX_GPIO_Init+0xc8>)
 8001aa8:	f002 fae0 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001ab2:	4814      	ldr	r0, [pc, #80]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001ab4:	f002 fada 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <MX_GPIO_Init+0xc8>)
 8001ad0:	f002 f948 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001ad4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001aee:	f002 f939 	bl	8003d64 <HAL_GPIO_Init>

}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0c:	f001 ff74 	bl	80039f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b10:	f000 f810 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b14:	f7ff ff90 	bl	8001a38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b18:	f001 fed2 	bl	80038c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001b1c:	f001 fccc 	bl	80034b8 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001b20:	f000 f866 	bl	8001bf0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b24:	f004 ff6a 	bl	80069fc <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b28:	f7ff fce4 	bl	80014f4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001b2c:	f004 ff8a 	bl	8006a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <main+0x28>
	...

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	2230      	movs	r2, #48	; 0x30
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 faa2 	bl	800a08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <SystemClock_Config+0xb4>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <SystemClock_Config+0xb4>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <SystemClock_Config+0xb4>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <SystemClock_Config+0xb8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <SystemClock_Config+0xb8>)
 8001b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <SystemClock_Config+0xb8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b90:	2302      	movs	r3, #2
 8001b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b98:	2310      	movs	r3, #16
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fa7b 	bl	80040a0 <HAL_RCC_OscConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001bb0:	f000 f83c 	bl	8001c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fcde 	bl	8004590 <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001bda:	f000 f827 	bl	8001c2c <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3750      	adds	r7, #80	; 0x50
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40007000 	.word	0x40007000

08001bf0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2026      	movs	r0, #38	; 0x26
 8001bfa:	f001 fff7 	bl	8003bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bfe:	2026      	movs	r0, #38	; 0x26
 8001c00:	f002 f810 	bl	8003c24 <HAL_NVIC_EnableIRQ>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c1a:	f001 ff0f 	bl	8003a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40014400 	.word	0x40014400

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <Error_Handler+0x8>

08001c36 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <_out_char+0x1e>
    _putchar(character);
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fea8 	bl	80019c0 <_putchar>
  }
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e002      	b.n	8001c8e <_strnlen_s+0x16>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <_strnlen_s+0x28>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	603a      	str	r2, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f3      	bne.n	8001c88 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	2b2f      	cmp	r3, #47	; 0x2f
 8001cc0:	d904      	bls.n	8001ccc <_is_digit+0x1a>
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b39      	cmp	r3, #57	; 0x39
 8001cc6:	d801      	bhi.n	8001ccc <_is_digit+0x1a>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <_is_digit+0x1c>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001cec:	e00e      	b.n	8001d0c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6011      	str	r1, [r2, #0]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4403      	add	r3, r0
 8001d08:	3b30      	subs	r3, #48	; 0x30
 8001d0a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ffcd 	bl	8001cb2 <_is_digit>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1e7      	bne.n	8001cee <_atoi+0xe>
  }
  return i;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d125      	bne.n	8001d90 <_out_rev+0x68>
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d120      	bne.n	8001d90 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e00a      	b.n	8001d6a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	1c53      	adds	r3, r2, #1
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	68fc      	ldr	r4, [r7, #12]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	2020      	movs	r0, #32
 8001d62:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d3f0      	bcc.n	8001d54 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001d72:	e00d      	b.n	8001d90 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	3b01      	subs	r3, #1
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	4413      	add	r3, r2
 8001d80:	7818      	ldrb	r0, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	1c53      	adds	r3, r2, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	68fc      	ldr	r4, [r7, #12]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	47a0      	blx	r4
  while (len) {
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ee      	bne.n	8001d74 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00e      	beq.n	8001dbe <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001da0:	e007      	b.n	8001db2 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	1c53      	adds	r3, r2, #1
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	68fc      	ldr	r4, [r7, #12]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	2020      	movs	r0, #32
 8001db0:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d8f1      	bhi.n	8001da2 <_out_rev+0x7a>
    }
  }

  return idx;
 8001dbe:	687b      	ldr	r3, [r7, #4]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd90      	pop	{r4, r7, pc}

08001dc8 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d136      	bne.n	8001e4e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d018      	beq.n	8001e18 <_ntoa_format+0x50>
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <_ntoa_format+0x50>
 8001df0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <_ntoa_format+0x3a>
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <_ntoa_format+0x50>
      width--;
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	3b01      	subs	r3, #1
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e08:	e006      	b.n	8001e18 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	61fa      	str	r2, [r7, #28]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4413      	add	r3, r2
 8001e14:	2230      	movs	r2, #48	; 0x30
 8001e16:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d20a      	bcs.n	8001e36 <_ntoa_format+0x6e>
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b1f      	cmp	r3, #31
 8001e24:	d9f1      	bls.n	8001e0a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e26:	e006      	b.n	8001e36 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	61fa      	str	r2, [r7, #28]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4413      	add	r3, r2
 8001e32:	2230      	movs	r2, #48	; 0x30
 8001e34:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <_ntoa_format+0x86>
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d202      	bcs.n	8001e4e <_ntoa_format+0x86>
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b1f      	cmp	r3, #31
 8001e4c:	d9ec      	bls.n	8001e28 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d058      	beq.n	8001f0a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <_ntoa_format+0xc8>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <_ntoa_format+0xc8>
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d003      	beq.n	8001e78 <_ntoa_format+0xb0>
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10b      	bne.n	8001e90 <_ntoa_format+0xc8>
      len--;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <_ntoa_format+0xc8>
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d102      	bne.n	8001e90 <_ntoa_format+0xc8>
        len--;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d10f      	bne.n	8001eb6 <_ntoa_format+0xee>
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <_ntoa_format+0xee>
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b1f      	cmp	r3, #31
 8001ea4:	d807      	bhi.n	8001eb6 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	61fa      	str	r2, [r7, #28]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4413      	add	r3, r2
 8001eb0:	2278      	movs	r2, #120	; 0x78
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e01f      	b.n	8001ef6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d10f      	bne.n	8001edc <_ntoa_format+0x114>
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <_ntoa_format+0x114>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	2b1f      	cmp	r3, #31
 8001eca:	d807      	bhi.n	8001edc <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	61fa      	str	r2, [r7, #28]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	2258      	movs	r2, #88	; 0x58
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e00c      	b.n	8001ef6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d109      	bne.n	8001ef6 <_ntoa_format+0x12e>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2b1f      	cmp	r3, #31
 8001ee6:	d806      	bhi.n	8001ef6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	61fa      	str	r2, [r7, #28]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	2262      	movs	r2, #98	; 0x62
 8001ef4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2b1f      	cmp	r3, #31
 8001efa:	d806      	bhi.n	8001f0a <_ntoa_format+0x142>
      buf[len++] = '0';
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	61fa      	str	r2, [r7, #28]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4413      	add	r3, r2
 8001f06:	2230      	movs	r2, #48	; 0x30
 8001f08:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b1f      	cmp	r3, #31
 8001f0e:	d824      	bhi.n	8001f5a <_ntoa_format+0x192>
    if (negative) {
 8001f10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	61fa      	str	r2, [r7, #28]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4413      	add	r3, r2
 8001f22:	222d      	movs	r2, #45	; 0x2d
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e018      	b.n	8001f5a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	61fa      	str	r2, [r7, #28]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	222b      	movs	r2, #43	; 0x2b
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e00b      	b.n	8001f5a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	61fa      	str	r2, [r7, #28]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4413      	add	r3, r2
 8001f56:	2220      	movs	r2, #32
 8001f58:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	9303      	str	r3, [sp, #12]
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fed9 	bl	8001d28 <_out_rev>
 8001f76:	4603      	mov	r3, r0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b096      	sub	sp, #88	; 0x58
 8001f84:	af08      	add	r7, sp, #32
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d103      	bne.n	8001fa0 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	f023 0310 	bic.w	r3, r3, #16
 8001f9e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <_ntoa_long+0x30>
 8001faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d033      	beq.n	8002018 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8001fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001fb8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001fba:	fb01 f202 	mul.w	r2, r1, r2
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d804      	bhi.n	8001fd6 <_ntoa_long+0x56>
 8001fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fd0:	3330      	adds	r3, #48	; 0x30
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	e00d      	b.n	8001ff2 <_ntoa_long+0x72>
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <_ntoa_long+0x64>
 8001fe0:	2241      	movs	r2, #65	; 0x41
 8001fe2:	e000      	b.n	8001fe6 <_ntoa_long+0x66>
 8001fe4:	2261      	movs	r2, #97	; 0x61
 8001fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fea:	4413      	add	r3, r2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3b0a      	subs	r3, #10
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	1c59      	adds	r1, r3, #1
 8001ff6:	6379      	str	r1, [r7, #52]	; 0x34
 8001ff8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800200c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <_ntoa_long+0x98>
 8002012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002014:	2b1f      	cmp	r3, #31
 8002016:	d9cb      	bls.n	8001fb0 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201a:	9306      	str	r3, [sp, #24]
 800201c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201e:	9305      	str	r3, [sp, #20]
 8002020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002022:	9304      	str	r3, [sp, #16]
 8002024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002026:	9303      	str	r3, [sp, #12]
 8002028:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff fec2 	bl	8001dc8 <_ntoa_format>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3738      	adds	r7, #56	; 0x38
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b096      	sub	sp, #88	; 0x58
 8002052:	af08      	add	r7, sp, #32
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002060:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002064:	4313      	orrs	r3, r2
 8002066:	d103      	bne.n	8002070 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800206a:	f023 0310 	bic.w	r3, r3, #16
 800206e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <_ntoa_long_long+0x34>
 800207a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800207e:	4313      	orrs	r3, r2
 8002080:	d038      	beq.n	80020f4 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 8002082:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002086:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800208a:	f7fe fdb5 	bl	8000bf8 <__aeabi_uldivmod>
 800208e:	4613      	mov	r3, r2
 8002090:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002098:	2b09      	cmp	r3, #9
 800209a:	d804      	bhi.n	80020a6 <_ntoa_long_long+0x58>
 800209c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020a0:	3330      	adds	r3, #48	; 0x30
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	e00d      	b.n	80020c2 <_ntoa_long_long+0x74>
 80020a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <_ntoa_long_long+0x66>
 80020b0:	2241      	movs	r2, #65	; 0x41
 80020b2:	e000      	b.n	80020b6 <_ntoa_long_long+0x68>
 80020b4:	2261      	movs	r2, #97	; 0x61
 80020b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020ba:	4413      	add	r3, r2
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	3b0a      	subs	r3, #10
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c4:	1c59      	adds	r1, r3, #1
 80020c6:	6379      	str	r1, [r7, #52]	; 0x34
 80020c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80020cc:	440b      	add	r3, r1
 80020ce:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80020d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020da:	f7fe fd8d 	bl	8000bf8 <__aeabi_uldivmod>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80020e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020ea:	4313      	orrs	r3, r2
 80020ec:	d002      	beq.n	80020f4 <_ntoa_long_long+0xa6>
 80020ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f0:	2b1f      	cmp	r3, #31
 80020f2:	d9c6      	bls.n	8002082 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80020f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020f8:	9206      	str	r2, [sp, #24]
 80020fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80020fc:	9205      	str	r2, [sp, #20]
 80020fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002100:	9204      	str	r2, [sp, #16]
 8002102:	9303      	str	r3, [sp, #12]
 8002104:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fe54 	bl	8001dc8 <_ntoa_format>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3738      	adds	r7, #56	; 0x38
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	0000      	movs	r0, r0
 800212c:	0000      	movs	r0, r0
	...

08002130 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b09d      	sub	sp, #116	; 0x74
 8002134:	af04      	add	r7, sp, #16
 8002136:	6178      	str	r0, [r7, #20]
 8002138:	6139      	str	r1, [r7, #16]
 800213a:	60fa      	str	r2, [r7, #12]
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800215a:	f7fe fcbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10f      	bne.n	8002184 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	2303      	movs	r3, #3
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	4ba9      	ldr	r3, [pc, #676]	; (8002418 <_ftoa+0x2e8>)
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff fdd4 	bl	8001d28 <_out_rev>
 8002180:	4603      	mov	r3, r0
 8002182:	e22b      	b.n	80025dc <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800218c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002190:	f7fe fcac 	bl	8000aec <__aeabi_dcmplt>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00f      	beq.n	80021ba <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800219a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219c:	9303      	str	r3, [sp, #12]
 800219e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2304      	movs	r3, #4
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	4b9d      	ldr	r3, [pc, #628]	; (800241c <_ftoa+0x2ec>)
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	6939      	ldr	r1, [r7, #16]
 80021b0:	6978      	ldr	r0, [r7, #20]
 80021b2:	f7ff fdb9 	bl	8001d28 <_out_rev>
 80021b6:	4603      	mov	r3, r0
 80021b8:	e210      	b.n	80025dc <_ftoa+0x4ac>
  if (value > DBL_MAX)
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	4b98      	ldr	r3, [pc, #608]	; (8002420 <_ftoa+0x2f0>)
 80021c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021c4:	f7fe fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d01d      	beq.n	800220a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80021ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <_ftoa+0xac>
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <_ftoa+0x2f4>)
 80021da:	e000      	b.n	80021de <_ftoa+0xae>
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <_ftoa+0x2f8>)
 80021de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021e0:	f002 0204 	and.w	r2, r2, #4
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	d001      	beq.n	80021ec <_ftoa+0xbc>
 80021e8:	2204      	movs	r2, #4
 80021ea:	e000      	b.n	80021ee <_ftoa+0xbe>
 80021ec:	2203      	movs	r2, #3
 80021ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80021f0:	9103      	str	r1, [sp, #12]
 80021f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80021f4:	9102      	str	r1, [sp, #8]
 80021f6:	9201      	str	r2, [sp, #4]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	6939      	ldr	r1, [r7, #16]
 8002200:	6978      	ldr	r0, [r7, #20]
 8002202:	f7ff fd91 	bl	8001d28 <_out_rev>
 8002206:	4603      	mov	r3, r0
 8002208:	e1e8      	b.n	80025dc <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800220a:	a37f      	add	r3, pc, #508	; (adr r3, 8002408 <_ftoa+0x2d8>)
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002214:	f7fe fc88 	bl	8000b28 <__aeabi_dcmpgt>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <_ftoa+0x102>
 800221e:	a37c      	add	r3, pc, #496	; (adr r3, 8002410 <_ftoa+0x2e0>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002228:	f7fe fc60 	bl	8000aec <__aeabi_dcmplt>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00f      	beq.n	8002252 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	ed97 0b00 	vldr	d0, [r7]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f000 f9d1 	bl	80025f0 <_etoa>
 800224e:	4603      	mov	r3, r0
 8002250:	e1c4      	b.n	80025dc <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002264:	f7fe fc42 	bl	8000aec <__aeabi_dcmplt>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00e      	beq.n	800228c <_ftoa+0x15c>
    negative = true;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002278:	f04f 0000 	mov.w	r0, #0
 800227c:	f04f 0100 	mov.w	r1, #0
 8002280:	f7fe f80a 	bl	8000298 <__aeabi_dsub>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800228c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10e      	bne.n	80022b4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002296:	2306      	movs	r3, #6
 8002298:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800229a:	e00b      	b.n	80022b4 <_ftoa+0x184>
    buf[len++] = '0';
 800229c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022a6:	4413      	add	r3, r2
 80022a8:	2230      	movs	r2, #48	; 0x30
 80022aa:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80022ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b0:	3b01      	subs	r3, #1
 80022b2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80022b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b6:	2b1f      	cmp	r3, #31
 80022b8:	d802      	bhi.n	80022c0 <_ftoa+0x190>
 80022ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022bc:	2b09      	cmp	r3, #9
 80022be:	d8ed      	bhi.n	800229c <_ftoa+0x16c>
  }

  int whole = (int)value;
 80022c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c4:	f7fe fc50 	bl	8000b68 <__aeabi_d2iz>
 80022c8:	4603      	mov	r3, r0
 80022ca:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80022cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80022ce:	f7fe f931 	bl	8000534 <__aeabi_i2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022da:	f7fd ffdd 	bl	8000298 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	4a51      	ldr	r2, [pc, #324]	; (800242c <_ftoa+0x2fc>)
 80022e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f989 	bl	8000608 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80022fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002302:	f7fe fc59 	bl	8000bb8 <__aeabi_d2uiz>
 8002306:	4603      	mov	r3, r0
 8002308:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800230a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800230c:	f7fe f902 	bl	8000514 <__aeabi_ui2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002318:	f7fd ffbe 	bl	8000298 <__aeabi_dsub>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b41      	ldr	r3, [pc, #260]	; (8002430 <_ftoa+0x300>)
 800232a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800232e:	f7fe fbfb 	bl	8000b28 <__aeabi_dcmpgt>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d016      	beq.n	8002366 <_ftoa+0x236>
    ++frac;
 8002338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233a:	3301      	adds	r3, #1
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800233e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002340:	f7fe f8e8 	bl	8000514 <__aeabi_ui2d>
 8002344:	4a39      	ldr	r2, [pc, #228]	; (800242c <_ftoa+0x2fc>)
 8002346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe fbe0 	bl	8000b14 <__aeabi_dcmpge>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01a      	beq.n	8002390 <_ftoa+0x260>
      frac = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	3301      	adds	r3, #1
 8002362:	657b      	str	r3, [r7, #84]	; 0x54
 8002364:	e014      	b.n	8002390 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <_ftoa+0x300>)
 800236c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002370:	f7fe fbbc 	bl	8000aec <__aeabi_dcmplt>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800237a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <_ftoa+0x25a>
 8002380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800238a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238c:	3301      	adds	r3, #1
 800238e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002392:	2b00      	cmp	r3, #0
 8002394:	d134      	bne.n	8002400 <_ftoa+0x2d0>
    diff = value - (double)whole;
 8002396:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002398:	f7fe f8cc 	bl	8000534 <__aeabi_i2d>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023a4:	f7fd ff78 	bl	8000298 <__aeabi_dsub>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80023b0:	2301      	movs	r3, #1
 80023b2:	461c      	mov	r4, r3
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <_ftoa+0x300>)
 80023ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023be:	f7fe fb95 	bl	8000aec <__aeabi_dcmplt>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <_ftoa+0x29c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	461c      	mov	r4, r3
 80023cc:	b2e3      	uxtb	r3, r4
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <_ftoa+0x2bc>
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <_ftoa+0x300>)
 80023de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023e2:	f7fe fba1 	bl	8000b28 <__aeabi_dcmpgt>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d067      	beq.n	80024bc <_ftoa+0x38c>
 80023ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8085 	beq.w	8002502 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80023f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fa:	3301      	adds	r3, #1
 80023fc:	657b      	str	r3, [r7, #84]	; 0x54
 80023fe:	e080      	b.n	8002502 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8002400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002402:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002404:	e037      	b.n	8002476 <_ftoa+0x346>
 8002406:	bf00      	nop
 8002408:	00000000 	.word	0x00000000
 800240c:	41cdcd65 	.word	0x41cdcd65
 8002410:	00000000 	.word	0x00000000
 8002414:	c1cdcd65 	.word	0xc1cdcd65
 8002418:	0800cc8c 	.word	0x0800cc8c
 800241c:	0800cc90 	.word	0x0800cc90
 8002420:	7fefffff 	.word	0x7fefffff
 8002424:	0800cc98 	.word	0x0800cc98
 8002428:	0800cca0 	.word	0x0800cca0
 800242c:	0800cde0 	.word	0x0800cde0
 8002430:	3fe00000 	.word	0x3fe00000
      --count;
 8002434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002436:	3b01      	subs	r3, #1
 8002438:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800243a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800243c:	4b69      	ldr	r3, [pc, #420]	; (80025e4 <_ftoa+0x4b4>)
 800243e:	fba3 2301 	umull	r2, r3, r3, r1
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	1aca      	subs	r2, r1, r3
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	1c59      	adds	r1, r3, #1
 8002454:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002456:	3230      	adds	r2, #48	; 0x30
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800245e:	440b      	add	r3, r1
 8002460:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002466:	4a5f      	ldr	r2, [pc, #380]	; (80025e4 <_ftoa+0x4b4>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	653b      	str	r3, [r7, #80]	; 0x50
 8002470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002478:	2b1f      	cmp	r3, #31
 800247a:	d9db      	bls.n	8002434 <_ftoa+0x304>
 800247c:	e00a      	b.n	8002494 <_ftoa+0x364>
        break;
 800247e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002480:	e008      	b.n	8002494 <_ftoa+0x364>
      buf[len++] = '0';
 8002482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002488:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800248c:	4413      	add	r3, r2
 800248e:	2230      	movs	r2, #48	; 0x30
 8002490:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002496:	2b1f      	cmp	r3, #31
 8002498:	d804      	bhi.n	80024a4 <_ftoa+0x374>
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80024a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a6:	2b1f      	cmp	r3, #31
 80024a8:	d82b      	bhi.n	8002502 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024b4:	4413      	add	r3, r2
 80024b6:	222e      	movs	r2, #46	; 0x2e
 80024b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80024bc:	e021      	b.n	8002502 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 80024be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <_ftoa+0x4b8>)
 80024c2:	fb83 1302 	smull	r1, r3, r3, r2
 80024c6:	1099      	asrs	r1, r3, #2
 80024c8:	17d3      	asrs	r3, r2, #31
 80024ca:	1ac9      	subs	r1, r1, r3
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	1ad1      	subs	r1, r2, r3
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024da:	1c59      	adds	r1, r3, #1
 80024dc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80024de:	3230      	adds	r2, #48	; 0x30
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80024e6:	440b      	add	r3, r1
 80024e8:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	4a3e      	ldr	r2, [pc, #248]	; (80025e8 <_ftoa+0x4b8>)
 80024f0:	fb82 1203 	smull	r1, r2, r2, r3
 80024f4:	1092      	asrs	r2, r2, #2
 80024f6:	17db      	asrs	r3, r3, #31
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	657b      	str	r3, [r7, #84]	; 0x54
 80024fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002504:	2b1f      	cmp	r3, #31
 8002506:	d9da      	bls.n	80024be <_ftoa+0x38e>
 8002508:	e000      	b.n	800250c <_ftoa+0x3dc>
      break;
 800250a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800250c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d124      	bne.n	8002560 <_ftoa+0x430>
 8002516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01f      	beq.n	8002560 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002522:	2b00      	cmp	r3, #0
 8002524:	d015      	beq.n	8002552 <_ftoa+0x422>
 8002526:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <_ftoa+0x408>
 800252e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <_ftoa+0x422>
      width--;
 8002538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253a:	3b01      	subs	r3, #1
 800253c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800253e:	e008      	b.n	8002552 <_ftoa+0x422>
      buf[len++] = '0';
 8002540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002546:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800254a:	4413      	add	r3, r2
 800254c:	2230      	movs	r2, #48	; 0x30
 800254e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002552:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002556:	429a      	cmp	r2, r3
 8002558:	d202      	bcs.n	8002560 <_ftoa+0x430>
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	2b1f      	cmp	r3, #31
 800255e:	d9ef      	bls.n	8002540 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002562:	2b1f      	cmp	r3, #31
 8002564:	d82a      	bhi.n	80025bc <_ftoa+0x48c>
    if (negative) {
 8002566:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <_ftoa+0x452>
      buf[len++] = '-';
 800256e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002574:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002578:	4413      	add	r3, r2
 800257a:	222d      	movs	r2, #45	; 0x2d
 800257c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002580:	e01c      	b.n	80025bc <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8002582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800258c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002592:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002596:	4413      	add	r3, r2
 8002598:	222b      	movs	r2, #43	; 0x2b
 800259a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800259e:	e00d      	b.n	80025bc <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 80025a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <_ftoa+0x48c>
      buf[len++] = ' ';
 80025aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025b4:	4413      	add	r3, r2
 80025b6:	2220      	movs	r2, #32
 80025b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80025bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025be:	9303      	str	r3, [sp, #12]
 80025c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	f107 0318 	add.w	r3, r7, #24
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	6939      	ldr	r1, [r7, #16]
 80025d4:	6978      	ldr	r0, [r7, #20]
 80025d6:	f7ff fba7 	bl	8001d28 <_out_rev>
 80025da:	4603      	mov	r3, r0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3764      	adds	r7, #100	; 0x64
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	cccccccd 	.word	0xcccccccd
 80025e8:	66666667 	.word	0x66666667
 80025ec:	00000000 	.word	0x00000000

080025f0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f4:	b09d      	sub	sp, #116	; 0x74
 80025f6:	af06      	add	r7, sp, #24
 80025f8:	61f8      	str	r0, [r7, #28]
 80025fa:	61b9      	str	r1, [r7, #24]
 80025fc:	617a      	str	r2, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002608:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800260c:	f7fe fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d014      	beq.n	8002640 <_etoa+0x50>
 8002616:	f04f 32ff 	mov.w	r2, #4294967295
 800261a:	4bc3      	ldr	r3, [pc, #780]	; (8002928 <_etoa+0x338>)
 800261c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002620:	f7fe fa82 	bl	8000b28 <__aeabi_dcmpgt>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <_etoa+0x50>
 800262a:	f04f 32ff 	mov.w	r2, #4294967295
 800262e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002636:	f7fe fa59 	bl	8000aec <__aeabi_dcmplt>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	ed97 0b02 	vldr	d0, [r7, #8]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	69f8      	ldr	r0, [r7, #28]
 800265e:	f7ff fd67 	bl	8002130 <_ftoa>
 8002662:	4603      	mov	r3, r0
 8002664:	e245      	b.n	8002af2 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8002666:	2301      	movs	r3, #1
 8002668:	461e      	mov	r6, r3
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002676:	f7fe fa39 	bl	8000aec <__aeabi_dcmplt>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <_etoa+0x94>
 8002680:	2300      	movs	r3, #0
 8002682:	461e      	mov	r6, r3
 8002684:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002688:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <_etoa+0xac>
    value = -value;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800269a:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800269c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80026a8:	2306      	movs	r3, #6
 80026aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80026ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80026b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	0d0a      	lsrs	r2, r1, #20
 80026c4:	2300      	movs	r3, #0
 80026c6:	4613      	mov	r3, r2
 80026c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80026d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026d6:	f04f 30ff 	mov.w	r0, #4294967295
 80026da:	4994      	ldr	r1, [pc, #592]	; (800292c <_etoa+0x33c>)
 80026dc:	ea02 0400 	and.w	r4, r2, r0
 80026e0:	ea03 0501 	and.w	r5, r3, r1
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	4b91      	ldr	r3, [pc, #580]	; (8002930 <_etoa+0x340>)
 80026ea:	ea44 0802 	orr.w	r8, r4, r2
 80026ee:	ea45 0903 	orr.w	r9, r5, r3
 80026f2:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80026f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026f8:	f7fd ff1c 	bl	8000534 <__aeabi_i2d>
 80026fc:	a37e      	add	r3, pc, #504	; (adr r3, 80028f8 <_etoa+0x308>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff81 	bl	8000608 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	a37c      	add	r3, pc, #496	; (adr r3, 8002900 <_etoa+0x310>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd fdc2 	bl	800029c <__adddf3>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4614      	mov	r4, r2
 800271e:	461d      	mov	r5, r3
 8002720:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b82      	ldr	r3, [pc, #520]	; (8002934 <_etoa+0x344>)
 800272a:	f7fd fdb5 	bl	8000298 <__aeabi_dsub>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	a374      	add	r3, pc, #464	; (adr r3, 8002908 <_etoa+0x318>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd ff64 	bl	8000608 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fda8 	bl	800029c <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe fa08 	bl	8000b68 <__aeabi_d2iz>
 8002758:	4603      	mov	r3, r0
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800275c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800275e:	f7fd fee9 	bl	8000534 <__aeabi_i2d>
 8002762:	a36b      	add	r3, pc, #428	; (adr r3, 8002910 <_etoa+0x320>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f7fd ff4e 	bl	8000608 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <_etoa+0x348>)
 800277a:	f7fd fd8f 	bl	800029c <__adddf3>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f7fe f9ef 	bl	8000b68 <__aeabi_d2iz>
 800278a:	4603      	mov	r3, r0
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800278e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002790:	f7fd fed0 	bl	8000534 <__aeabi_i2d>
 8002794:	a360      	add	r3, pc, #384	; (adr r3, 8002918 <_etoa+0x328>)
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f7fd ff35 	bl	8000608 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4614      	mov	r4, r2
 80027a4:	461d      	mov	r5, r3
 80027a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027a8:	f7fd fec4 	bl	8000534 <__aeabi_i2d>
 80027ac:	a35c      	add	r3, pc, #368	; (adr r3, 8002920 <_etoa+0x330>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff29 	bl	8000608 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4620      	mov	r0, r4
 80027bc:	4629      	mov	r1, r5
 80027be:	f7fd fd6b 	bl	8000298 <__aeabi_dsub>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80027ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80027d2:	f7fd ff19 	bl	8000608 <__aeabi_dmul>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80027de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80027e4:	4618      	mov	r0, r3
 80027e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	0503      	lsls	r3, r0, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80027fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	f7fd fd49 	bl	800029c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4690      	mov	r8, r2
 8002810:	4699      	mov	r9, r3
 8002812:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800281e:	f7fd fd3b 	bl	8000298 <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4692      	mov	sl, r2
 8002828:	469b      	mov	fp, r3
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <_etoa+0x34c>)
 8002830:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002834:	f7fe f812 	bl	800085c <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <_etoa+0x350>)
 8002846:	f7fd fd29 	bl	800029c <__adddf3>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002852:	f7fe f803 	bl	800085c <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <_etoa+0x354>)
 8002864:	f7fd fd1a 	bl	800029c <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002870:	f7fd fff4 	bl	800085c <__aeabi_ddiv>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4650      	mov	r0, sl
 800287a:	4659      	mov	r1, fp
 800287c:	f7fd fd0e 	bl	800029c <__adddf3>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4640      	mov	r0, r8
 8002886:	4649      	mov	r1, r9
 8002888:	f7fd ffe8 	bl	800085c <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <_etoa+0x340>)
 800289a:	f7fd fcff 	bl	800029c <__adddf3>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4620      	mov	r0, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	f7fd feaf 	bl	8000608 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80028b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ba:	f7fe f917 	bl	8000aec <__aeabi_dcmplt>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <_etoa+0x2f0>
    expval--;
 80028c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c6:	3b01      	subs	r3, #1
 80028c8:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80028ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <_etoa+0x350>)
 80028d4:	f7fd ffc2 	bl	800085c <__aeabi_ddiv>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	2b63      	cmp	r3, #99	; 0x63
 80028e4:	dc30      	bgt.n	8002948 <_etoa+0x358>
 80028e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e8:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80028ec:	db2c      	blt.n	8002948 <_etoa+0x358>
 80028ee:	2304      	movs	r3, #4
 80028f0:	e02b      	b.n	800294a <_etoa+0x35a>
 80028f2:	bf00      	nop
 80028f4:	f3af 8000 	nop.w
 80028f8:	509f79fb 	.word	0x509f79fb
 80028fc:	3fd34413 	.word	0x3fd34413
 8002900:	8b60c8b3 	.word	0x8b60c8b3
 8002904:	3fc68a28 	.word	0x3fc68a28
 8002908:	636f4361 	.word	0x636f4361
 800290c:	3fd287a7 	.word	0x3fd287a7
 8002910:	0979a371 	.word	0x0979a371
 8002914:	400a934f 	.word	0x400a934f
 8002918:	bbb55516 	.word	0xbbb55516
 800291c:	40026bb1 	.word	0x40026bb1
 8002920:	fefa39ef 	.word	0xfefa39ef
 8002924:	3fe62e42 	.word	0x3fe62e42
 8002928:	7fefffff 	.word	0x7fefffff
 800292c:	000fffff 	.word	0x000fffff
 8002930:	3ff00000 	.word	0x3ff00000
 8002934:	3ff80000 	.word	0x3ff80000
 8002938:	3fe00000 	.word	0x3fe00000
 800293c:	402c0000 	.word	0x402c0000
 8002940:	40240000 	.word	0x40240000
 8002944:	40180000 	.word	0x40180000
 8002948:	2305      	movs	r3, #5
 800294a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800294c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002954:	2b00      	cmp	r3, #0
 8002956:	d03d      	beq.n	80029d4 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002958:	a369      	add	r3, pc, #420	; (adr r3, 8002b00 <_etoa+0x510>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002962:	f7fe f8d7 	bl	8000b14 <__aeabi_dcmpge>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d024      	beq.n	80029b6 <_etoa+0x3c6>
 800296c:	a366      	add	r3, pc, #408	; (adr r3, 8002b08 <_etoa+0x518>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002976:	f7fe f8b9 	bl	8000aec <__aeabi_dcmplt>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01a      	beq.n	80029b6 <_etoa+0x3c6>
      if ((int)prec > expval) {
 8002980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002986:	429a      	cmp	r2, r3
 8002988:	da07      	bge.n	800299a <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 800298a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800298e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002998:	e002      	b.n	80029a0 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80029a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	657b      	str	r3, [r7, #84]	; 0x54
 80029b4:	e00e      	b.n	80029d4 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80029b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <_etoa+0x3e4>
 80029be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <_etoa+0x3e4>
        --prec;
 80029ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80029d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 80029da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80029de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d904      	bls.n	80029ee <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80029e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ec:	e001      	b.n	80029f2 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80029f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <_etoa+0x418>
 80029fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <_etoa+0x432>
    value /= conv.F;
 8002a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a16:	f7fd ff21 	bl	800085c <__aeabi_ddiv>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002a26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <_etoa+0x44c>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	e003      	b.n	8002a44 <_etoa+0x454>
 8002a3c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a40:	ed87 7b00 	vstr	d7, [r7]
 8002a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	ed97 0b00 	vldr	d0, [r7]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	69b9      	ldr	r1, [r7, #24]
 8002a62:	69f8      	ldr	r0, [r7, #28]
 8002a64:	f7ff fb64 	bl	8002130 <_ftoa>
 8002a68:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d03f      	beq.n	8002af0 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <_etoa+0x490>
 8002a7c:	2045      	movs	r0, #69	; 0x45
 8002a7e:	e000      	b.n	8002a82 <_etoa+0x492>
 8002a80:	2065      	movs	r0, #101	; 0x65
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	1c53      	adds	r3, r2, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	69fc      	ldr	r4, [r7, #28]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	69b9      	ldr	r1, [r7, #24]
 8002a8e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bfb8      	it	lt
 8002a96:	425b      	neglt	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	0fdb      	lsrs	r3, r3, #31
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	9105      	str	r1, [sp, #20]
 8002aa8:	9204      	str	r2, [sp, #16]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	9203      	str	r2, [sp, #12]
 8002aae:	220a      	movs	r2, #10
 8002ab0:	9202      	str	r2, [sp, #8]
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	9000      	str	r0, [sp, #0]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	69f8      	ldr	r0, [r7, #28]
 8002abe:	f7ff fa5f 	bl	8001f80 <_ntoa_long>
 8002ac2:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00f      	beq.n	8002af0 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002ad0:	e007      	b.n	8002ae2 <_etoa+0x4f2>
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	1c53      	adds	r3, r2, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	69fc      	ldr	r4, [r7, #28]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	2020      	movs	r0, #32
 8002ae0:	47a0      	blx	r4
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f0      	bhi.n	8002ad2 <_etoa+0x4e2>
    }
  }
  return idx;
 8002af0:	697b      	ldr	r3, [r7, #20]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	375c      	adds	r7, #92	; 0x5c
 8002af6:	46bd      	mov	sp, r7
 8002af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002afc:	f3af 8000 	nop.w
 8002b00:	eb1c432d 	.word	0xeb1c432d
 8002b04:	3f1a36e2 	.word	0x3f1a36e2
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	412e8480 	.word	0x412e8480

08002b10 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b0a0      	sub	sp, #128	; 0x80
 8002b14:	af0a      	add	r7, sp, #40	; 0x28
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f040 8494 	bne.w	8003452 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 8002b2a:	4ba0      	ldr	r3, [pc, #640]	; (8002dac <_vsnprintf+0x29c>)
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002b2e:	f000 bc90 	b.w	8003452 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b25      	cmp	r3, #37	; 0x25
 8002b38:	d00d      	beq.n	8002b56 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7818      	ldrb	r0, [r3, #0]
 8002b3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b40:	1c53      	adds	r3, r2, #1
 8002b42:	647b      	str	r3, [r7, #68]	; 0x44
 8002b44:	68fc      	ldr	r4, [r7, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	47a0      	blx	r4
      format++;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	603b      	str	r3, [r7, #0]
      continue;
 8002b52:	f000 bc7e 	b.w	8003452 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	3b20      	subs	r3, #32
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d856      	bhi.n	8002c18 <_vsnprintf+0x108>
 8002b6a:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <_vsnprintf+0x60>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002bf1 	.word	0x08002bf1
 8002b74:	08002c19 	.word	0x08002c19
 8002b78:	08002c19 	.word	0x08002c19
 8002b7c:	08002c05 	.word	0x08002c05
 8002b80:	08002c19 	.word	0x08002c19
 8002b84:	08002c19 	.word	0x08002c19
 8002b88:	08002c19 	.word	0x08002c19
 8002b8c:	08002c19 	.word	0x08002c19
 8002b90:	08002c19 	.word	0x08002c19
 8002b94:	08002c19 	.word	0x08002c19
 8002b98:	08002c19 	.word	0x08002c19
 8002b9c:	08002bdd 	.word	0x08002bdd
 8002ba0:	08002c19 	.word	0x08002c19
 8002ba4:	08002bc9 	.word	0x08002bc9
 8002ba8:	08002c19 	.word	0x08002c19
 8002bac:	08002c19 	.word	0x08002c19
 8002bb0:	08002bb5 	.word	0x08002bb5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	657b      	str	r3, [r7, #84]	; 0x54
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc6:	e02a      	b.n	8002c1e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bda:	e020      	b.n	8002c1e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	657b      	str	r3, [r7, #84]	; 0x54
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	2301      	movs	r3, #1
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bee:	e016      	b.n	8002c1e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf2:	f043 0308 	orr.w	r3, r3, #8
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c02:	e00c      	b.n	8002c1e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	2301      	movs	r3, #1
 8002c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c16:	e002      	b.n	8002c1e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c1c:	bf00      	nop
      }
    } while (n);
 8002c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d19d      	bne.n	8002b60 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f840 	bl	8001cb2 <_is_digit>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <_vsnprintf+0x134>
      width = _atoi(&format);
 8002c38:	463b      	mov	r3, r7
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f850 	bl	8001ce0 <_atoi>
 8002c40:	6538      	str	r0, [r7, #80]	; 0x50
 8002c42:	e018      	b.n	8002c76 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b2a      	cmp	r3, #42	; 0x2a
 8002c4a:	d114      	bne.n	8002c76 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8002c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c4e:	1d1a      	adds	r2, r3, #4
 8002c50:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da07      	bge.n	8002c6c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	425b      	negs	r3, r3
 8002c68:	653b      	str	r3, [r7, #80]	; 0x50
 8002c6a:	e001      	b.n	8002c70 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c80:	d124      	bne.n	8002ccc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8002c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c88:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff f80c 	bl	8001cb2 <_is_digit>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f81c 	bl	8001ce0 <_atoi>
 8002ca8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002caa:	e00f      	b.n	8002ccc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb2:	d10b      	bne.n	8002ccc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8002cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	66ba      	str	r2, [r7, #104]	; 0x68
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3b68      	subs	r3, #104	; 0x68
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d866      	bhi.n	8002da4 <_vsnprintf+0x294>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <_vsnprintf+0x1cc>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002d4f 	.word	0x08002d4f
 8002ce0:	08002da5 	.word	0x08002da5
 8002ce4:	08002d85 	.word	0x08002d85
 8002ce8:	08002da5 	.word	0x08002da5
 8002cec:	08002d29 	.word	0x08002d29
 8002cf0:	08002da5 	.word	0x08002da5
 8002cf4:	08002da5 	.word	0x08002da5
 8002cf8:	08002da5 	.word	0x08002da5
 8002cfc:	08002da5 	.word	0x08002da5
 8002d00:	08002da5 	.word	0x08002da5
 8002d04:	08002da5 	.word	0x08002da5
 8002d08:	08002da5 	.word	0x08002da5
 8002d0c:	08002d75 	.word	0x08002d75
 8002d10:	08002da5 	.word	0x08002da5
 8002d14:	08002da5 	.word	0x08002da5
 8002d18:	08002da5 	.word	0x08002da5
 8002d1c:	08002da5 	.word	0x08002da5
 8002d20:	08002da5 	.word	0x08002da5
 8002d24:	08002d95 	.word	0x08002d95
      case 'l' :
        flags |= FLAGS_LONG;
 8002d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b6c      	cmp	r3, #108	; 0x6c
 8002d3c:	d134      	bne.n	8002da8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8002d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d44:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	603b      	str	r3, [r7, #0]
        }
        break;
 8002d4c:	e02c      	b.n	8002da8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d54:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b68      	cmp	r3, #104	; 0x68
 8002d62:	d125      	bne.n	8002db0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8002d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	603b      	str	r3, [r7, #0]
        }
        break;
 8002d72:	e01d      	b.n	8002db0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	603b      	str	r3, [r7, #0]
        break;
 8002d82:	e016      	b.n	8002db2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	603b      	str	r3, [r7, #0]
        break;
 8002d92:	e00e      	b.n	8002db2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	603b      	str	r3, [r7, #0]
        break;
 8002da2:	e006      	b.n	8002db2 <_vsnprintf+0x2a2>
      default :
        break;
 8002da4:	bf00      	nop
 8002da6:	e004      	b.n	8002db2 <_vsnprintf+0x2a2>
        break;
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <_vsnprintf+0x2a2>
 8002dac:	08001c37 	.word	0x08001c37
        break;
 8002db0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3b25      	subs	r3, #37	; 0x25
 8002db8:	2b53      	cmp	r3, #83	; 0x53
 8002dba:	f200 833d 	bhi.w	8003438 <_vsnprintf+0x928>
 8002dbe:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <_vsnprintf+0x2b4>)
 8002dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc4:	08003421 	.word	0x08003421
 8002dc8:	08003439 	.word	0x08003439
 8002dcc:	08003439 	.word	0x08003439
 8002dd0:	08003439 	.word	0x08003439
 8002dd4:	08003439 	.word	0x08003439
 8002dd8:	08003439 	.word	0x08003439
 8002ddc:	08003439 	.word	0x08003439
 8002de0:	08003439 	.word	0x08003439
 8002de4:	08003439 	.word	0x08003439
 8002de8:	08003439 	.word	0x08003439
 8002dec:	08003439 	.word	0x08003439
 8002df0:	08003439 	.word	0x08003439
 8002df4:	08003439 	.word	0x08003439
 8002df8:	08003439 	.word	0x08003439
 8002dfc:	08003439 	.word	0x08003439
 8002e00:	08003439 	.word	0x08003439
 8002e04:	08003439 	.word	0x08003439
 8002e08:	08003439 	.word	0x08003439
 8002e0c:	08003439 	.word	0x08003439
 8002e10:	08003439 	.word	0x08003439
 8002e14:	08003439 	.word	0x08003439
 8002e18:	08003439 	.word	0x08003439
 8002e1c:	08003439 	.word	0x08003439
 8002e20:	08003439 	.word	0x08003439
 8002e24:	08003439 	.word	0x08003439
 8002e28:	08003439 	.word	0x08003439
 8002e2c:	08003439 	.word	0x08003439
 8002e30:	08003439 	.word	0x08003439
 8002e34:	08003439 	.word	0x08003439
 8002e38:	08003439 	.word	0x08003439
 8002e3c:	08003439 	.word	0x08003439
 8002e40:	08003439 	.word	0x08003439
 8002e44:	080031ef 	.word	0x080031ef
 8002e48:	080031a3 	.word	0x080031a3
 8002e4c:	080031ef 	.word	0x080031ef
 8002e50:	08003439 	.word	0x08003439
 8002e54:	08003439 	.word	0x08003439
 8002e58:	08003439 	.word	0x08003439
 8002e5c:	08003439 	.word	0x08003439
 8002e60:	08003439 	.word	0x08003439
 8002e64:	08003439 	.word	0x08003439
 8002e68:	08003439 	.word	0x08003439
 8002e6c:	08003439 	.word	0x08003439
 8002e70:	08003439 	.word	0x08003439
 8002e74:	08003439 	.word	0x08003439
 8002e78:	08003439 	.word	0x08003439
 8002e7c:	08003439 	.word	0x08003439
 8002e80:	08003439 	.word	0x08003439
 8002e84:	08003439 	.word	0x08003439
 8002e88:	08003439 	.word	0x08003439
 8002e8c:	08003439 	.word	0x08003439
 8002e90:	08002f15 	.word	0x08002f15
 8002e94:	08003439 	.word	0x08003439
 8002e98:	08003439 	.word	0x08003439
 8002e9c:	08003439 	.word	0x08003439
 8002ea0:	08003439 	.word	0x08003439
 8002ea4:	08003439 	.word	0x08003439
 8002ea8:	08003439 	.word	0x08003439
 8002eac:	08003439 	.word	0x08003439
 8002eb0:	08003439 	.word	0x08003439
 8002eb4:	08003439 	.word	0x08003439
 8002eb8:	08002f15 	.word	0x08002f15
 8002ebc:	0800325b 	.word	0x0800325b
 8002ec0:	08002f15 	.word	0x08002f15
 8002ec4:	080031ef 	.word	0x080031ef
 8002ec8:	080031a3 	.word	0x080031a3
 8002ecc:	080031ef 	.word	0x080031ef
 8002ed0:	08003439 	.word	0x08003439
 8002ed4:	08002f15 	.word	0x08002f15
 8002ed8:	08003439 	.word	0x08003439
 8002edc:	08003439 	.word	0x08003439
 8002ee0:	08003439 	.word	0x08003439
 8002ee4:	08003439 	.word	0x08003439
 8002ee8:	08003439 	.word	0x08003439
 8002eec:	08002f15 	.word	0x08002f15
 8002ef0:	08003393 	.word	0x08003393
 8002ef4:	08003439 	.word	0x08003439
 8002ef8:	08003439 	.word	0x08003439
 8002efc:	080032cf 	.word	0x080032cf
 8002f00:	08003439 	.word	0x08003439
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08003439 	.word	0x08003439
 8002f0c:	08003439 	.word	0x08003439
 8002f10:	08002f15 	.word	0x08002f15
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b78      	cmp	r3, #120	; 0x78
 8002f1a:	d003      	beq.n	8002f24 <_vsnprintf+0x414>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b58      	cmp	r3, #88	; 0x58
 8002f22:	d102      	bne.n	8002f2a <_vsnprintf+0x41a>
          base = 16U;
 8002f24:	2310      	movs	r3, #16
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
 8002f28:	e013      	b.n	8002f52 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b6f      	cmp	r3, #111	; 0x6f
 8002f30:	d102      	bne.n	8002f38 <_vsnprintf+0x428>
          base =  8U;
 8002f32:	2308      	movs	r3, #8
 8002f34:	643b      	str	r3, [r7, #64]	; 0x40
 8002f36:	e00c      	b.n	8002f52 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b62      	cmp	r3, #98	; 0x62
 8002f3e:	d102      	bne.n	8002f46 <_vsnprintf+0x436>
          base =  2U;
 8002f40:	2302      	movs	r3, #2
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
 8002f44:	e005      	b.n	8002f52 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002f46:	230a      	movs	r3, #10
 8002f48:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4c:	f023 0310 	bic.w	r3, r3, #16
 8002f50:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b58      	cmp	r3, #88	; 0x58
 8002f58:	d103      	bne.n	8002f62 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5c:	f043 0320 	orr.w	r3, r3, #32
 8002f60:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b69      	cmp	r3, #105	; 0x69
 8002f68:	d007      	beq.n	8002f7a <_vsnprintf+0x46a>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d003      	beq.n	8002f7a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f74:	f023 030c 	bic.w	r3, r3, #12
 8002f78:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8002f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b69      	cmp	r3, #105	; 0x69
 8002f92:	d004      	beq.n	8002f9e <_vsnprintf+0x48e>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	f040 808e 	bne.w	80030ba <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02f      	beq.n	8003008 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002faa:	3307      	adds	r3, #7
 8002fac:	f023 0307 	bic.w	r3, r3, #7
 8002fb0:	f103 0208 	add.w	r2, r3, #8
 8002fb4:	66ba      	str	r2, [r7, #104]	; 0x68
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002fbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	f173 0100 	sbcs.w	r1, r3, #0
 8002fc8:	da02      	bge.n	8002fd0 <_vsnprintf+0x4c0>
 8002fca:	4252      	negs	r2, r2
 8002fcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	0fdb      	lsrs	r3, r3, #31
 8002fd8:	b2dc      	uxtb	r4, r3
 8002fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002fe4:	9508      	str	r5, [sp, #32]
 8002fe6:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002fe8:	9507      	str	r5, [sp, #28]
 8002fea:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002fec:	9506      	str	r5, [sp, #24]
 8002fee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ff2:	9402      	str	r4, [sp, #8]
 8002ff4:	e9cd 0100 	strd	r0, r1, [sp]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff f825 	bl	800204e <_ntoa_long_long>
 8003004:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003006:	e0c8      	b.n	800319a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01e      	beq.n	8003050 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8003012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003014:	1d1a      	adds	r2, r3, #4
 8003016:	66ba      	str	r2, [r7, #104]	; 0x68
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	bfb8      	it	lt
 8003022:	425b      	neglt	r3, r3
 8003024:	4619      	mov	r1, r3
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	0fdb      	lsrs	r3, r3, #31
 800302a:	b2db      	uxtb	r3, r3
 800302c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800302e:	9205      	str	r2, [sp, #20]
 8003030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003032:	9204      	str	r2, [sp, #16]
 8003034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003036:	9203      	str	r2, [sp, #12]
 8003038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800303a:	9202      	str	r2, [sp, #8]
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	9100      	str	r1, [sp, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7fe ff9a 	bl	8001f80 <_ntoa_long>
 800304c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800304e:	e0a4      	b.n	800319a <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <_vsnprintf+0x556>
 800305a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	e00e      	b.n	8003084 <_vsnprintf+0x574>
 8003066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <_vsnprintf+0x56c>
 8003070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	66ba      	str	r2, [r7, #104]	; 0x68
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	b21b      	sxth	r3, r3
 800307a:	e003      	b.n	8003084 <_vsnprintf+0x574>
 800307c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	66ba      	str	r2, [r7, #104]	; 0x68
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	2b00      	cmp	r3, #0
 800308a:	bfb8      	it	lt
 800308c:	425b      	neglt	r3, r3
 800308e:	4619      	mov	r1, r3
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	0fdb      	lsrs	r3, r3, #31
 8003094:	b2db      	uxtb	r3, r3
 8003096:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003098:	9205      	str	r2, [sp, #20]
 800309a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800309c:	9204      	str	r2, [sp, #16]
 800309e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a0:	9203      	str	r2, [sp, #12]
 80030a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a4:	9202      	str	r2, [sp, #8]
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	9100      	str	r1, [sp, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7fe ff65 	bl	8001f80 <_ntoa_long>
 80030b6:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80030b8:	e06f      	b.n	800319a <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80030ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80030c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c6:	3307      	adds	r3, #7
 80030c8:	f023 0307 	bic.w	r3, r3, #7
 80030cc:	f103 0208 	add.w	r2, r3, #8
 80030d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030d8:	4608      	mov	r0, r1
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80030e0:	9408      	str	r4, [sp, #32]
 80030e2:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80030e4:	9407      	str	r4, [sp, #28]
 80030e6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80030e8:	9406      	str	r4, [sp, #24]
 80030ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030ee:	2100      	movs	r1, #0
 80030f0:	9102      	str	r1, [sp, #8]
 80030f2:	e9cd 2300 	strd	r2, r3, [sp]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7fe ffa6 	bl	800204e <_ntoa_long_long>
 8003102:	6478      	str	r0, [r7, #68]	; 0x44
 8003104:	e049      	b.n	800319a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	66ba      	str	r2, [r7, #104]	; 0x68
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800311a:	9205      	str	r2, [sp, #20]
 800311c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800311e:	9204      	str	r2, [sp, #16]
 8003120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003122:	9203      	str	r2, [sp, #12]
 8003124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003126:	9202      	str	r2, [sp, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	9201      	str	r2, [sp, #4]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7fe ff23 	bl	8001f80 <_ntoa_long>
 800313a:	6478      	str	r0, [r7, #68]	; 0x44
 800313c:	e02d      	b.n	800319a <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800313e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <_vsnprintf+0x644>
 8003148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	66ba      	str	r2, [r7, #104]	; 0x68
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e00e      	b.n	8003172 <_vsnprintf+0x662>
 8003154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <_vsnprintf+0x65a>
 800315e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003160:	1d1a      	adds	r2, r3, #4
 8003162:	66ba      	str	r2, [r7, #104]	; 0x68
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	e003      	b.n	8003172 <_vsnprintf+0x662>
 800316a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800316c:	1d1a      	adds	r2, r3, #4
 800316e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003176:	9305      	str	r3, [sp, #20]
 8003178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317e:	9303      	str	r3, [sp, #12]
 8003180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003182:	9302      	str	r3, [sp, #8]
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7fe fef4 	bl	8001f80 <_ntoa_long>
 8003198:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	603b      	str	r3, [r7, #0]
        break;
 80031a0:	e157      	b.n	8003452 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b46      	cmp	r3, #70	; 0x46
 80031a8:	d103      	bne.n	80031b2 <_vsnprintf+0x6a2>
 80031aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ac:	f043 0320 	orr.w	r3, r3, #32
 80031b0:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80031b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031b4:	3307      	adds	r3, #7
 80031b6:	f023 0307 	bic.w	r3, r3, #7
 80031ba:	f103 0208 	add.w	r2, r3, #8
 80031be:	66ba      	str	r2, [r7, #104]	; 0x68
 80031c0:	ed93 7b00 	vldr	d7, [r3]
 80031c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	eeb0 0a47 	vmov.f32	s0, s14
 80031d4:	eef0 0a67 	vmov.f32	s1, s15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7fe ffa6 	bl	8002130 <_ftoa>
 80031e4:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	603b      	str	r3, [r7, #0]
        break;
 80031ec:	e131      	b.n	8003452 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b67      	cmp	r3, #103	; 0x67
 80031f4:	d003      	beq.n	80031fe <_vsnprintf+0x6ee>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b47      	cmp	r3, #71	; 0x47
 80031fc:	d103      	bne.n	8003206 <_vsnprintf+0x6f6>
 80031fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003204:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b45      	cmp	r3, #69	; 0x45
 800320c:	d003      	beq.n	8003216 <_vsnprintf+0x706>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b47      	cmp	r3, #71	; 0x47
 8003214:	d103      	bne.n	800321e <_vsnprintf+0x70e>
 8003216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003218:	f043 0320 	orr.w	r3, r3, #32
 800321c:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800321e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003220:	3307      	adds	r3, #7
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	f103 0208 	add.w	r2, r3, #8
 800322a:	66ba      	str	r2, [r7, #104]	; 0x68
 800322c:	ed93 7b00 	vldr	d7, [r3]
 8003230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	eeb0 0a47 	vmov.f32	s0, s14
 8003240:	eef0 0a67 	vmov.f32	s1, s15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff f9d0 	bl	80025f0 <_etoa>
 8003250:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	603b      	str	r3, [r7, #0]
        break;
 8003258:	e0fb      	b.n	8003452 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800325a:	2301      	movs	r3, #1
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10e      	bne.n	8003286 <_vsnprintf+0x776>
          while (l++ < width) {
 8003268:	e007      	b.n	800327a <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 800326a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800326c:	1c53      	adds	r3, r2, #1
 800326e:	647b      	str	r3, [r7, #68]	; 0x44
 8003270:	68fc      	ldr	r4, [r7, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	2020      	movs	r0, #32
 8003278:	47a0      	blx	r4
          while (l++ < width) {
 800327a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003282:	429a      	cmp	r2, r3
 8003284:	d8f1      	bhi.n	800326a <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003288:	1d1a      	adds	r2, r3, #4
 800328a:	66ba      	str	r2, [r7, #104]	; 0x68
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b2d8      	uxtb	r0, r3
 8003290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003292:	1c53      	adds	r3, r2, #1
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
 8003296:	68fc      	ldr	r4, [r7, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800329e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <_vsnprintf+0x7b6>
          while (l++ < width) {
 80032a8:	e007      	b.n	80032ba <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 80032aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ac:	1c53      	adds	r3, r2, #1
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
 80032b0:	68fc      	ldr	r4, [r7, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	2020      	movs	r0, #32
 80032b8:	47a0      	blx	r4
          while (l++ < width) {
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d8f1      	bhi.n	80032aa <_vsnprintf+0x79a>
          }
        }
        format++;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	603b      	str	r3, [r7, #0]
        break;
 80032cc:	e0c1      	b.n	8003452 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80032ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d0:	1d1a      	adds	r2, r3, #4
 80032d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <_vsnprintf+0x7d2>
 80032de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e0:	e001      	b.n	80032e6 <_vsnprintf+0x7d6>
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	4619      	mov	r1, r3
 80032e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032ea:	f7fe fcc5 	bl	8001c78 <_strnlen_s>
 80032ee:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 80032fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fe:	4293      	cmp	r3, r2
 8003300:	bf28      	it	cs
 8003302:	4613      	movcs	r3, r2
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8003306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d11a      	bne.n	8003346 <_vsnprintf+0x836>
          while (l++ < width) {
 8003310:	e007      	b.n	8003322 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8003312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003314:	1c53      	adds	r3, r2, #1
 8003316:	647b      	str	r3, [r7, #68]	; 0x44
 8003318:	68fc      	ldr	r4, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	2020      	movs	r0, #32
 8003320:	47a0      	blx	r4
          while (l++ < width) {
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	637a      	str	r2, [r7, #52]	; 0x34
 8003328:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800332a:	429a      	cmp	r2, r3
 800332c:	d8f1      	bhi.n	8003312 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800332e:	e00a      	b.n	8003346 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	63ba      	str	r2, [r7, #56]	; 0x38
 8003336:	7818      	ldrb	r0, [r3, #0]
 8003338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333a:	1c53      	adds	r3, r2, #1
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
 800333e:	68fc      	ldr	r4, [r7, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <_vsnprintf+0x852>
 800334e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0eb      	beq.n	8003330 <_vsnprintf+0x820>
 8003358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335a:	1e5a      	subs	r2, r3, #1
 800335c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1e6      	bne.n	8003330 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <_vsnprintf+0x87a>
          while (l++ < width) {
 800336c:	e007      	b.n	800337e <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 800336e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003370:	1c53      	adds	r3, r2, #1
 8003372:	647b      	str	r3, [r7, #68]	; 0x44
 8003374:	68fc      	ldr	r4, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	2020      	movs	r0, #32
 800337c:	47a0      	blx	r4
          while (l++ < width) {
 800337e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	637a      	str	r2, [r7, #52]	; 0x34
 8003384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003386:	429a      	cmp	r2, r3
 8003388:	d8f1      	bhi.n	800336e <_vsnprintf+0x85e>
          }
        }
        format++;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	603b      	str	r3, [r7, #0]
        break;
 8003390:	e05f      	b.n	8003452 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003392:	2308      	movs	r3, #8
 8003394:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800339c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 80033a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01e      	beq.n	80033ea <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80033ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	66ba      	str	r2, [r7, #104]	; 0x68
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033bc:	9108      	str	r1, [sp, #32]
 80033be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80033c0:	9107      	str	r1, [sp, #28]
 80033c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80033c4:	9106      	str	r1, [sp, #24]
 80033c6:	f04f 0010 	mov.w	r0, #16
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033d2:	2100      	movs	r1, #0
 80033d4:	9102      	str	r1, [sp, #8]
 80033d6:	e9cd 2300 	strd	r2, r3, [sp]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7fe fe34 	bl	800204e <_ntoa_long_long>
 80033e6:	6478      	str	r0, [r7, #68]	; 0x44
 80033e8:	e016      	b.n	8003418 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80033ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ec:	1d1a      	adds	r2, r3, #4
 80033ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f6:	9305      	str	r3, [sp, #20]
 80033f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fa:	9304      	str	r3, [sp, #16]
 80033fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fe:	9303      	str	r3, [sp, #12]
 8003400:	2310      	movs	r3, #16
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	2300      	movs	r3, #0
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	9200      	str	r2, [sp, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7fe fdb5 	bl	8001f80 <_ntoa_long>
 8003416:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	603b      	str	r3, [r7, #0]
        break;
 800341e:	e018      	b.n	8003452 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003422:	1c53      	adds	r3, r2, #1
 8003424:	647b      	str	r3, [r7, #68]	; 0x44
 8003426:	68fc      	ldr	r4, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	2025      	movs	r0, #37	; 0x25
 800342e:	47a0      	blx	r4
        format++;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	603b      	str	r3, [r7, #0]
        break;
 8003436:	e00c      	b.n	8003452 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	7818      	ldrb	r0, [r3, #0]
 800343c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800343e:	1c53      	adds	r3, r2, #1
 8003440:	647b      	str	r3, [r7, #68]	; 0x44
 8003442:	68fc      	ldr	r4, [r7, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	47a0      	blx	r4
        format++;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	603b      	str	r3, [r7, #0]
        break;
 8003450:	bf00      	nop
  while (*format)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f ab6b 	bne.w	8002b32 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800345c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d302      	bcc.n	800346a <_vsnprintf+0x95a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1e5a      	subs	r2, r3, #1
 8003468:	e000      	b.n	800346c <_vsnprintf+0x95c>
 800346a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800346c:	68fc      	ldr	r4, [r7, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	2000      	movs	r0, #0
 8003474:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003478:	4618      	mov	r0, r3
 800347a:	3758      	adds	r7, #88	; 0x58
 800347c:	46bd      	mov	sp, r7
 800347e:	bdb0      	pop	{r4, r5, r7, pc}

08003480 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003480:	b40f      	push	{r0, r1, r2, r3}
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800348e:	1d39      	adds	r1, r7, #4
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f04f 32ff 	mov.w	r2, #4294967295
 800349a:	4806      	ldr	r0, [pc, #24]	; (80034b4 <printf_+0x34>)
 800349c:	f7ff fb38 	bl	8002b10 <_vsnprintf>
 80034a0:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034ae:	b004      	add	sp, #16
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	08001c53 	.word	0x08001c53

080034b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <MX_SPI1_Init+0x64>)
 80034be:	4a18      	ldr	r2, [pc, #96]	; (8003520 <MX_SPI1_Init+0x68>)
 80034c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <MX_SPI1_Init+0x64>)
 80034c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034ca:	4b14      	ldr	r3, [pc, #80]	; (800351c <MX_SPI1_Init+0x64>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <MX_SPI1_Init+0x64>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <MX_SPI1_Init+0x64>)
 80034d8:	2202      	movs	r2, #2
 80034da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <MX_SPI1_Init+0x64>)
 80034de:	2201      	movs	r2, #1
 80034e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <MX_SPI1_Init+0x64>)
 80034e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <MX_SPI1_Init+0x64>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <MX_SPI1_Init+0x64>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <MX_SPI1_Init+0x64>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <MX_SPI1_Init+0x64>)
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <MX_SPI1_Init+0x64>)
 8003504:	220a      	movs	r2, #10
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003508:	4804      	ldr	r0, [pc, #16]	; (800351c <MX_SPI1_Init+0x64>)
 800350a:	f001 fa43 	bl	8004994 <HAL_SPI_Init>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003514:	f7fe fb8a 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20004bcc 	.word	0x20004bcc
 8003520:	40013000 	.word	0x40013000

08003524 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_SPI_MspInit+0x84>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d12b      	bne.n	800359e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_SPI_MspInit+0x88>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a17      	ldr	r2, [pc, #92]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a10      	ldr	r2, [pc, #64]	; (80035ac <HAL_SPI_MspInit+0x88>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800357e:	23e0      	movs	r3, #224	; 0xe0
 8003580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2303      	movs	r3, #3
 800358c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800358e:	2305      	movs	r3, #5
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	4619      	mov	r1, r3
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <HAL_SPI_MspInit+0x8c>)
 800359a:	f000 fbe3 	bl	8003d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800359e:	bf00      	nop
 80035a0:	3728      	adds	r7, #40	; 0x28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40013000 	.word	0x40013000
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020000 	.word	0x40020000

080035b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_MspInit+0x54>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	4a11      	ldr	r2, [pc, #68]	; (8003608 <HAL_MspInit+0x54>)
 80035c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_MspInit+0x54>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_MspInit+0x54>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_MspInit+0x54>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_MspInit+0x54>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	210f      	movs	r1, #15
 80035f6:	f06f 0001 	mvn.w	r0, #1
 80035fa:	f000 faf7 	bl	8003bec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800

0800360c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800361c:	2200      	movs	r2, #0
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	2019      	movs	r0, #25
 8003622:	f000 fae3 	bl	8003bec <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003626:	2019      	movs	r0, #25
 8003628:	f000 fafc 	bl	8003c24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_InitTick+0xa0>)
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_InitTick+0xa0>)
 8003636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363a:	6453      	str	r3, [r2, #68]	; 0x44
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_InitTick+0xa0>)
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003648:	f107 0210 	add.w	r2, r7, #16
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f96c 	bl	8004930 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003658:	f001 f956 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 800365c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_InitTick+0xa4>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	3b01      	subs	r3, #1
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_InitTick+0xa8>)
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <HAL_InitTick+0xac>)
 8003670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_InitTick+0xa8>)
 8003674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003678:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800367a:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <HAL_InitTick+0xa8>)
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_InitTick+0xa8>)
 8003682:	2200      	movs	r2, #0
 8003684:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_InitTick+0xa8>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800368c:	4809      	ldr	r0, [pc, #36]	; (80036b4 <HAL_InitTick+0xa8>)
 800368e:	f001 ff29 	bl	80054e4 <HAL_TIM_Base_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8003698:	4806      	ldr	r0, [pc, #24]	; (80036b4 <HAL_InitTick+0xa8>)
 800369a:	f001 ff7d 	bl	8005598 <HAL_TIM_Base_Start_IT>
 800369e:	4603      	mov	r3, r0
 80036a0:	e000      	b.n	80036a4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40023800 	.word	0x40023800
 80036b0:	431bde83 	.word	0x431bde83
 80036b4:	20004c24 	.word	0x20004c24
 80036b8:	40014400 	.word	0x40014400

080036bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036c0:	e7fe      	b.n	80036c0 <NMI_Handler+0x4>

080036c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c6:	e7fe      	b.n	80036c6 <HardFault_Handler+0x4>

080036c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036cc:	e7fe      	b.n	80036cc <MemManage_Handler+0x4>

080036ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036d2:	e7fe      	b.n	80036d2 <BusFault_Handler+0x4>

080036d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <UsageFault_Handler+0x4>

080036da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80036ee:	f001 ffb5 	bl	800565c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20004c24 	.word	0x20004c24

080036fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <USART2_IRQHandler+0x10>)
 8003702:	f002 fa7f 	bl	8005c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20004c6c 	.word	0x20004c6c

08003710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	return 1;
 8003714:	2301      	movs	r3, #1
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_kill>:

int _kill(int pid, int sig)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800372a:	f006 fc77 	bl	800a01c <__errno>
 800372e:	4603      	mov	r3, r0
 8003730:	2216      	movs	r2, #22
 8003732:	601a      	str	r2, [r3, #0]
	return -1;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_exit>:

void _exit (int status)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003748:	f04f 31ff 	mov.w	r1, #4294967295
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ffe7 	bl	8003720 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003752:	e7fe      	b.n	8003752 <_exit+0x12>

08003754 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e00a      	b.n	800377c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003766:	f3af 8000 	nop.w
 800376a:	4601      	mov	r1, r0
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	60ba      	str	r2, [r7, #8]
 8003772:	b2ca      	uxtb	r2, r1
 8003774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	3301      	adds	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	dbf0      	blt.n	8003766 <_read+0x12>
	}

return len;
 8003784:	687b      	ldr	r3, [r7, #4]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e009      	b.n	80037b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	60ba      	str	r2, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbf1      	blt.n	80037a0 <_write+0x12>
	}
	return len;
 80037bc:	687b      	ldr	r3, [r7, #4]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <_close>:

int _close(int file)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
	return -1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ee:	605a      	str	r2, [r3, #4]
	return 0;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_isatty>:

int _isatty(int file)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
	return 1;
 8003806:	2301      	movs	r3, #1
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
	return 0;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <_sbrk+0x5c>)
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <_sbrk+0x60>)
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <_sbrk+0x64>)
 800384e:	4a12      	ldr	r2, [pc, #72]	; (8003898 <_sbrk+0x68>)
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d207      	bcs.n	8003870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003860:	f006 fbdc 	bl	800a01c <__errno>
 8003864:	4603      	mov	r3, r0
 8003866:	220c      	movs	r2, #12
 8003868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e009      	b.n	8003884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <_sbrk+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <_sbrk+0x64>)
 8003880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20020000 	.word	0x20020000
 8003890:	00000400 	.word	0x00000400
 8003894:	2000027c 	.word	0x2000027c
 8003898:	20004d08 	.word	0x20004d08

0800389c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <SystemInit+0x20>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <SystemInit+0x20>)
 80038a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <MX_USART2_UART_Init+0x50>)
 80038c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038e6:	220c      	movs	r2, #12
 80038e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038f6:	4805      	ldr	r0, [pc, #20]	; (800390c <MX_USART2_UART_Init+0x4c>)
 80038f8:	f002 f874 	bl	80059e4 <HAL_UART_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003902:	f7fe f993 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20004c6c 	.word	0x20004c6c
 8003910:	40004400 	.word	0x40004400

08003914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <HAL_UART_MspInit+0x84>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d12b      	bne.n	800398e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_UART_MspInit+0x88>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a17      	ldr	r2, [pc, #92]	; (800399c <HAL_UART_MspInit+0x88>)
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_UART_MspInit+0x88>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_UART_MspInit+0x88>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a10      	ldr	r2, [pc, #64]	; (800399c <HAL_UART_MspInit+0x88>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_UART_MspInit+0x88>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800396e:	230c      	movs	r3, #12
 8003970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397a:	2303      	movs	r3, #3
 800397c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800397e:	2307      	movs	r3, #7
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	4619      	mov	r1, r3
 8003988:	4805      	ldr	r0, [pc, #20]	; (80039a0 <HAL_UART_MspInit+0x8c>)
 800398a:	f000 f9eb 	bl	8003d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800398e:	bf00      	nop
 8003990:	3728      	adds	r7, #40	; 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40004400 	.word	0x40004400
 800399c:	40023800 	.word	0x40023800
 80039a0:	40020000 	.word	0x40020000

080039a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80039a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039a8:	480d      	ldr	r0, [pc, #52]	; (80039e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039aa:	490e      	ldr	r1, [pc, #56]	; (80039e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039ac:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b0:	e002      	b.n	80039b8 <LoopCopyDataInit>

080039b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039b6:	3304      	adds	r3, #4

080039b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039bc:	d3f9      	bcc.n	80039b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039c0:	4c0b      	ldr	r4, [pc, #44]	; (80039f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039c4:	e001      	b.n	80039ca <LoopFillZerobss>

080039c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039c8:	3204      	adds	r2, #4

080039ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039cc:	d3fb      	bcc.n	80039c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039ce:	f7ff ff65 	bl	800389c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039d2:	f006 fb29 	bl	800a028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039d6:	f7fe f897 	bl	8001b08 <main>
  bx  lr    
 80039da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039e4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80039e8:	0800d23c 	.word	0x0800d23c
  ldr r2, =_sbss
 80039ec:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80039f0:	20004d04 	.word	0x20004d04

080039f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039f4:	e7fe      	b.n	80039f4 <ADC_IRQHandler>
	...

080039f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_Init+0x40>)
 8003a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <HAL_Init+0x40>)
 8003a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_Init+0x40>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_Init+0x40>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a20:	2003      	movs	r0, #3
 8003a22:	f000 f8d8 	bl	8003bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a26:	200f      	movs	r0, #15
 8003a28:	f7ff fdf0 	bl	800360c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a2c:	f7ff fdc2 	bl	80035b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023c00 	.word	0x40023c00

08003a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_IncTick+0x20>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x24>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <HAL_IncTick+0x24>)
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000024 	.word	0x20000024
 8003a60:	20004cb0 	.word	0x20004cb0

08003a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return uwTick;
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_GetTick+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20004cb0 	.word	0x20004cb0

08003a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	60d3      	str	r3, [r2, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <__NVIC_GetPriorityGrouping+0x18>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 0307 	and.w	r3, r3, #7
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db0b      	blt.n	8003b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4907      	ldr	r1, [pc, #28]	; (8003b18 <__NVIC_EnableIRQ+0x38>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2001      	movs	r0, #1
 8003b02:	fa00 f202 	lsl.w	r2, r0, r2
 8003b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000e100 	.word	0xe000e100

08003b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	; (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f1c3 0307 	rsb	r3, r3, #7
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf28      	it	cs
 8003b8e:	2304      	movcs	r3, #4
 8003b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d902      	bls.n	8003ba0 <NVIC_EncodePriority+0x30>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3b03      	subs	r3, #3
 8003b9e:	e000      	b.n	8003ba2 <NVIC_EncodePriority+0x32>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43d9      	mvns	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	4313      	orrs	r3, r2
         );
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ff4c 	bl	8003a7c <__NVIC_SetPriorityGrouping>
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bfe:	f7ff ff61 	bl	8003ac4 <__NVIC_GetPriorityGrouping>
 8003c02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	6978      	ldr	r0, [r7, #20]
 8003c0a:	f7ff ffb1 	bl	8003b70 <NVIC_EncodePriority>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff80 	bl	8003b1c <__NVIC_SetPriority>
}
 8003c1c:	bf00      	nop
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff54 	bl	8003ae0 <__NVIC_EnableIRQ>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c4e:	f7ff ff09 	bl	8003a64 <HAL_GetTick>
 8003c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d008      	beq.n	8003c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e052      	b.n	8003d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0216 	bic.w	r2, r2, #22
 8003c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_DMA_Abort+0x62>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0208 	bic.w	r2, r2, #8
 8003cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc2:	e013      	b.n	8003cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cc4:	f7ff fece 	bl	8003a64 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d90c      	bls.n	8003cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e015      	b.n	8003d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e4      	bne.n	8003cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	223f      	movs	r2, #63	; 0x3f
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d004      	beq.n	8003d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e00c      	b.n	8003d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2205      	movs	r2, #5
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e159      	b.n	8004034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	f040 8148 	bne.w	800402e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d005      	beq.n	8003db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d130      	bne.n	8003e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dec:	2201      	movs	r2, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 0201 	and.w	r2, r3, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d017      	beq.n	8003e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d123      	bne.n	8003ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	08da      	lsrs	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3208      	adds	r2, #8
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	220f      	movs	r2, #15
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	08da      	lsrs	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3208      	adds	r2, #8
 8003ea2:	69b9      	ldr	r1, [r7, #24]
 8003ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0203 	and.w	r2, r3, #3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a2 	beq.w	800402e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	4b57      	ldr	r3, [pc, #348]	; (800404c <HAL_GPIO_Init+0x2e8>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_GPIO_Init+0x2e8>)
 8003ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8003efa:	4b54      	ldr	r3, [pc, #336]	; (800404c <HAL_GPIO_Init+0x2e8>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f06:	4a52      	ldr	r2, [pc, #328]	; (8004050 <HAL_GPIO_Init+0x2ec>)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a49      	ldr	r2, [pc, #292]	; (8004054 <HAL_GPIO_Init+0x2f0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d019      	beq.n	8003f66 <HAL_GPIO_Init+0x202>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a48      	ldr	r2, [pc, #288]	; (8004058 <HAL_GPIO_Init+0x2f4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_GPIO_Init+0x1fe>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a47      	ldr	r2, [pc, #284]	; (800405c <HAL_GPIO_Init+0x2f8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00d      	beq.n	8003f5e <HAL_GPIO_Init+0x1fa>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a46      	ldr	r2, [pc, #280]	; (8004060 <HAL_GPIO_Init+0x2fc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <HAL_GPIO_Init+0x1f6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a45      	ldr	r2, [pc, #276]	; (8004064 <HAL_GPIO_Init+0x300>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_GPIO_Init+0x1f2>
 8003f52:	2304      	movs	r3, #4
 8003f54:	e008      	b.n	8003f68 <HAL_GPIO_Init+0x204>
 8003f56:	2307      	movs	r3, #7
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x204>
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e004      	b.n	8003f68 <HAL_GPIO_Init+0x204>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e002      	b.n	8003f68 <HAL_GPIO_Init+0x204>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_GPIO_Init+0x204>
 8003f66:	2300      	movs	r3, #0
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	f002 0203 	and.w	r2, r2, #3
 8003f6e:	0092      	lsls	r2, r2, #2
 8003f70:	4093      	lsls	r3, r2
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f78:	4935      	ldr	r1, [pc, #212]	; (8004050 <HAL_GPIO_Init+0x2ec>)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3302      	adds	r3, #2
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f86:	4b38      	ldr	r3, [pc, #224]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003faa:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fd4:	4a24      	ldr	r2, [pc, #144]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <HAL_GPIO_Init+0x304>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <HAL_GPIO_Init+0x304>)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004004:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_GPIO_Init+0x304>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004028:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <HAL_GPIO_Init+0x304>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3301      	adds	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b0f      	cmp	r3, #15
 8004038:	f67f aea2 	bls.w	8003d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	40013800 	.word	0x40013800
 8004054:	40020000 	.word	0x40020000
 8004058:	40020400 	.word	0x40020400
 800405c:	40020800 	.word	0x40020800
 8004060:	40020c00 	.word	0x40020c00
 8004064:	40021000 	.word	0x40021000
 8004068:	40013c00 	.word	0x40013c00

0800406c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	807b      	strh	r3, [r7, #2]
 8004078:	4613      	mov	r3, r2
 800407a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800407c:	787b      	ldrb	r3, [r7, #1]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004088:	e003      	b.n	8004092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800408a:	887b      	ldrh	r3, [r7, #2]
 800408c:	041a      	lsls	r2, r3, #16
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	619a      	str	r2, [r3, #24]
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e264      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d075      	beq.n	80041aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040be:	4ba3      	ldr	r3, [pc, #652]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d00c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4ba0      	ldr	r3, [pc, #640]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d112      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b9d      	ldr	r3, [pc, #628]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	4b99      	ldr	r3, [pc, #612]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d157      	bne.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e23f      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x74>
 8004106:	4b91      	ldr	r3, [pc, #580]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a90      	ldr	r2, [pc, #576]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x98>
 800411e:	4b8b      	ldr	r3, [pc, #556]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a8a      	ldr	r2, [pc, #552]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b88      	ldr	r3, [pc, #544]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a87      	ldr	r2, [pc, #540]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004138:	4b84      	ldr	r3, [pc, #528]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a83      	ldr	r2, [pc, #524]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b81      	ldr	r3, [pc, #516]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a80      	ldr	r2, [pc, #512]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7ff fc84 	bl	8003a64 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7ff fc80 	bl	8003a64 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e204      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b76      	ldr	r3, [pc, #472]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xc0>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7ff fc70 	bl	8003a64 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004188:	f7ff fc6c 	bl	8003a64 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1f0      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b6c      	ldr	r3, [pc, #432]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b62      	ldr	r3, [pc, #392]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b5f      	ldr	r3, [pc, #380]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b5c      	ldr	r3, [pc, #368]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1c4      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b56      	ldr	r3, [pc, #344]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4952      	ldr	r1, [pc, #328]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e03a      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b4f      	ldr	r3, [pc, #316]	; (8004350 <HAL_RCC_OscConfig+0x2b0>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7ff fc25 	bl	8003a64 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421e:	f7ff fc21 	bl	8003a64 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1a5      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	4b46      	ldr	r3, [pc, #280]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4940      	ldr	r1, [pc, #256]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <HAL_RCC_OscConfig+0x2b0>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7ff fc04 	bl	8003a64 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004260:	f7ff fc00 	bl	8003a64 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e184      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4b36      	ldr	r3, [pc, #216]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d030      	beq.n	80042ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_RCC_OscConfig+0x2b4>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7ff fbe4 	bl	8003a64 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7ff fbe0 	bl	8003a64 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e164      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x200>
 80042be:	e015      	b.n	80042ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCC_OscConfig+0x2b4>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7ff fbcd 	bl	8003a64 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7ff fbc9 	bl	8003a64 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e14d      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80a0 	beq.w	800443a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a0e      	ldr	r2, [pc, #56]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCC_OscConfig+0x2ac>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_OscConfig+0x2b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d121      	bne.n	800437a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_OscConfig+0x2b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a07      	ldr	r2, [pc, #28]	; (8004358 <HAL_RCC_OscConfig+0x2b8>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004342:	f7ff fb8f 	bl	8003a64 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	e011      	b.n	800436e <HAL_RCC_OscConfig+0x2ce>
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	42470000 	.word	0x42470000
 8004354:	42470e80 	.word	0x42470e80
 8004358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7ff fb82 	bl	8003a64 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e106      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436e:	4b85      	ldr	r3, [pc, #532]	; (8004584 <HAL_RCC_OscConfig+0x4e4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x2f0>
 8004382:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a80      	ldr	r2, [pc, #512]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
 800438e:	e01c      	b.n	80043ca <HAL_RCC_OscConfig+0x32a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b05      	cmp	r3, #5
 8004396:	d10c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x312>
 8004398:	4b7b      	ldr	r3, [pc, #492]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a7a      	ldr	r2, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
 80043a4:	4b78      	ldr	r3, [pc, #480]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	4a77      	ldr	r2, [pc, #476]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	; 0x70
 80043b0:	e00b      	b.n	80043ca <HAL_RCC_OscConfig+0x32a>
 80043b2:	4b75      	ldr	r3, [pc, #468]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a74      	ldr	r2, [pc, #464]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	4b72      	ldr	r3, [pc, #456]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a71      	ldr	r2, [pc, #452]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d015      	beq.n	80043fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7ff fb47 	bl	8003a64 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7ff fb43 	bl	8003a64 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0c5      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	4b65      	ldr	r3, [pc, #404]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ee      	beq.n	80043da <HAL_RCC_OscConfig+0x33a>
 80043fc:	e014      	b.n	8004428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7ff fb31 	bl	8003a64 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7ff fb2d 	bl	8003a64 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0af      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441c:	4b5a      	ldr	r3, [pc, #360]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ee      	bne.n	8004406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4b56      	ldr	r3, [pc, #344]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a55      	ldr	r2, [pc, #340]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 809b 	beq.w	800457a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004444:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d05c      	beq.n	800450a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d141      	bne.n	80044dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b4c      	ldr	r3, [pc, #304]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7ff fb01 	bl	8003a64 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004466:	f7ff fafd 	bl	8003a64 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e081      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004478:	4b43      	ldr	r3, [pc, #268]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	019b      	lsls	r3, r3, #6
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	3b01      	subs	r3, #1
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	061b      	lsls	r3, r3, #24
 80044a8:	4937      	ldr	r1, [pc, #220]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ae:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7ff fad6 	bl	8003a64 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044bc:	f7ff fad2 	bl	8003a64 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e056      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x41c>
 80044da:	e04e      	b.n	800457a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_OscConfig+0x4ec>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7ff fabf 	bl	8003a64 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ea:	f7ff fabb 	bl	8003a64 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e03f      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fc:	4b22      	ldr	r3, [pc, #136]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f0      	bne.n	80044ea <HAL_RCC_OscConfig+0x44a>
 8004508:	e037      	b.n	800457a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e032      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <HAL_RCC_OscConfig+0x4e8>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d028      	beq.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d121      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d11a      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800454c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800454e:	4293      	cmp	r3, r2
 8004550:	d111      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d107      	bne.n	8004576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40007000 	.word	0x40007000
 8004588:	40023800 	.word	0x40023800
 800458c:	42470060 	.word	0x42470060

08004590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0cc      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90c      	bls.n	80045cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b63      	ldr	r3, [pc, #396]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0b8      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a58      	ldr	r2, [pc, #352]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	494d      	ldr	r1, [pc, #308]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d044      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d119      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d003      	beq.n	800464e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	2b03      	cmp	r3, #3
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e067      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b37      	ldr	r3, [pc, #220]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4934      	ldr	r1, [pc, #208]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004680:	f7ff f9f0 	bl	8003a64 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7ff f9ec 	bl	8003a64 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d20c      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e032      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4916      	ldr	r1, [pc, #88]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	490e      	ldr	r1, [pc, #56]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004716:	f000 f821 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800471a:	4602      	mov	r2, r0
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	490a      	ldr	r1, [pc, #40]	; (8004750 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	5ccb      	ldrb	r3, [r1, r3]
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe ff68 	bl	800360c <HAL_InitTick>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00
 800474c:	40023800 	.word	0x40023800
 8004750:	0800ce30 	.word	0x0800ce30
 8004754:	2000001c 	.word	0x2000001c
 8004758:	20000020 	.word	0x20000020

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b5b0      	push	{r4, r5, r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004762:	2100      	movs	r1, #0
 8004764:	6079      	str	r1, [r7, #4]
 8004766:	2100      	movs	r1, #0
 8004768:	60f9      	str	r1, [r7, #12]
 800476a:	2100      	movs	r1, #0
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800476e:	2100      	movs	r1, #0
 8004770:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004772:	4952      	ldr	r1, [pc, #328]	; (80048bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004774:	6889      	ldr	r1, [r1, #8]
 8004776:	f001 010c 	and.w	r1, r1, #12
 800477a:	2908      	cmp	r1, #8
 800477c:	d00d      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x3e>
 800477e:	2908      	cmp	r1, #8
 8004780:	f200 8094 	bhi.w	80048ac <HAL_RCC_GetSysClockFreq+0x150>
 8004784:	2900      	cmp	r1, #0
 8004786:	d002      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0x32>
 8004788:	2904      	cmp	r1, #4
 800478a:	d003      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x38>
 800478c:	e08e      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800478e:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004790:	60bb      	str	r3, [r7, #8]
       break;
 8004792:	e08e      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004794:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004796:	60bb      	str	r3, [r7, #8]
      break;
 8004798:	e08b      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800479a:	4948      	ldr	r1, [pc, #288]	; (80048bc <HAL_RCC_GetSysClockFreq+0x160>)
 800479c:	6849      	ldr	r1, [r1, #4]
 800479e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80047a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a4:	4945      	ldr	r1, [pc, #276]	; (80048bc <HAL_RCC_GetSysClockFreq+0x160>)
 80047a6:	6849      	ldr	r1, [r1, #4]
 80047a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d024      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b0:	4942      	ldr	r1, [pc, #264]	; (80048bc <HAL_RCC_GetSysClockFreq+0x160>)
 80047b2:	6849      	ldr	r1, [r1, #4]
 80047b4:	0989      	lsrs	r1, r1, #6
 80047b6:	4608      	mov	r0, r1
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80047c0:	f04f 0500 	mov.w	r5, #0
 80047c4:	ea00 0204 	and.w	r2, r0, r4
 80047c8:	ea01 0305 	and.w	r3, r1, r5
 80047cc:	493d      	ldr	r1, [pc, #244]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80047ce:	fb01 f003 	mul.w	r0, r1, r3
 80047d2:	2100      	movs	r1, #0
 80047d4:	fb01 f102 	mul.w	r1, r1, r2
 80047d8:	1844      	adds	r4, r0, r1
 80047da:	493a      	ldr	r1, [pc, #232]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80047dc:	fba2 0101 	umull	r0, r1, r2, r1
 80047e0:	1863      	adds	r3, r4, r1
 80047e2:	4619      	mov	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	f7fc fa04 	bl	8000bf8 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4613      	mov	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e04a      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fa:	4b30      	ldr	r3, [pc, #192]	; (80048bc <HAL_RCC_GetSysClockFreq+0x160>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	099b      	lsrs	r3, r3, #6
 8004800:	461a      	mov	r2, r3
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800480a:	f04f 0100 	mov.w	r1, #0
 800480e:	ea02 0400 	and.w	r4, r2, r0
 8004812:	ea03 0501 	and.w	r5, r3, r1
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	014b      	lsls	r3, r1, #5
 8004824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004828:	0142      	lsls	r2, r0, #5
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	1b00      	subs	r0, r0, r4
 8004830:	eb61 0105 	sbc.w	r1, r1, r5
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	018b      	lsls	r3, r1, #6
 800483e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004842:	0182      	lsls	r2, r0, #6
 8004844:	1a12      	subs	r2, r2, r0
 8004846:	eb63 0301 	sbc.w	r3, r3, r1
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	00d9      	lsls	r1, r3, #3
 8004854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004858:	00d0      	lsls	r0, r2, #3
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	1912      	adds	r2, r2, r4
 8004860:	eb45 0303 	adc.w	r3, r5, r3
 8004864:	f04f 0000 	mov.w	r0, #0
 8004868:	f04f 0100 	mov.w	r1, #0
 800486c:	0299      	lsls	r1, r3, #10
 800486e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004872:	0290      	lsls	r0, r2, #10
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4610      	mov	r0, r2
 800487a:	4619      	mov	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	461a      	mov	r2, r3
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	f7fc f9b8 	bl	8000bf8 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	3301      	adds	r3, #1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	60bb      	str	r3, [r7, #8]
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80048ae:	60bb      	str	r3, [r7, #8]
      break;
 80048b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b2:	68bb      	ldr	r3, [r7, #8]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bdb0      	pop	{r4, r5, r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	017d7840 	.word	0x017d7840

080048c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000001c 	.word	0x2000001c

080048e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048e4:	f7ff fff0 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0a9b      	lsrs	r3, r3, #10
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	0800ce40 	.word	0x0800ce40

08004908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800490c:	f7ff ffdc 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0b5b      	lsrs	r3, r3, #13
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4903      	ldr	r1, [pc, #12]	; (800492c <HAL_RCC_GetPCLK2Freq+0x24>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	0800ce40 	.word	0x0800ce40

08004930 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	220f      	movs	r2, #15
 800493e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004940:	4b12      	ldr	r3, [pc, #72]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0203 	and.w	r2, r3, #3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCC_GetClockConfig+0x5c>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <HAL_RCC_GetClockConfig+0x60>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0207 	and.w	r2, r3, #7
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	40023c00 	.word	0x40023c00

08004994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e07b      	b.n	8004a9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d108      	bne.n	80049c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b6:	d009      	beq.n	80049cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	61da      	str	r2, [r3, #28]
 80049be:	e005      	b.n	80049cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fe fd9c 	bl	8003524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	ea42 0103 	orr.w	r1, r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	f003 0104 	and.w	r1, r3, #4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	f003 0210 	and.w	r2, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b088      	sub	sp, #32
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_SPI_Transmit+0x22>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e126      	b.n	8004d16 <HAL_SPI_Transmit+0x270>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad0:	f7fe ffc8 	bl	8003a64 <HAL_GetTick>
 8004ad4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d002      	beq.n	8004aec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aea:	e10b      	b.n	8004d04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Transmit+0x52>
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004afc:	e102      	b.n	8004d04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2203      	movs	r2, #3
 8004b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b44:	d10f      	bne.n	8004b66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	d14b      	bne.n	8004c26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0xf6>
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d13e      	bne.n	8004c1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bc0:	e02b      	b.n	8004c1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d112      	bne.n	8004bf6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bf4:	e011      	b.n	8004c1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf6:	f7fe ff35 	bl	8003a64 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d803      	bhi.n	8004c0e <HAL_SPI_Transmit+0x168>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Transmit+0x16e>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c18:	e074      	b.n	8004d04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1ce      	bne.n	8004bc2 <HAL_SPI_Transmit+0x11c>
 8004c24:	e04c      	b.n	8004cc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0x18e>
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d140      	bne.n	8004cb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c5a:	e02c      	b.n	8004cb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d113      	bne.n	8004c92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c90:	e011      	b.n	8004cb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c92:	f7fe fee7 	bl	8003a64 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d803      	bhi.n	8004caa <HAL_SPI_Transmit+0x204>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d102      	bne.n	8004cb0 <HAL_SPI_Transmit+0x20a>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cb4:	e026      	b.n	8004d04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1cd      	bne.n	8004c5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fbcb 	bl	8005460 <SPI_EndRxTxTransaction>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e000      	b.n	8004d04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b088      	sub	sp, #32
 8004d22:	af02      	add	r7, sp, #8
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3a:	d112      	bne.n	8004d62 <HAL_SPI_Receive+0x44>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10e      	bne.n	8004d62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2204      	movs	r2, #4
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f8f1 	bl	8004f40 <HAL_SPI_TransmitReceive>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	e0ea      	b.n	8004f38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_SPI_Receive+0x52>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e0e3      	b.n	8004f38 <HAL_SPI_Receive+0x21a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d78:	f7fe fe74 	bl	8003a64 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d8e:	e0ca      	b.n	8004f26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_SPI_Receive+0x7e>
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004da0:	e0c1      	b.n	8004f26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2204      	movs	r2, #4
 8004da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de8:	d10f      	bne.n	8004e0a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d007      	beq.n	8004e28 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d162      	bne.n	8004ef6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e30:	e02e      	b.n	8004e90 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d115      	bne.n	8004e6c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f103 020c 	add.w	r2, r3, #12
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e6a:	e011      	b.n	8004e90 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6c:	f7fe fdfa 	bl	8003a64 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d803      	bhi.n	8004e84 <HAL_SPI_Receive+0x166>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	d102      	bne.n	8004e8a <HAL_SPI_Receive+0x16c>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e8e:	e04a      	b.n	8004f26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1cb      	bne.n	8004e32 <HAL_SPI_Receive+0x114>
 8004e9a:	e031      	b.n	8004f00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d113      	bne.n	8004ed2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed0:	e011      	b.n	8004ef6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed2:	f7fe fdc7 	bl	8003a64 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d803      	bhi.n	8004eea <HAL_SPI_Receive+0x1cc>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SPI_Receive+0x1d2>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ef4:	e017      	b.n	8004f26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1cd      	bne.n	8004e9c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	6839      	ldr	r1, [r7, #0]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fa45 	bl	8005394 <SPI_EndRxTransaction>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
 8004f22:	e000      	b.n	8004f26 <HAL_SPI_Receive+0x208>
  }

error :
 8004f24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08c      	sub	sp, #48	; 0x30
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x26>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e18a      	b.n	800527c <HAL_SPI_TransmitReceive+0x33c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f6e:	f7fe fd79 	bl	8003a64 <HAL_GetTick>
 8004f72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d00f      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x70>
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f96:	d107      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x68>
 8004fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d003      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fae:	e15b      	b.n	8005268 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x82>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x82>
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fc8:	e14e      	b.n	8005268 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d003      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2205      	movs	r2, #5
 8004fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	887a      	ldrh	r2, [r7, #2]
 8004fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	887a      	ldrh	r2, [r7, #2]
 8005006:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d007      	beq.n	8005032 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503a:	d178      	bne.n	800512e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_SPI_TransmitReceive+0x10a>
 8005044:	8b7b      	ldrh	r3, [r7, #26]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d166      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	881a      	ldrh	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	1c9a      	adds	r2, r3, #2
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800506e:	e053      	b.n	8005118 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b02      	cmp	r3, #2
 800507c:	d11b      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x176>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d016      	beq.n	80050b6 <HAL_SPI_TransmitReceive+0x176>
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	2b01      	cmp	r3, #1
 800508c:	d113      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	881a      	ldrh	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	1c9a      	adds	r2, r3, #2
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d119      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x1b8>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d014      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	b292      	uxth	r2, r2
 80050da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050f4:	2301      	movs	r3, #1
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050f8:	f7fe fcb4 	bl	8003a64 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005104:	429a      	cmp	r2, r3
 8005106:	d807      	bhi.n	8005118 <HAL_SPI_TransmitReceive+0x1d8>
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510e:	d003      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005116:	e0a7      	b.n	8005268 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1a6      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x130>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1a1      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x130>
 800512c:	e07c      	b.n	8005228 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_SPI_TransmitReceive+0x1fc>
 8005136:	8b7b      	ldrh	r3, [r7, #26]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d16b      	bne.n	8005214 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	7812      	ldrb	r2, [r2, #0]
 8005148:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005162:	e057      	b.n	8005214 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d11c      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x26c>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d017      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x26c>
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d114      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d119      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x2ae>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d014      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ea:	2301      	movs	r3, #1
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ee:	f7fe fc39 	bl	8003a64 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d803      	bhi.n	8005206 <HAL_SPI_TransmitReceive+0x2c6>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d102      	bne.n	800520c <HAL_SPI_TransmitReceive+0x2cc>
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005212:	e029      	b.n	8005268 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1a2      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x224>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d19d      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f917 	bl	8005460 <SPI_EndRxTxTransaction>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d006      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005244:	e010      	b.n	8005268 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	e000      	b.n	8005268 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005266:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005278:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800527c:	4618      	mov	r0, r3
 800527e:	3730      	adds	r7, #48	; 0x30
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005294:	f7fe fbe6 	bl	8003a64 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	4413      	add	r3, r2
 80052a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052a4:	f7fe fbde 	bl	8003a64 <HAL_GetTick>
 80052a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052aa:	4b39      	ldr	r3, [pc, #228]	; (8005390 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	015b      	lsls	r3, r3, #5
 80052b0:	0d1b      	lsrs	r3, r3, #20
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	fb02 f303 	mul.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ba:	e054      	b.n	8005366 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d050      	beq.n	8005366 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052c4:	f7fe fbce 	bl	8003a64 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d902      	bls.n	80052da <SPI_WaitFlagStateUntilTimeout+0x56>
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d13d      	bne.n	8005356 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f2:	d111      	bne.n	8005318 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fc:	d004      	beq.n	8005308 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005306:	d107      	bne.n	8005318 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005316:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005320:	d10f      	bne.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005340:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e017      	b.n	8005386 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	3b01      	subs	r3, #1
 8005364:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4013      	ands	r3, r2
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	bf0c      	ite	eq
 8005376:	2301      	moveq	r3, #1
 8005378:	2300      	movne	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	429a      	cmp	r2, r3
 8005382:	d19b      	bne.n	80052bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	2000001c 	.word	0x2000001c

08005394 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a8:	d111      	bne.n	80053ce <SPI_EndRxTransaction+0x3a>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b2:	d004      	beq.n	80053be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d107      	bne.n	80053ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d6:	d12a      	bne.n	800542e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e0:	d012      	beq.n	8005408 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2180      	movs	r1, #128	; 0x80
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff ff49 	bl	8005284 <SPI_WaitFlagStateUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d02d      	beq.n	8005454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e026      	b.n	8005456 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	2101      	movs	r1, #1
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff ff36 	bl	8005284 <SPI_WaitFlagStateUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01a      	beq.n	8005454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e013      	b.n	8005456 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	2101      	movs	r1, #1
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff ff23 	bl	8005284 <SPI_WaitFlagStateUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e000      	b.n	8005456 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <SPI_EndRxTxTransaction+0x7c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <SPI_EndRxTxTransaction+0x80>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0d5b      	lsrs	r3, r3, #21
 8005478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548a:	d112      	bne.n	80054b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2200      	movs	r2, #0
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff fef4 	bl	8005284 <SPI_WaitFlagStateUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d016      	beq.n	80054d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f043 0220 	orr.w	r2, r3, #32
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e00f      	b.n	80054d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d0f2      	beq.n	80054b2 <SPI_EndRxTxTransaction+0x52>
 80054cc:	e000      	b.n	80054d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80054ce:	bf00      	nop
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	2000001c 	.word	0x2000001c
 80054e0:	165e9f81 	.word	0x165e9f81

080054e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e041      	b.n	800557a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f839 	bl	8005582 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 f9ca 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e044      	b.n	800563a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <HAL_TIM_Base_Start_IT+0xb0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d013      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1a      	ldr	r2, [pc, #104]	; (800564c <HAL_TIM_Base_Start_IT+0xb4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a19      	ldr	r2, [pc, #100]	; (8005650 <HAL_TIM_Base_Start_IT+0xb8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a17      	ldr	r2, [pc, #92]	; (8005654 <HAL_TIM_Base_Start_IT+0xbc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a16      	ldr	r2, [pc, #88]	; (8005658 <HAL_TIM_Base_Start_IT+0xc0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d111      	bne.n	8005628 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b06      	cmp	r3, #6
 8005614:	d010      	beq.n	8005638 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	e007      	b.n	8005638 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40014000 	.word	0x40014000

0800565c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0202 	mvn.w	r2, #2
 8005688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8ee 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8e0 	bl	800586c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8f1 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0204 	mvn.w	r2, #4
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8c4 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8b6 	bl	800586c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f8c7 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b08      	cmp	r3, #8
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0208 	mvn.w	r2, #8
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2204      	movs	r2, #4
 8005736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f89a 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f88c 	bl	800586c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f89d 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b10      	cmp	r3, #16
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0210 	mvn.w	r2, #16
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2208      	movs	r2, #8
 800578a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f870 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f862 	bl	800586c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f873 	bl	8005894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d10e      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0201 	mvn.w	r2, #1
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc fa14 	bl	8001c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	2b80      	cmp	r3, #128	; 0x80
 80057ec:	d10e      	bne.n	800580c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d107      	bne.n	800580c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8e2 	bl	80059d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d10e      	bne.n	8005838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d107      	bne.n	8005838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f838 	bl	80058a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b20      	cmp	r3, #32
 8005844:	d10e      	bne.n	8005864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b20      	cmp	r3, #32
 8005852:	d107      	bne.n	8005864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0220 	mvn.w	r2, #32
 800585c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8ac 	bl	80059bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a34      	ldr	r2, [pc, #208]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00f      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d00b      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <TIM_Base_SetConfig+0xe8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a30      	ldr	r2, [pc, #192]	; (80059a8 <TIM_Base_SetConfig+0xec>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	; (80059ac <TIM_Base_SetConfig+0xf0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01b      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d017      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <TIM_Base_SetConfig+0xe8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <TIM_Base_SetConfig+0xec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00f      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a20      	ldr	r2, [pc, #128]	; (80059ac <TIM_Base_SetConfig+0xf0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00b      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <TIM_Base_SetConfig+0xf4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <TIM_Base_SetConfig+0xf8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <TIM_Base_SetConfig+0xfc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d108      	bne.n	8005958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800

080059bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e03f      	b.n	8005a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd ff82 	bl	8003914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fddb 	bl	80065e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b08a      	sub	sp, #40	; 0x28
 8005a82:	af02      	add	r7, sp, #8
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d17c      	bne.n	8005b98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_UART_Transmit+0x2c>
 8005aa4:	88fb      	ldrh	r3, [r7, #6]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e075      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Transmit+0x3e>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e06e      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2221      	movs	r2, #33	; 0x21
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad2:	f7fd ffc7 	bl	8003a64 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aec:	d108      	bne.n	8005b00 <HAL_UART_Transmit+0x82>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e003      	b.n	8005b08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b10:	e02a      	b.n	8005b68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2180      	movs	r1, #128	; 0x80
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fb1f 	bl	8006160 <UART_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e036      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	3302      	adds	r3, #2
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e007      	b.n	8005b5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1cf      	bne.n	8005b12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2140      	movs	r1, #64	; 0x40
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 faef 	bl	8006160 <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e006      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	4613      	mov	r3, r2
 8005bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d11d      	bne.n	8005bf8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_UART_Receive_IT+0x26>
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e016      	b.n	8005bfa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Receive_IT+0x38>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e00f      	b.n	8005bfa <HAL_UART_Receive_IT+0x58>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	461a      	mov	r2, r3
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fb24 	bl	800623c <UART_Start_Receive_IT>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b0ba      	sub	sp, #232	; 0xe8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10f      	bne.n	8005c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <HAL_UART_IRQHandler+0x66>
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fc03 	bl	800646e <UART_Receive_IT>
      return;
 8005c68:	e256      	b.n	8006118 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80de 	beq.w	8005e30 <HAL_UART_IRQHandler+0x22c>
 8005c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80d1 	beq.w	8005e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00b      	beq.n	8005cb2 <HAL_UART_IRQHandler+0xae>
 8005c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0201 	orr.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_UART_IRQHandler+0xd2>
 8005cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f043 0202 	orr.w	r2, r3, #2
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <HAL_UART_IRQHandler+0xf6>
 8005ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f043 0204 	orr.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d011      	beq.n	8005d2a <HAL_UART_IRQHandler+0x126>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f043 0208 	orr.w	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 81ed 	beq.w	800610e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_UART_IRQHandler+0x14e>
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fb8e 	bl	800646e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <HAL_UART_IRQHandler+0x17a>
 8005d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d04f      	beq.n	8005e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa96 	bl	80062b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d141      	bne.n	8005e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3314      	adds	r3, #20
 8005dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1d9      	bne.n	8005d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d013      	beq.n	8005e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	4a7d      	ldr	r2, [pc, #500]	; (8005fe0 <HAL_UART_IRQHandler+0x3dc>)
 8005dec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fd ff94 	bl	8003d20 <HAL_DMA_Abort_IT>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	e00e      	b.n	8005e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f990 	bl	8006134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e14:	e00a      	b.n	8005e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f98c 	bl	8006134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	e006      	b.n	8005e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f988 	bl	8006134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e2a:	e170      	b.n	800610e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	bf00      	nop
    return;
 8005e2e:	e16e      	b.n	800610e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	f040 814a 	bne.w	80060ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8143 	beq.w	80060ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 813c 	beq.w	80060ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	f040 80b4 	bne.w	8005fe4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8140 	beq.w	8006112 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	f080 8139 	bcs.w	8006112 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb2:	f000 8088 	beq.w	8005fc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	330c      	adds	r3, #12
 8005ede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1d9      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3314      	adds	r3, #20
 8005f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e1      	bne.n	8005f02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3314      	adds	r3, #20
 8005f44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3314      	adds	r3, #20
 8005f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e3      	bne.n	8005f3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f96:	f023 0310 	bic.w	r3, r3, #16
 8005f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005faa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e3      	bne.n	8005f84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fd fe3d 	bl	8003c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f8b6 	bl	8006148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fdc:	e099      	b.n	8006112 <HAL_UART_IRQHandler+0x50e>
 8005fde:	bf00      	nop
 8005fe0:	08006377 	.word	0x08006377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 808b 	beq.w	8006116 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8086 	beq.w	8006116 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800602e:	647a      	str	r2, [r7, #68]	; 0x44
 8006030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e3      	bne.n	800600a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3314      	adds	r3, #20
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	623b      	str	r3, [r7, #32]
   return(result);
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3314      	adds	r3, #20
 8006062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006066:	633a      	str	r2, [r7, #48]	; 0x30
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e3      	bne.n	8006042 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	60fb      	str	r3, [r7, #12]
   return(result);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0310 	bic.w	r3, r3, #16
 800609e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060ac:	61fa      	str	r2, [r7, #28]
 80060ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	69b9      	ldr	r1, [r7, #24]
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	617b      	str	r3, [r7, #20]
   return(result);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e3      	bne.n	8006088 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f83e 	bl	8006148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060cc:	e023      	b.n	8006116 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <HAL_UART_IRQHandler+0x4ea>
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f959 	bl	800639e <UART_Transmit_IT>
    return;
 80060ec:	e014      	b.n	8006118 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <HAL_UART_IRQHandler+0x514>
 80060fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f999 	bl	800643e <UART_EndTransmit_IT>
    return;
 800610c:	e004      	b.n	8006118 <HAL_UART_IRQHandler+0x514>
    return;
 800610e:	bf00      	nop
 8006110:	e002      	b.n	8006118 <HAL_UART_IRQHandler+0x514>
      return;
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <HAL_UART_IRQHandler+0x514>
      return;
 8006116:	bf00      	nop
  }
}
 8006118:	37e8      	adds	r7, #232	; 0xe8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop

08006120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b090      	sub	sp, #64	; 0x40
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006170:	e050      	b.n	8006214 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d04c      	beq.n	8006214 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <UART_WaitOnFlagUntilTimeout+0x30>
 8006180:	f7fd fc70 	bl	8003a64 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800618c:	429a      	cmp	r2, r3
 800618e:	d241      	bcs.n	8006214 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	330c      	adds	r3, #12
 80061ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061b0:	637a      	str	r2, [r7, #52]	; 0x34
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e5      	bne.n	8006190 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3314      	adds	r3, #20
 80061ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	613b      	str	r3, [r7, #16]
   return(result);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	63bb      	str	r3, [r7, #56]	; 0x38
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3314      	adds	r3, #20
 80061e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e4:	623a      	str	r2, [r7, #32]
 80061e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e5      	bne.n	80061c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e00f      	b.n	8006234 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	429a      	cmp	r2, r3
 8006230:	d09f      	beq.n	8006172 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3740      	adds	r7, #64	; 0x40
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2222      	movs	r2, #34	; 0x22
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006280:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0220 	orr.w	r2, r2, #32
 80062a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b095      	sub	sp, #84	; 0x54
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062d8:	643a      	str	r2, [r7, #64]	; 0x40
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3314      	adds	r3, #20
 80062f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	64bb      	str	r3, [r7, #72]	; 0x48
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800630c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	d119      	bne.n	800635c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	60bb      	str	r3, [r7, #8]
   return(result);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f023 0310 	bic.w	r3, r3, #16
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006348:	61ba      	str	r2, [r7, #24]
 800634a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	613b      	str	r3, [r7, #16]
   return(result);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e5      	bne.n	8006328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800636a:	bf00      	nop
 800636c:	3754      	adds	r7, #84	; 0x54
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fecf 	bl	8006134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b21      	cmp	r3, #33	; 0x21
 80063b0:	d13e      	bne.n	8006430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ba:	d114      	bne.n	80063e6 <UART_Transmit_IT+0x48>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d110      	bne.n	80063e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	621a      	str	r2, [r3, #32]
 80063e4:	e008      	b.n	80063f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6211      	str	r1, [r2, #32]
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4619      	mov	r1, r3
 8006406:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10f      	bne.n	800642c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800641a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800642a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fe5e 	bl	8006120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b08c      	sub	sp, #48	; 0x30
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b22      	cmp	r3, #34	; 0x22
 8006480:	f040 80ab 	bne.w	80065da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d117      	bne.n	80064be <UART_Receive_IT+0x50>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d113      	bne.n	80064be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	1c9a      	adds	r2, r3, #2
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	629a      	str	r2, [r3, #40]	; 0x28
 80064bc:	e026      	b.n	800650c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d0:	d007      	beq.n	80064e2 <UART_Receive_IT+0x74>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <UART_Receive_IT+0x82>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e008      	b.n	8006502 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29b      	uxth	r3, r3
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4619      	mov	r1, r3
 800651a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800651c:	2b00      	cmp	r3, #0
 800651e:	d15a      	bne.n	80065d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0220 	bic.w	r2, r2, #32
 800652e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800653e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	2b01      	cmp	r3, #1
 800655e:	d135      	bne.n	80065cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	613b      	str	r3, [r7, #16]
   return(result);
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f023 0310 	bic.w	r3, r3, #16
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	623a      	str	r2, [r7, #32]
 8006588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	69f9      	ldr	r1, [r7, #28]
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	61bb      	str	r3, [r7, #24]
   return(result);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e5      	bne.n	8006566 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d10a      	bne.n	80065be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fdbf 	bl	8006148 <HAL_UARTEx_RxEventCallback>
 80065ca:	e002      	b.n	80065d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7fb fa09 	bl	80019e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e002      	b.n	80065dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3730      	adds	r7, #48	; 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	b09f      	sub	sp, #124	; 0x7c
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fa:	68d9      	ldr	r1, [r3, #12]
 80065fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	ea40 0301 	orr.w	r3, r0, r1
 8006604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	431a      	orrs	r2, r3
 8006610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	431a      	orrs	r2, r3
 8006616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	4313      	orrs	r3, r2
 800661c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800661e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006628:	f021 010c 	bic.w	r1, r1, #12
 800662c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006632:	430b      	orrs	r3, r1
 8006634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006642:	6999      	ldr	r1, [r3, #24]
 8006644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	ea40 0301 	orr.w	r3, r0, r1
 800664c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800664e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4bc5      	ldr	r3, [pc, #788]	; (8006968 <UART_SetConfig+0x384>)
 8006654:	429a      	cmp	r2, r3
 8006656:	d004      	beq.n	8006662 <UART_SetConfig+0x7e>
 8006658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4bc3      	ldr	r3, [pc, #780]	; (800696c <UART_SetConfig+0x388>)
 800665e:	429a      	cmp	r2, r3
 8006660:	d103      	bne.n	800666a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006662:	f7fe f951 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8006666:	6778      	str	r0, [r7, #116]	; 0x74
 8006668:	e002      	b.n	8006670 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800666a:	f7fe f939 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 800666e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006678:	f040 80b6 	bne.w	80067e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800667c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800667e:	461c      	mov	r4, r3
 8006680:	f04f 0500 	mov.w	r5, #0
 8006684:	4622      	mov	r2, r4
 8006686:	462b      	mov	r3, r5
 8006688:	1891      	adds	r1, r2, r2
 800668a:	6439      	str	r1, [r7, #64]	; 0x40
 800668c:	415b      	adcs	r3, r3
 800668e:	647b      	str	r3, [r7, #68]	; 0x44
 8006690:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006694:	1912      	adds	r2, r2, r4
 8006696:	eb45 0303 	adc.w	r3, r5, r3
 800669a:	f04f 0000 	mov.w	r0, #0
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	00d9      	lsls	r1, r3, #3
 80066a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066a8:	00d0      	lsls	r0, r2, #3
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	1911      	adds	r1, r2, r4
 80066b0:	6639      	str	r1, [r7, #96]	; 0x60
 80066b2:	416b      	adcs	r3, r5
 80066b4:	667b      	str	r3, [r7, #100]	; 0x64
 80066b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	1891      	adds	r1, r2, r2
 80066c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80066c4:	415b      	adcs	r3, r3
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80066d0:	f7fa fa92 	bl	8000bf8 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4ba5      	ldr	r3, [pc, #660]	; (8006970 <UART_SetConfig+0x38c>)
 80066da:	fba3 2302 	umull	r2, r3, r3, r2
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	011e      	lsls	r6, r3, #4
 80066e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e4:	461c      	mov	r4, r3
 80066e6:	f04f 0500 	mov.w	r5, #0
 80066ea:	4622      	mov	r2, r4
 80066ec:	462b      	mov	r3, r5
 80066ee:	1891      	adds	r1, r2, r2
 80066f0:	6339      	str	r1, [r7, #48]	; 0x30
 80066f2:	415b      	adcs	r3, r3
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
 80066f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066fa:	1912      	adds	r2, r2, r4
 80066fc:	eb45 0303 	adc.w	r3, r5, r3
 8006700:	f04f 0000 	mov.w	r0, #0
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	00d9      	lsls	r1, r3, #3
 800670a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800670e:	00d0      	lsls	r0, r2, #3
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	1911      	adds	r1, r2, r4
 8006716:	65b9      	str	r1, [r7, #88]	; 0x58
 8006718:	416b      	adcs	r3, r5
 800671a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	461a      	mov	r2, r3
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	1891      	adds	r1, r2, r2
 8006728:	62b9      	str	r1, [r7, #40]	; 0x28
 800672a:	415b      	adcs	r3, r3
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006732:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006736:	f7fa fa5f 	bl	8000bf8 <__aeabi_uldivmod>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4b8c      	ldr	r3, [pc, #560]	; (8006970 <UART_SetConfig+0x38c>)
 8006740:	fba3 1302 	umull	r1, r3, r3, r2
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	2164      	movs	r1, #100	; 0x64
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	3332      	adds	r3, #50	; 0x32
 8006752:	4a87      	ldr	r2, [pc, #540]	; (8006970 <UART_SetConfig+0x38c>)
 8006754:	fba2 2303 	umull	r2, r3, r2, r3
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006760:	441e      	add	r6, r3
 8006762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006764:	4618      	mov	r0, r3
 8006766:	f04f 0100 	mov.w	r1, #0
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	1894      	adds	r4, r2, r2
 8006770:	623c      	str	r4, [r7, #32]
 8006772:	415b      	adcs	r3, r3
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
 8006776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800677a:	1812      	adds	r2, r2, r0
 800677c:	eb41 0303 	adc.w	r3, r1, r3
 8006780:	f04f 0400 	mov.w	r4, #0
 8006784:	f04f 0500 	mov.w	r5, #0
 8006788:	00dd      	lsls	r5, r3, #3
 800678a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800678e:	00d4      	lsls	r4, r2, #3
 8006790:	4622      	mov	r2, r4
 8006792:	462b      	mov	r3, r5
 8006794:	1814      	adds	r4, r2, r0
 8006796:	653c      	str	r4, [r7, #80]	; 0x50
 8006798:	414b      	adcs	r3, r1
 800679a:	657b      	str	r3, [r7, #84]	; 0x54
 800679c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	1891      	adds	r1, r2, r2
 80067a8:	61b9      	str	r1, [r7, #24]
 80067aa:	415b      	adcs	r3, r3
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067b6:	f7fa fa1f 	bl	8000bf8 <__aeabi_uldivmod>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4b6c      	ldr	r3, [pc, #432]	; (8006970 <UART_SetConfig+0x38c>)
 80067c0:	fba3 1302 	umull	r1, r3, r3, r2
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	2164      	movs	r1, #100	; 0x64
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	3332      	adds	r3, #50	; 0x32
 80067d2:	4a67      	ldr	r2, [pc, #412]	; (8006970 <UART_SetConfig+0x38c>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	f003 0207 	and.w	r2, r3, #7
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4432      	add	r2, r6
 80067e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067e6:	e0b9      	b.n	800695c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ea:	461c      	mov	r4, r3
 80067ec:	f04f 0500 	mov.w	r5, #0
 80067f0:	4622      	mov	r2, r4
 80067f2:	462b      	mov	r3, r5
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	6139      	str	r1, [r7, #16]
 80067f8:	415b      	adcs	r3, r3
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006800:	1912      	adds	r2, r2, r4
 8006802:	eb45 0303 	adc.w	r3, r5, r3
 8006806:	f04f 0000 	mov.w	r0, #0
 800680a:	f04f 0100 	mov.w	r1, #0
 800680e:	00d9      	lsls	r1, r3, #3
 8006810:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006814:	00d0      	lsls	r0, r2, #3
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	eb12 0804 	adds.w	r8, r2, r4
 800681e:	eb43 0905 	adc.w	r9, r3, r5
 8006822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	f04f 0100 	mov.w	r1, #0
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	008b      	lsls	r3, r1, #2
 8006836:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800683a:	0082      	lsls	r2, r0, #2
 800683c:	4640      	mov	r0, r8
 800683e:	4649      	mov	r1, r9
 8006840:	f7fa f9da 	bl	8000bf8 <__aeabi_uldivmod>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4b49      	ldr	r3, [pc, #292]	; (8006970 <UART_SetConfig+0x38c>)
 800684a:	fba3 2302 	umull	r2, r3, r3, r2
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	011e      	lsls	r6, r3, #4
 8006852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006854:	4618      	mov	r0, r3
 8006856:	f04f 0100 	mov.w	r1, #0
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	1894      	adds	r4, r2, r2
 8006860:	60bc      	str	r4, [r7, #8]
 8006862:	415b      	adcs	r3, r3
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800686a:	1812      	adds	r2, r2, r0
 800686c:	eb41 0303 	adc.w	r3, r1, r3
 8006870:	f04f 0400 	mov.w	r4, #0
 8006874:	f04f 0500 	mov.w	r5, #0
 8006878:	00dd      	lsls	r5, r3, #3
 800687a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800687e:	00d4      	lsls	r4, r2, #3
 8006880:	4622      	mov	r2, r4
 8006882:	462b      	mov	r3, r5
 8006884:	1814      	adds	r4, r2, r0
 8006886:	64bc      	str	r4, [r7, #72]	; 0x48
 8006888:	414b      	adcs	r3, r1
 800688a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800688c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4618      	mov	r0, r3
 8006892:	f04f 0100 	mov.w	r1, #0
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	008b      	lsls	r3, r1, #2
 80068a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068a4:	0082      	lsls	r2, r0, #2
 80068a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80068aa:	f7fa f9a5 	bl	8000bf8 <__aeabi_uldivmod>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4b2f      	ldr	r3, [pc, #188]	; (8006970 <UART_SetConfig+0x38c>)
 80068b4:	fba3 1302 	umull	r1, r3, r3, r2
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	2164      	movs	r1, #100	; 0x64
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	3332      	adds	r3, #50	; 0x32
 80068c6:	4a2a      	ldr	r2, [pc, #168]	; (8006970 <UART_SetConfig+0x38c>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068d2:	441e      	add	r6, r3
 80068d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d6:	4618      	mov	r0, r3
 80068d8:	f04f 0100 	mov.w	r1, #0
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	1894      	adds	r4, r2, r2
 80068e2:	603c      	str	r4, [r7, #0]
 80068e4:	415b      	adcs	r3, r3
 80068e6:	607b      	str	r3, [r7, #4]
 80068e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ec:	1812      	adds	r2, r2, r0
 80068ee:	eb41 0303 	adc.w	r3, r1, r3
 80068f2:	f04f 0400 	mov.w	r4, #0
 80068f6:	f04f 0500 	mov.w	r5, #0
 80068fa:	00dd      	lsls	r5, r3, #3
 80068fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006900:	00d4      	lsls	r4, r2, #3
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	eb12 0a00 	adds.w	sl, r2, r0
 800690a:	eb43 0b01 	adc.w	fp, r3, r1
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4618      	mov	r0, r3
 8006914:	f04f 0100 	mov.w	r1, #0
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	008b      	lsls	r3, r1, #2
 8006922:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006926:	0082      	lsls	r2, r0, #2
 8006928:	4650      	mov	r0, sl
 800692a:	4659      	mov	r1, fp
 800692c:	f7fa f964 	bl	8000bf8 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <UART_SetConfig+0x38c>)
 8006936:	fba3 1302 	umull	r1, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	2164      	movs	r1, #100	; 0x64
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	3332      	adds	r3, #50	; 0x32
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <UART_SetConfig+0x38c>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	f003 020f 	and.w	r2, r3, #15
 8006954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4432      	add	r2, r6
 800695a:	609a      	str	r2, [r3, #8]
}
 800695c:	bf00      	nop
 800695e:	377c      	adds	r7, #124	; 0x7c
 8006960:	46bd      	mov	sp, r7
 8006962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006966:	bf00      	nop
 8006968:	40011000 	.word	0x40011000
 800696c:	40011400 	.word	0x40011400
 8006970:	51eb851f 	.word	0x51eb851f

08006974 <__NVIC_SetPriority>:
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006984:	2b00      	cmp	r3, #0
 8006986:	db0a      	blt.n	800699e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	b2da      	uxtb	r2, r3
 800698c:	490c      	ldr	r1, [pc, #48]	; (80069c0 <__NVIC_SetPriority+0x4c>)
 800698e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006992:	0112      	lsls	r2, r2, #4
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	440b      	add	r3, r1
 8006998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800699c:	e00a      	b.n	80069b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	4908      	ldr	r1, [pc, #32]	; (80069c4 <__NVIC_SetPriority+0x50>)
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	3b04      	subs	r3, #4
 80069ac:	0112      	lsls	r2, r2, #4
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	440b      	add	r3, r1
 80069b2:	761a      	strb	r2, [r3, #24]
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	e000e100 	.word	0xe000e100
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <SysTick_Handler+0x1c>)
 80069ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069d0:	f002 f906 	bl	8008be0 <xTaskGetSchedulerState>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d001      	beq.n	80069de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069da:	f003 f8a5 	bl	8009b28 <xPortSysTickHandler>
  }
}
 80069de:	bf00      	nop
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	e000e010 	.word	0xe000e010

080069e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80069ec:	2100      	movs	r1, #0
 80069ee:	f06f 0004 	mvn.w	r0, #4
 80069f2:	f7ff ffbf 	bl	8006974 <__NVIC_SetPriority>
#endif
}
 80069f6:	bf00      	nop
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a02:	f3ef 8305 	mrs	r3, IPSR
 8006a06:	603b      	str	r3, [r7, #0]
  return(result);
 8006a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a0e:	f06f 0305 	mvn.w	r3, #5
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e00c      	b.n	8006a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <osKernelInitialize+0x44>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d105      	bne.n	8006a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <osKernelInitialize+0x44>)
 8006a20:	2201      	movs	r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	e002      	b.n	8006a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a30:	687b      	ldr	r3, [r7, #4]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000280 	.word	0x20000280

08006a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a4a:	f3ef 8305 	mrs	r3, IPSR
 8006a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a56:	f06f 0305 	mvn.w	r3, #5
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	e010      	b.n	8006a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <osKernelStart+0x48>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d109      	bne.n	8006a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a66:	f7ff ffbf 	bl	80069e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a6a:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <osKernelStart+0x48>)
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a70:	f001 fc6e 	bl	8008350 <vTaskStartScheduler>
      stat = osOK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	607b      	str	r3, [r7, #4]
 8006a78:	e002      	b.n	8006a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a80:	687b      	ldr	r3, [r7, #4]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000280 	.word	0x20000280

08006a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08e      	sub	sp, #56	; 0x38
 8006a94:	af04      	add	r7, sp, #16
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa0:	f3ef 8305 	mrs	r3, IPSR
 8006aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8006aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d17e      	bne.n	8006baa <osThreadNew+0x11a>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d07b      	beq.n	8006baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ab2:	2380      	movs	r3, #128	; 0x80
 8006ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ab6:	2318      	movs	r3, #24
 8006ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d045      	beq.n	8006b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <osThreadNew+0x48>
        name = attr->name;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <osThreadNew+0x6e>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b38      	cmp	r3, #56	; 0x38
 8006af0:	d805      	bhi.n	8006afe <osThreadNew+0x6e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <osThreadNew+0x72>
        return (NULL);
 8006afe:	2300      	movs	r3, #0
 8006b00:	e054      	b.n	8006bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <osThreadNew+0xa8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	2b5b      	cmp	r3, #91	; 0x5b
 8006b20:	d90a      	bls.n	8006b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d006      	beq.n	8006b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <osThreadNew+0xa8>
        mem = 1;
 8006b32:	2301      	movs	r3, #1
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e010      	b.n	8006b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10c      	bne.n	8006b5a <osThreadNew+0xca>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <osThreadNew+0xca>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <osThreadNew+0xca>
          mem = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e001      	b.n	8006b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d110      	bne.n	8006b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b68:	9202      	str	r2, [sp, #8]
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 fa14 	bl	8007fa4 <xTaskCreateStatic>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	e013      	b.n	8006baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d110      	bne.n	8006baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f107 0310 	add.w	r3, r7, #16
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f001 fa5f 	bl	800805e <xTaskCreate>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d001      	beq.n	8006baa <osThreadNew+0x11a>
            hTask = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006baa:	693b      	ldr	r3, [r7, #16]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3728      	adds	r7, #40	; 0x28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 fdd5 	bl	800976c <pvTimerGetTimerID>
 8006bc2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	6852      	ldr	r2, [r2, #4]
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4798      	blx	r3
  }
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	; 0x30
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	460b      	mov	r3, r1
 8006bee:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf4:	f3ef 8305 	mrs	r3, IPSR
 8006bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d163      	bne.n	8006cc8 <osTimerNew+0xe8>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d060      	beq.n	8006cc8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006c06:	2008      	movs	r0, #8
 8006c08:	f003 f81e 	bl	8009c48 <pvPortMalloc>
 8006c0c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d059      	beq.n	8006cc8 <osTimerNew+0xe8>
      callb->func = func;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006c20:	7afb      	ldrb	r3, [r7, #11]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <osTimerNew+0x4c>
        reload = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	e001      	b.n	8006c30 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01c      	beq.n	8006c7a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <osTimerNew+0x6e>
          name = attr->name;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <osTimerNew+0x84>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	2b2b      	cmp	r3, #43	; 0x2b
 8006c5c:	d902      	bls.n	8006c64 <osTimerNew+0x84>
          mem = 1;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	e00c      	b.n	8006c7e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d108      	bne.n	8006c7e <osTimerNew+0x9e>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <osTimerNew+0x9e>
            mem = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e001      	b.n	8006c7e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10c      	bne.n	8006c9e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <osTimerNew+0xf4>)
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	2101      	movs	r1, #1
 8006c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c96:	f002 f9ea 	bl	800906e <xTimerCreateStatic>
 8006c9a:	6238      	str	r0, [r7, #32]
 8006c9c:	e00b      	b.n	8006cb6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d108      	bne.n	8006cb6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <osTimerNew+0xf4>)
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	2101      	movs	r1, #1
 8006cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cb0:	f002 f9bc 	bl	800902c <xTimerCreate>
 8006cb4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d105      	bne.n	8006cc8 <osTimerNew+0xe8>
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <osTimerNew+0xe8>
        vPortFree (callb);
 8006cc2:	6978      	ldr	r0, [r7, #20]
 8006cc4:	f003 f88c 	bl	8009de0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3728      	adds	r7, #40	; 0x28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	08006bb5 	.word	0x08006bb5

08006cd8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ce8:	f3ef 8305 	mrs	r3, IPSR
 8006cec:	613b      	str	r3, [r7, #16]
  return(result);
 8006cee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d175      	bne.n	8006de0 <osSemaphoreNew+0x108>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d072      	beq.n	8006de0 <osSemaphoreNew+0x108>
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d86e      	bhi.n	8006de0 <osSemaphoreNew+0x108>
    mem = -1;
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295
 8006d06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d015      	beq.n	8006d3a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <osSemaphoreNew+0x4c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b4f      	cmp	r3, #79	; 0x4f
 8006d1c:	d902      	bls.n	8006d24 <osSemaphoreNew+0x4c>
        mem = 1;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e00c      	b.n	8006d3e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d108      	bne.n	8006d3e <osSemaphoreNew+0x66>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <osSemaphoreNew+0x66>
          mem = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	e001      	b.n	8006d3e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d04c      	beq.n	8006de0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d128      	bne.n	8006d9e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10a      	bne.n	8006d68 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2203      	movs	r2, #3
 8006d58:	9200      	str	r2, [sp, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	2001      	movs	r0, #1
 8006d60:	f000 fa06 	bl	8007170 <xQueueGenericCreateStatic>
 8006d64:	61f8      	str	r0, [r7, #28]
 8006d66:	e005      	b.n	8006d74 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006d68:	2203      	movs	r2, #3
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f000 fa77 	bl	8007260 <xQueueGenericCreate>
 8006d72:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d022      	beq.n	8006dc0 <osSemaphoreNew+0xe8>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01f      	beq.n	8006dc0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d80:	2300      	movs	r3, #0
 8006d82:	2200      	movs	r2, #0
 8006d84:	2100      	movs	r1, #0
 8006d86:	69f8      	ldr	r0, [r7, #28]
 8006d88:	f000 fb32 	bl	80073f0 <xQueueGenericSend>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d016      	beq.n	8006dc0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006d92:	69f8      	ldr	r0, [r7, #28]
 8006d94:	f000 ff32 	bl	8007bfc <vQueueDelete>
            hSemaphore = NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	e010      	b.n	8006dc0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d108      	bne.n	8006db6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	461a      	mov	r2, r3
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fab4 	bl	800731a <xQueueCreateCountingSemaphoreStatic>
 8006db2:	61f8      	str	r0, [r7, #28]
 8006db4:	e004      	b.n	8006dc0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fae5 	bl	8007388 <xQueueCreateCountingSemaphore>
 8006dbe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e001      	b.n	8006dd8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	69f8      	ldr	r0, [r7, #28]
 8006ddc:	f001 f85a 	bl	8007e94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006de0:	69fb      	ldr	r3, [r7, #28]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b08a      	sub	sp, #40	; 0x28
 8006dee:	af02      	add	r7, sp, #8
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfa:	f3ef 8305 	mrs	r3, IPSR
 8006dfe:	613b      	str	r3, [r7, #16]
  return(result);
 8006e00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d15f      	bne.n	8006ec6 <osMessageQueueNew+0xdc>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d05c      	beq.n	8006ec6 <osMessageQueueNew+0xdc>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d059      	beq.n	8006ec6 <osMessageQueueNew+0xdc>
    mem = -1;
 8006e12:	f04f 33ff 	mov.w	r3, #4294967295
 8006e16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d029      	beq.n	8006e72 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d012      	beq.n	8006e4c <osMessageQueueNew+0x62>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b4f      	cmp	r3, #79	; 0x4f
 8006e2c:	d90e      	bls.n	8006e4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	fb01 f303 	mul.w	r3, r1, r3
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <osMessageQueueNew+0x62>
        mem = 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e014      	b.n	8006e76 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d110      	bne.n	8006e76 <osMessageQueueNew+0x8c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10c      	bne.n	8006e76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d108      	bne.n	8006e76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	e001      	b.n	8006e76 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10b      	bne.n	8006e94 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2100      	movs	r1, #0
 8006e86:	9100      	str	r1, [sp, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f970 	bl	8007170 <xQueueGenericCreateStatic>
 8006e90:	61f8      	str	r0, [r7, #28]
 8006e92:	e008      	b.n	8006ea6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 f9de 	bl	8007260 <xQueueGenericCreate>
 8006ea4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <osMessageQueueNew+0xd0>
        name = attr->name;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	e001      	b.n	8006ebe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	69f8      	ldr	r0, [r7, #28]
 8006ec2:	f000 ffe7 	bl	8007e94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a07      	ldr	r2, [pc, #28]	; (8006efc <vApplicationGetIdleTaskMemory+0x2c>)
 8006ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4a06      	ldr	r2, [pc, #24]	; (8006f00 <vApplicationGetIdleTaskMemory+0x30>)
 8006ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2280      	movs	r2, #128	; 0x80
 8006eec:	601a      	str	r2, [r3, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000284 	.word	0x20000284
 8006f00:	200002e0 	.word	0x200002e0

08006f04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a07      	ldr	r2, [pc, #28]	; (8006f30 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4a06      	ldr	r2, [pc, #24]	; (8006f34 <vApplicationGetTimerTaskMemory+0x30>)
 8006f1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	200004e0 	.word	0x200004e0
 8006f34:	2000053c 	.word	0x2000053c

08006f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f103 0208 	add.w	r2, r3, #8
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f103 0208 	add.w	r2, r3, #8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f103 0208 	add.w	r2, r3, #8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f92:	b480      	push	{r7}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
}
 8006fce:	bf00      	nop
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d103      	bne.n	8006ffa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e00c      	b.n	8007014 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e002      	b.n	8007008 <vListInsert+0x2e>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d2f6      	bcs.n	8007002 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]
}
 8007040:	bf00      	nop
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6892      	ldr	r2, [r2, #8]
 8007062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6852      	ldr	r2, [r2, #4]
 800706c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	429a      	cmp	r2, r3
 8007076:	d103      	bne.n	8007080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	1e5a      	subs	r2, r3, #1
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070ca:	f002 fc9b 	bl	8009a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	441a      	add	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	3b01      	subs	r3, #1
 80070fc:	68f9      	ldr	r1, [r7, #12]
 80070fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	441a      	add	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22ff      	movs	r2, #255	; 0xff
 800710e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	22ff      	movs	r2, #255	; 0xff
 8007116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d114      	bne.n	800714a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01a      	beq.n	800715e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3310      	adds	r3, #16
 800712c:	4618      	mov	r0, r3
 800712e:	f001 fb99 	bl	8008864 <xTaskRemoveFromEventList>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d012      	beq.n	800715e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <xQueueGenericReset+0xcc>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	e009      	b.n	800715e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3310      	adds	r3, #16
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff fef2 	bl	8006f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3324      	adds	r3, #36	; 0x24
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff feed 	bl	8006f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800715e:	f002 fc81 	bl	8009a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007162:	2301      	movs	r3, #1
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08e      	sub	sp, #56	; 0x38
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <xQueueGenericCreateStatic+0x52>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <xQueueGenericCreateStatic+0x56>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <xQueueGenericCreateStatic+0x58>
 80071c6:	2300      	movs	r3, #0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	623b      	str	r3, [r7, #32]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <xQueueGenericCreateStatic+0x7e>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <xQueueGenericCreateStatic+0x82>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <xQueueGenericCreateStatic+0x84>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	61fb      	str	r3, [r7, #28]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800720e:	2350      	movs	r3, #80	; 0x50
 8007210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b50      	cmp	r3, #80	; 0x50
 8007216:	d00a      	beq.n	800722e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	61bb      	str	r3, [r7, #24]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800722e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007242:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	4613      	mov	r3, r2
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f83f 	bl	80072d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007258:	4618      	mov	r0, r3
 800725a:	3730      	adds	r7, #48	; 0x30
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af02      	add	r7, sp, #8
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	613b      	str	r3, [r7, #16]
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	3350      	adds	r3, #80	; 0x50
 8007298:	4618      	mov	r0, r3
 800729a:	f002 fcd5 	bl	8009c48 <pvPortMalloc>
 800729e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d011      	beq.n	80072ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	3350      	adds	r3, #80	; 0x50
 80072ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072b8:	79fa      	ldrb	r2, [r7, #7]
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	4613      	mov	r3, r2
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f805 	bl	80072d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072ca:	69bb      	ldr	r3, [r7, #24]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d103      	bne.n	80072f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e002      	b.n	80072f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007302:	2101      	movs	r1, #1
 8007304:	69b8      	ldr	r0, [r7, #24]
 8007306:	f7ff fecb 	bl	80070a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800731a:	b580      	push	{r7, lr}
 800731c:	b08a      	sub	sp, #40	; 0x28
 800731e:	af02      	add	r7, sp, #8
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	61bb      	str	r3, [r7, #24]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	429a      	cmp	r2, r3
 8007348:	d90a      	bls.n	8007360 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	617b      	str	r3, [r7, #20]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007360:	2302      	movs	r3, #2
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7ff ff00 	bl	8007170 <xQueueGenericCreateStatic>
 8007370:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800737e:	69fb      	ldr	r3, [r7, #28]
	}
 8007380:	4618      	mov	r0, r3
 8007382:	3720      	adds	r7, #32
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	613b      	str	r3, [r7, #16]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d90a      	bls.n	80073cc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60fb      	str	r3, [r7, #12]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80073cc:	2202      	movs	r2, #2
 80073ce:	2100      	movs	r1, #0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ff45 	bl	8007260 <xQueueGenericCreate>
 80073d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80073e4:	697b      	ldr	r3, [r7, #20]
	}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08e      	sub	sp, #56	; 0x38
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073fe:	2300      	movs	r3, #0
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <xQueueGenericSend+0x32>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <xQueueGenericSend+0x40>
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <xQueueGenericSend+0x44>
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <xQueueGenericSend+0x46>
 8007434:	2300      	movs	r3, #0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <xQueueGenericSend+0x60>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d103      	bne.n	800745e <xQueueGenericSend+0x6e>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745a:	2b01      	cmp	r3, #1
 800745c:	d101      	bne.n	8007462 <xQueueGenericSend+0x72>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueGenericSend+0x74>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <xQueueGenericSend+0x8e>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	623b      	str	r3, [r7, #32]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800747e:	f001 fbaf 	bl	8008be0 <xTaskGetSchedulerState>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <xQueueGenericSend+0x9e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <xQueueGenericSend+0xa2>
 800748e:	2301      	movs	r3, #1
 8007490:	e000      	b.n	8007494 <xQueueGenericSend+0xa4>
 8007492:	2300      	movs	r3, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <xQueueGenericSend+0xbe>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	61fb      	str	r3, [r7, #28]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ae:	f002 faa9 	bl	8009a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d302      	bcc.n	80074c4 <xQueueGenericSend+0xd4>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d129      	bne.n	8007518 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ca:	f000 fbd2 	bl	8007c72 <prvCopyDataToQueue>
 80074ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 f9c1 	bl	8008864 <xTaskRemoveFromEventList>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d013      	beq.n	8007510 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074e8:	4b3f      	ldr	r3, [pc, #252]	; (80075e8 <xQueueGenericSend+0x1f8>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	e00a      	b.n	8007510 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007500:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <xQueueGenericSend+0x1f8>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007510:	f002 faa8 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 8007514:	2301      	movs	r3, #1
 8007516:	e063      	b.n	80075e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800751e:	f002 faa1 	bl	8009a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007522:	2300      	movs	r3, #0
 8007524:	e05c      	b.n	80075e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f9fb 	bl	800892c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007536:	2301      	movs	r3, #1
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800753a:	f002 fa93 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800753e:	f000 ff6d 	bl	800841c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007542:	f002 fa5f 	bl	8009a04 <vPortEnterCritical>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800754c:	b25b      	sxtb	r3, r3
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d103      	bne.n	800755c <xQueueGenericSend+0x16c>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007562:	b25b      	sxtb	r3, r3
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d103      	bne.n	8007572 <xQueueGenericSend+0x182>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007572:	f002 fa77 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007576:	1d3a      	adds	r2, r7, #4
 8007578:	f107 0314 	add.w	r3, r7, #20
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f9ea 	bl	8008958 <xTaskCheckForTimeOut>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d124      	bne.n	80075d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800758a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758c:	f000 fc69 	bl	8007e62 <prvIsQueueFull>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d018      	beq.n	80075c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	3310      	adds	r3, #16
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 f910 	bl	80087c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a6:	f000 fbf4 	bl	8007d92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075aa:	f000 ff45 	bl	8008438 <xTaskResumeAll>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f47f af7c 	bne.w	80074ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <xQueueGenericSend+0x1f8>)
 80075b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	e772      	b.n	80074ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ca:	f000 fbe2 	bl	8007d92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ce:	f000 ff33 	bl	8008438 <xTaskResumeAll>
 80075d2:	e76c      	b.n	80074ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075d6:	f000 fbdc 	bl	8007d92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075da:	f000 ff2d 	bl	8008438 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3738      	adds	r7, #56	; 0x38
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b090      	sub	sp, #64	; 0x40
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <xQueueGenericSendFromISR+0x3c>
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <xQueueGenericSendFromISR+0x40>
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <xQueueGenericSendFromISR+0x42>
 800762c:	2300      	movs	r3, #0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d103      	bne.n	8007656 <xQueueGenericSendFromISR+0x6a>
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <xQueueGenericSendFromISR+0x6e>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <xQueueGenericSendFromISR+0x70>
 800765a:	2300      	movs	r3, #0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	623b      	str	r3, [r7, #32]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007676:	f002 faa7 	bl	8009bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800767a:	f3ef 8211 	mrs	r2, BASEPRI
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	61fa      	str	r2, [r7, #28]
 8007690:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007692:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <xQueueGenericSendFromISR+0xbc>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d12f      	bne.n	8007708 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076be:	f000 fad8 	bl	8007c72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ca:	d112      	bne.n	80076f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d016      	beq.n	8007702 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	3324      	adds	r3, #36	; 0x24
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 f8c3 	bl	8008864 <xTaskRemoveFromEventList>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00e      	beq.n	8007702 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e007      	b.n	8007702 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076f6:	3301      	adds	r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	b25a      	sxtb	r2, r3
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007702:	2301      	movs	r3, #1
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007706:	e001      	b.n	800770c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800771a:	4618      	mov	r0, r3
 800771c:	3740      	adds	r7, #64	; 0x40
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08c      	sub	sp, #48	; 0x30
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <xQueueReceive+0x30>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	623b      	str	r3, [r7, #32]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d103      	bne.n	8007762 <xQueueReceive+0x3e>
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueReceive+0x42>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueReceive+0x44>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <xQueueReceive+0x5e>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	61fb      	str	r3, [r7, #28]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007782:	f001 fa2d 	bl	8008be0 <xTaskGetSchedulerState>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <xQueueReceive+0x6e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <xQueueReceive+0x72>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <xQueueReceive+0x74>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xQueueReceive+0x8e>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	61bb      	str	r3, [r7, #24]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077b2:	f002 f927 	bl	8009a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01f      	beq.n	8007802 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c6:	f000 fabe 	bl	8007d46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	1e5a      	subs	r2, r3, #1
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00f      	beq.n	80077fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	3310      	adds	r3, #16
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 f840 	bl	8008864 <xTaskRemoveFromEventList>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ea:	4b3d      	ldr	r3, [pc, #244]	; (80078e0 <xQueueReceive+0x1bc>)
 80077ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077fa:	f002 f933 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 80077fe:	2301      	movs	r3, #1
 8007800:	e069      	b.n	80078d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007808:	f002 f92c 	bl	8009a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800780c:	2300      	movs	r3, #0
 800780e:	e062      	b.n	80078d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007816:	f107 0310 	add.w	r3, r7, #16
 800781a:	4618      	mov	r0, r3
 800781c:	f001 f886 	bl	800892c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007824:	f002 f91e 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007828:	f000 fdf8 	bl	800841c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800782c:	f002 f8ea 	bl	8009a04 <vPortEnterCritical>
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007836:	b25b      	sxtb	r3, r3
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783c:	d103      	bne.n	8007846 <xQueueReceive+0x122>
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800784c:	b25b      	sxtb	r3, r3
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d103      	bne.n	800785c <xQueueReceive+0x138>
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800785c:	f002 f902 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007860:	1d3a      	adds	r2, r7, #4
 8007862:	f107 0310 	add.w	r3, r7, #16
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f001 f875 	bl	8008958 <xTaskCheckForTimeOut>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d123      	bne.n	80078bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007876:	f000 fade 	bl	8007e36 <prvIsQueueEmpty>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d017      	beq.n	80078b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	3324      	adds	r3, #36	; 0x24
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f000 ff9b 	bl	80087c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800788e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007890:	f000 fa7f 	bl	8007d92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007894:	f000 fdd0 	bl	8008438 <xTaskResumeAll>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d189      	bne.n	80077b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <xQueueReceive+0x1bc>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	e780      	b.n	80077b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b2:	f000 fa6e 	bl	8007d92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078b6:	f000 fdbf 	bl	8008438 <xTaskResumeAll>
 80078ba:	e77a      	b.n	80077b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078be:	f000 fa68 	bl	8007d92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078c2:	f000 fdb9 	bl	8008438 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c8:	f000 fab5 	bl	8007e36 <prvIsQueueEmpty>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f43f af6f 	beq.w	80077b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3730      	adds	r7, #48	; 0x30
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	; 0x38
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80078f6:	2300      	movs	r3, #0
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	623b      	str	r3, [r7, #32]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	61fb      	str	r3, [r7, #28]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007934:	f001 f954 	bl	8008be0 <xTaskGetSchedulerState>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <xQueueSemaphoreTake+0x60>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <xQueueSemaphoreTake+0x64>
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <xQueueSemaphoreTake+0x66>
 8007948:	2300      	movs	r3, #0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	61bb      	str	r3, [r7, #24]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007964:	f002 f84e 	bl	8009a04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	2b00      	cmp	r3, #0
 8007972:	d024      	beq.n	80079be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	1e5a      	subs	r2, r3, #1
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007984:	f001 faa2 	bl	8008ecc <pvTaskIncrementMutexHeldCount>
 8007988:	4602      	mov	r2, r0
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	3310      	adds	r3, #16
 800799a:	4618      	mov	r0, r3
 800799c:	f000 ff62 	bl	8008864 <xTaskRemoveFromEventList>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079a6:	4b54      	ldr	r3, [pc, #336]	; (8007af8 <xQueueSemaphoreTake+0x214>)
 80079a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079b6:	f002 f855 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e097      	b.n	8007aee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d111      	bne.n	80079e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	617b      	str	r3, [r7, #20]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079e0:	f002 f840 	bl	8009a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079e4:	2300      	movs	r3, #0
 80079e6:	e082      	b.n	8007aee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079ee:	f107 030c 	add.w	r3, r7, #12
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 ff9a 	bl	800892c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079fc:	f002 f832 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a00:	f000 fd0c 	bl	800841c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a04:	f001 fffe 	bl	8009a04 <vPortEnterCritical>
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a0e:	b25b      	sxtb	r3, r3
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d103      	bne.n	8007a1e <xQueueSemaphoreTake+0x13a>
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a24:	b25b      	sxtb	r3, r3
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d103      	bne.n	8007a34 <xQueueSemaphoreTake+0x150>
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a34:	f002 f816 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a38:	463a      	mov	r2, r7
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 ff89 	bl	8008958 <xTaskCheckForTimeOut>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d132      	bne.n	8007ab2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a4e:	f000 f9f2 	bl	8007e36 <prvIsQueueEmpty>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d026      	beq.n	8007aa6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a60:	f001 ffd0 	bl	8009a04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 f8d7 	bl	8008c1c <xTaskPriorityInherit>
 8007a6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a70:	f001 fff8 	bl	8009a64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fea1 	bl	80087c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a84:	f000 f985 	bl	8007d92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a88:	f000 fcd6 	bl	8008438 <xTaskResumeAll>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f47f af68 	bne.w	8007964 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007a94:	4b18      	ldr	r3, [pc, #96]	; (8007af8 <xQueueSemaphoreTake+0x214>)
 8007a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	e75e      	b.n	8007964 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aa8:	f000 f973 	bl	8007d92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aac:	f000 fcc4 	bl	8008438 <xTaskResumeAll>
 8007ab0:	e758      	b.n	8007964 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ab4:	f000 f96d 	bl	8007d92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ab8:	f000 fcbe 	bl	8008438 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007abe:	f000 f9ba 	bl	8007e36 <prvIsQueueEmpty>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f43f af4d 	beq.w	8007964 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007ad0:	f001 ff98 	bl	8009a04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ad6:	f000 f8b4 	bl	8007c42 <prvGetDisinheritPriorityAfterTimeout>
 8007ada:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f970 	bl	8008dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ae8:	f001 ffbc 	bl	8009a64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007aec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3738      	adds	r7, #56	; 0x38
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08e      	sub	sp, #56	; 0x38
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	623b      	str	r3, [r7, #32]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <xQueueReceiveFromISR+0x3a>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <xQueueReceiveFromISR+0x3e>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <xQueueReceiveFromISR+0x40>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	61fb      	str	r3, [r7, #28]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b56:	f002 f837 	bl	8009bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8007b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	61ba      	str	r2, [r7, #24]
 8007b70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d02f      	beq.n	8007be2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b90:	f000 f8d9 	bl	8007d46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	1e5a      	subs	r2, r3, #1
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d112      	bne.n	8007bcc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	3310      	adds	r3, #16
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fe56 	bl	8008864 <xTaskRemoveFromEventList>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	e007      	b.n	8007bdc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	b25a      	sxtb	r2, r3
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
 8007be0:	e001      	b.n	8007be6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f383 8811 	msr	BASEPRI, r3
}
 8007bf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3738      	adds	r7, #56	; 0x38
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <vQueueDelete+0x28>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	60bb      	str	r3, [r7, #8]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f95f 	bl	8007ee8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f002 f8d3 	bl	8009de0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007c3a:	bf00      	nop
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d006      	beq.n	8007c60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e001      	b.n	8007c64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c64:	68fb      	ldr	r3, [r7, #12]
	}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10d      	bne.n	8007cac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d14d      	bne.n	8007d34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 f825 	bl	8008cec <xTaskPriorityDisinherit>
 8007ca2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	609a      	str	r2, [r3, #8]
 8007caa:	e043      	b.n	8007d34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d119      	bne.n	8007ce6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6858      	ldr	r0, [r3, #4]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	461a      	mov	r2, r3
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	f002 f9d7 	bl	800a070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	441a      	add	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d32b      	bcc.n	8007d34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	e026      	b.n	8007d34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68d8      	ldr	r0, [r3, #12]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	f002 f9bd 	bl	800a070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	425b      	negs	r3, r3
 8007d00:	441a      	add	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d207      	bcs.n	8007d22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	425b      	negs	r3, r3
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d105      	bne.n	8007d34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d3c:	697b      	ldr	r3, [r7, #20]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d018      	beq.n	8007d8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	441a      	add	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d303      	bcc.n	8007d7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68d9      	ldr	r1, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	461a      	mov	r2, r3
 8007d84:	6838      	ldr	r0, [r7, #0]
 8007d86:	f002 f973 	bl	800a070 <memcpy>
	}
}
 8007d8a:	bf00      	nop
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d9a:	f001 fe33 	bl	8009a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007da6:	e011      	b.n	8007dcc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d012      	beq.n	8007dd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3324      	adds	r3, #36	; 0x24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fd55 	bl	8008864 <xTaskRemoveFromEventList>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dc0:	f000 fe2c 	bl	8008a1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dce9      	bgt.n	8007da8 <prvUnlockQueue+0x16>
 8007dd4:	e000      	b.n	8007dd8 <prvUnlockQueue+0x46>
					break;
 8007dd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	22ff      	movs	r2, #255	; 0xff
 8007ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007de0:	f001 fe40 	bl	8009a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007de4:	f001 fe0e 	bl	8009a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007df0:	e011      	b.n	8007e16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d012      	beq.n	8007e20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3310      	adds	r3, #16
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fd30 	bl	8008864 <xTaskRemoveFromEventList>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e0a:	f000 fe07 	bl	8008a1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dce9      	bgt.n	8007df2 <prvUnlockQueue+0x60>
 8007e1e:	e000      	b.n	8007e22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	22ff      	movs	r2, #255	; 0xff
 8007e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e2a:	f001 fe1b 	bl	8009a64 <vPortExitCritical>
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e3e:	f001 fde1 	bl	8009a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e001      	b.n	8007e54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e54:	f001 fe06 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8007e58:	68fb      	ldr	r3, [r7, #12]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e6a:	f001 fdcb 	bl	8009a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d102      	bne.n	8007e80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e001      	b.n	8007e84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e84:	f001 fdee 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8007e88:	68fb      	ldr	r3, [r7, #12]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e014      	b.n	8007ece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ea4:	4a0f      	ldr	r2, [pc, #60]	; (8007ee4 <vQueueAddToRegistry+0x50>)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007eb0:	490c      	ldr	r1, [pc, #48]	; (8007ee4 <vQueueAddToRegistry+0x50>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007eba:	4a0a      	ldr	r2, [pc, #40]	; (8007ee4 <vQueueAddToRegistry+0x50>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ec6:	e006      	b.n	8007ed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b07      	cmp	r3, #7
 8007ed2:	d9e7      	bls.n	8007ea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20004cb4 	.word	0x20004cb4

08007ee8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e016      	b.n	8007f24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <vQueueUnregisterQueue+0x50>)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d10b      	bne.n	8007f1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f06:	4a0c      	ldr	r2, [pc, #48]	; (8007f38 <vQueueUnregisterQueue+0x50>)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f10:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <vQueueUnregisterQueue+0x50>)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	4413      	add	r3, r2
 8007f18:	2200      	movs	r2, #0
 8007f1a:	605a      	str	r2, [r3, #4]
				break;
 8007f1c:	e006      	b.n	8007f2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b07      	cmp	r3, #7
 8007f28:	d9e5      	bls.n	8007ef6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	20004cb4 	.word	0x20004cb4

08007f3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f4c:	f001 fd5a 	bl	8009a04 <vPortEnterCritical>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f56:	b25b      	sxtb	r3, r3
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d103      	bne.n	8007f66 <vQueueWaitForMessageRestricted+0x2a>
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f6c:	b25b      	sxtb	r3, r3
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f72:	d103      	bne.n	8007f7c <vQueueWaitForMessageRestricted+0x40>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f7c:	f001 fd72 	bl	8009a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	3324      	adds	r3, #36	; 0x24
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fc3b 	bl	800880c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f96:	6978      	ldr	r0, [r7, #20]
 8007f98:	f7ff fefb 	bl	8007d92 <prvUnlockQueue>
	}
 8007f9c:	bf00      	nop
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08e      	sub	sp, #56	; 0x38
 8007fa8:	af04      	add	r7, sp, #16
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <xTaskCreateStatic+0x2a>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	623b      	str	r3, [r7, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	e7fe      	b.n	8007fcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <xTaskCreateStatic+0x46>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	61fb      	str	r3, [r7, #28]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fea:	235c      	movs	r3, #92	; 0x5c
 8007fec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ff2:	d00a      	beq.n	800800a <xTaskCreateStatic+0x66>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	61bb      	str	r3, [r7, #24]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800800a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01e      	beq.n	8008050 <xTaskCreateStatic+0xac>
 8008012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01b      	beq.n	8008050 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008020:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800802a:	2300      	movs	r3, #0
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	9302      	str	r3, [sp, #8]
 8008032:	f107 0314 	add.w	r3, r7, #20
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f850 	bl	80080e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800804a:	f000 f8dd 	bl	8008208 <prvAddNewTaskToReadyList>
 800804e:	e001      	b.n	8008054 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008054:	697b      	ldr	r3, [r7, #20]
	}
 8008056:	4618      	mov	r0, r3
 8008058:	3728      	adds	r7, #40	; 0x28
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800805e:	b580      	push	{r7, lr}
 8008060:	b08c      	sub	sp, #48	; 0x30
 8008062:	af04      	add	r7, sp, #16
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4618      	mov	r0, r3
 8008074:	f001 fde8 	bl	8009c48 <pvPortMalloc>
 8008078:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00e      	beq.n	800809e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008080:	205c      	movs	r0, #92	; 0x5c
 8008082:	f001 fde1 	bl	8009c48 <pvPortMalloc>
 8008086:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	631a      	str	r2, [r3, #48]	; 0x30
 8008094:	e005      	b.n	80080a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008096:	6978      	ldr	r0, [r7, #20]
 8008098:	f001 fea2 	bl	8009de0 <vPortFree>
 800809c:	e001      	b.n	80080a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d017      	beq.n	80080d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080b0:	88fa      	ldrh	r2, [r7, #6]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	9302      	str	r3, [sp, #8]
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f80e 	bl	80080e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080cc:	69f8      	ldr	r0, [r7, #28]
 80080ce:	f000 f89b 	bl	8008208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080d2:	2301      	movs	r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	e002      	b.n	80080de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080d8:	f04f 33ff 	mov.w	r3, #4294967295
 80080dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080de:	69bb      	ldr	r3, [r7, #24]
	}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	461a      	mov	r2, r3
 8008100:	21a5      	movs	r1, #165	; 0xa5
 8008102:	f001 ffc3 	bl	800a08c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008110:	3b01      	subs	r3, #1
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <prvInitialiseNewTask+0x58>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	617b      	str	r3, [r7, #20]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01f      	beq.n	8008186 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008146:	2300      	movs	r3, #0
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	e012      	b.n	8008172 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	4413      	add	r3, r2
 8008152:	7819      	ldrb	r1, [r3, #0]
 8008154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	4413      	add	r3, r2
 800815a:	3334      	adds	r3, #52	; 0x34
 800815c:	460a      	mov	r2, r1
 800815e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	3301      	adds	r3, #1
 8008170:	61fb      	str	r3, [r7, #28]
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	2b0f      	cmp	r3, #15
 8008176:	d9e9      	bls.n	800814c <prvInitialiseNewTask+0x64>
 8008178:	e000      	b.n	800817c <prvInitialiseNewTask+0x94>
			{
				break;
 800817a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008184:	e003      	b.n	800818e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	2b37      	cmp	r3, #55	; 0x37
 8008192:	d901      	bls.n	8008198 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008194:	2337      	movs	r3, #55	; 0x37
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	2200      	movs	r2, #0
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fee2 	bl	8006f78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	3318      	adds	r3, #24
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fedd 	bl	8006f78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	2200      	movs	r2, #0
 80081d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	68f9      	ldr	r1, [r7, #12]
 80081e6:	69b8      	ldr	r0, [r7, #24]
 80081e8:	f001 fae0 	bl	80097ac <pxPortInitialiseStack>
 80081ec:	4602      	mov	r2, r0
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081fe:	bf00      	nop
 8008200:	3720      	adds	r7, #32
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008210:	f001 fbf8 	bl	8009a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008214:	4b2d      	ldr	r3, [pc, #180]	; (80082cc <prvAddNewTaskToReadyList+0xc4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	4a2c      	ldr	r2, [pc, #176]	; (80082cc <prvAddNewTaskToReadyList+0xc4>)
 800821c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800821e:	4b2c      	ldr	r3, [pc, #176]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d109      	bne.n	800823a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008226:	4a2a      	ldr	r2, [pc, #168]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800822c:	4b27      	ldr	r3, [pc, #156]	; (80082cc <prvAddNewTaskToReadyList+0xc4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d110      	bne.n	8008256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008234:	f000 fc16 	bl	8008a64 <prvInitialiseTaskLists>
 8008238:	e00d      	b.n	8008256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800823a:	4b26      	ldr	r3, [pc, #152]	; (80082d4 <prvAddNewTaskToReadyList+0xcc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008242:	4b23      	ldr	r3, [pc, #140]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	429a      	cmp	r2, r3
 800824e:	d802      	bhi.n	8008256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008250:	4a1f      	ldr	r2, [pc, #124]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008256:	4b20      	ldr	r3, [pc, #128]	; (80082d8 <prvAddNewTaskToReadyList+0xd0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <prvAddNewTaskToReadyList+0xd0>)
 800825e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008260:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <prvAddNewTaskToReadyList+0xd0>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <prvAddNewTaskToReadyList+0xd4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d903      	bls.n	800827c <prvAddNewTaskToReadyList+0x74>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	4a18      	ldr	r2, [pc, #96]	; (80082dc <prvAddNewTaskToReadyList+0xd4>)
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <prvAddNewTaskToReadyList+0xd8>)
 800828a:	441a      	add	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fe fe7d 	bl	8006f92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008298:	f001 fbe4 	bl	8009a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <prvAddNewTaskToReadyList+0xcc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00e      	beq.n	80082c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082a4:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d207      	bcs.n	80082c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <prvAddNewTaskToReadyList+0xdc>)
 80082b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000e10 	.word	0x20000e10
 80082d0:	2000093c 	.word	0x2000093c
 80082d4:	20000e1c 	.word	0x20000e1c
 80082d8:	20000e2c 	.word	0x20000e2c
 80082dc:	20000e18 	.word	0x20000e18
 80082e0:	20000940 	.word	0x20000940
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d017      	beq.n	800832a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <vTaskDelay+0x60>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <vTaskDelay+0x30>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008318:	f000 f880 	bl	800841c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800831c:	2100      	movs	r1, #0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fde8 	bl	8008ef4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008324:	f000 f888 	bl	8008438 <xTaskResumeAll>
 8008328:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d107      	bne.n	8008340 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008330:	4b06      	ldr	r3, [pc, #24]	; (800834c <vTaskDelay+0x64>)
 8008332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000e38 	.word	0x20000e38
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800835e:	463a      	mov	r2, r7
 8008360:	1d39      	adds	r1, r7, #4
 8008362:	f107 0308 	add.w	r3, r7, #8
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fdb2 	bl	8006ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	9202      	str	r2, [sp, #8]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	2300      	movs	r3, #0
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	2300      	movs	r3, #0
 800837c:	460a      	mov	r2, r1
 800837e:	4921      	ldr	r1, [pc, #132]	; (8008404 <vTaskStartScheduler+0xb4>)
 8008380:	4821      	ldr	r0, [pc, #132]	; (8008408 <vTaskStartScheduler+0xb8>)
 8008382:	f7ff fe0f 	bl	8007fa4 <xTaskCreateStatic>
 8008386:	4603      	mov	r3, r0
 8008388:	4a20      	ldr	r2, [pc, #128]	; (800840c <vTaskStartScheduler+0xbc>)
 800838a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800838c:	4b1f      	ldr	r3, [pc, #124]	; (800840c <vTaskStartScheduler+0xbc>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008394:	2301      	movs	r3, #1
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e001      	b.n	800839e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800839a:	2300      	movs	r3, #0
 800839c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d102      	bne.n	80083aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083a4:	f000 fdfa 	bl	8008f9c <xTimerCreateTimerTask>
 80083a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d116      	bne.n	80083de <vTaskStartScheduler+0x8e>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
}
 80083c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083c4:	4b12      	ldr	r3, [pc, #72]	; (8008410 <vTaskStartScheduler+0xc0>)
 80083c6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <vTaskStartScheduler+0xc4>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <vTaskStartScheduler+0xc8>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083d8:	f001 fa72 	bl	80098c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083dc:	e00e      	b.n	80083fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	d10a      	bne.n	80083fc <vTaskStartScheduler+0xac>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60fb      	str	r3, [r7, #12]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <vTaskStartScheduler+0xaa>
}
 80083fc:	bf00      	nop
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	0800cca4 	.word	0x0800cca4
 8008408:	08008a35 	.word	0x08008a35
 800840c:	20000e34 	.word	0x20000e34
 8008410:	20000e30 	.word	0x20000e30
 8008414:	20000e1c 	.word	0x20000e1c
 8008418:	20000e14 	.word	0x20000e14

0800841c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008420:	4b04      	ldr	r3, [pc, #16]	; (8008434 <vTaskSuspendAll+0x18>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	4a03      	ldr	r2, [pc, #12]	; (8008434 <vTaskSuspendAll+0x18>)
 8008428:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800842a:	bf00      	nop
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20000e38 	.word	0x20000e38

08008438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008446:	4b42      	ldr	r3, [pc, #264]	; (8008550 <xTaskResumeAll+0x118>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <xTaskResumeAll+0x2c>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	603b      	str	r3, [r7, #0]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008464:	f001 face 	bl	8009a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008468:	4b39      	ldr	r3, [pc, #228]	; (8008550 <xTaskResumeAll+0x118>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3b01      	subs	r3, #1
 800846e:	4a38      	ldr	r2, [pc, #224]	; (8008550 <xTaskResumeAll+0x118>)
 8008470:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008472:	4b37      	ldr	r3, [pc, #220]	; (8008550 <xTaskResumeAll+0x118>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d162      	bne.n	8008540 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800847a:	4b36      	ldr	r3, [pc, #216]	; (8008554 <xTaskResumeAll+0x11c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d05e      	beq.n	8008540 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008482:	e02f      	b.n	80084e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008484:	4b34      	ldr	r3, [pc, #208]	; (8008558 <xTaskResumeAll+0x120>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3318      	adds	r3, #24
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe fddb 	bl	800704c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3304      	adds	r3, #4
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fdd6 	bl	800704c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a4:	4b2d      	ldr	r3, [pc, #180]	; (800855c <xTaskResumeAll+0x124>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d903      	bls.n	80084b4 <xTaskResumeAll+0x7c>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	4a2a      	ldr	r2, [pc, #168]	; (800855c <xTaskResumeAll+0x124>)
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4a27      	ldr	r2, [pc, #156]	; (8008560 <xTaskResumeAll+0x128>)
 80084c2:	441a      	add	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3304      	adds	r3, #4
 80084c8:	4619      	mov	r1, r3
 80084ca:	4610      	mov	r0, r2
 80084cc:	f7fe fd61 	bl	8006f92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d4:	4b23      	ldr	r3, [pc, #140]	; (8008564 <xTaskResumeAll+0x12c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	429a      	cmp	r2, r3
 80084dc:	d302      	bcc.n	80084e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80084de:	4b22      	ldr	r3, [pc, #136]	; (8008568 <xTaskResumeAll+0x130>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084e4:	4b1c      	ldr	r3, [pc, #112]	; (8008558 <xTaskResumeAll+0x120>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1cb      	bne.n	8008484 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084f2:	f000 fb55 	bl	8008ba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <xTaskResumeAll+0x134>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d010      	beq.n	8008524 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008502:	f000 f847 	bl	8008594 <xTaskIncrementTick>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800850c:	4b16      	ldr	r3, [pc, #88]	; (8008568 <xTaskResumeAll+0x130>)
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3b01      	subs	r3, #1
 8008516:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1f1      	bne.n	8008502 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <xTaskResumeAll+0x134>)
 8008520:	2200      	movs	r2, #0
 8008522:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008524:	4b10      	ldr	r3, [pc, #64]	; (8008568 <xTaskResumeAll+0x130>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d009      	beq.n	8008540 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800852c:	2301      	movs	r3, #1
 800852e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <xTaskResumeAll+0x138>)
 8008532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008540:	f001 fa90 	bl	8009a64 <vPortExitCritical>

	return xAlreadyYielded;
 8008544:	68bb      	ldr	r3, [r7, #8]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000e38 	.word	0x20000e38
 8008554:	20000e10 	.word	0x20000e10
 8008558:	20000dd0 	.word	0x20000dd0
 800855c:	20000e18 	.word	0x20000e18
 8008560:	20000940 	.word	0x20000940
 8008564:	2000093c 	.word	0x2000093c
 8008568:	20000e24 	.word	0x20000e24
 800856c:	20000e20 	.word	0x20000e20
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <xTaskGetTickCount+0x1c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008580:	687b      	ldr	r3, [r7, #4]
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000e14 	.word	0x20000e14

08008594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859e:	4b4f      	ldr	r3, [pc, #316]	; (80086dc <xTaskIncrementTick+0x148>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 808f 	bne.w	80086c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085a8:	4b4d      	ldr	r3, [pc, #308]	; (80086e0 <xTaskIncrementTick+0x14c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3301      	adds	r3, #1
 80085ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085b0:	4a4b      	ldr	r2, [pc, #300]	; (80086e0 <xTaskIncrementTick+0x14c>)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d120      	bne.n	80085fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085bc:	4b49      	ldr	r3, [pc, #292]	; (80086e4 <xTaskIncrementTick+0x150>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <xTaskIncrementTick+0x48>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	603b      	str	r3, [r7, #0]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xTaskIncrementTick+0x46>
 80085dc:	4b41      	ldr	r3, [pc, #260]	; (80086e4 <xTaskIncrementTick+0x150>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	4b41      	ldr	r3, [pc, #260]	; (80086e8 <xTaskIncrementTick+0x154>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3f      	ldr	r2, [pc, #252]	; (80086e4 <xTaskIncrementTick+0x150>)
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	4a3f      	ldr	r2, [pc, #252]	; (80086e8 <xTaskIncrementTick+0x154>)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	4b3e      	ldr	r3, [pc, #248]	; (80086ec <xTaskIncrementTick+0x158>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3301      	adds	r3, #1
 80085f6:	4a3d      	ldr	r2, [pc, #244]	; (80086ec <xTaskIncrementTick+0x158>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	f000 fad1 	bl	8008ba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085fe:	4b3c      	ldr	r3, [pc, #240]	; (80086f0 <xTaskIncrementTick+0x15c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	429a      	cmp	r2, r3
 8008606:	d349      	bcc.n	800869c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008608:	4b36      	ldr	r3, [pc, #216]	; (80086e4 <xTaskIncrementTick+0x150>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008612:	4b37      	ldr	r3, [pc, #220]	; (80086f0 <xTaskIncrementTick+0x15c>)
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	601a      	str	r2, [r3, #0]
					break;
 800861a:	e03f      	b.n	800869c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861c:	4b31      	ldr	r3, [pc, #196]	; (80086e4 <xTaskIncrementTick+0x150>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d203      	bcs.n	800863c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008634:	4a2e      	ldr	r2, [pc, #184]	; (80086f0 <xTaskIncrementTick+0x15c>)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800863a:	e02f      	b.n	800869c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	3304      	adds	r3, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe fd03 	bl	800704c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	3318      	adds	r3, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fcfa 	bl	800704c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <xTaskIncrementTick+0x160>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d903      	bls.n	800866c <xTaskIncrementTick+0xd8>
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	4a22      	ldr	r2, [pc, #136]	; (80086f4 <xTaskIncrementTick+0x160>)
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a1f      	ldr	r2, [pc, #124]	; (80086f8 <xTaskIncrementTick+0x164>)
 800867a:	441a      	add	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7fe fc85 	bl	8006f92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b1b      	ldr	r3, [pc, #108]	; (80086fc <xTaskIncrementTick+0x168>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	429a      	cmp	r2, r3
 8008694:	d3b8      	bcc.n	8008608 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800869a:	e7b5      	b.n	8008608 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <xTaskIncrementTick+0x168>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a2:	4915      	ldr	r1, [pc, #84]	; (80086f8 <xTaskIncrementTick+0x164>)
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d901      	bls.n	80086b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086b8:	4b11      	ldr	r3, [pc, #68]	; (8008700 <xTaskIncrementTick+0x16c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	e004      	b.n	80086d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <xTaskIncrementTick+0x170>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3301      	adds	r3, #1
 80086cc:	4a0d      	ldr	r2, [pc, #52]	; (8008704 <xTaskIncrementTick+0x170>)
 80086ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086d0:	697b      	ldr	r3, [r7, #20]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000e38 	.word	0x20000e38
 80086e0:	20000e14 	.word	0x20000e14
 80086e4:	20000dc8 	.word	0x20000dc8
 80086e8:	20000dcc 	.word	0x20000dcc
 80086ec:	20000e28 	.word	0x20000e28
 80086f0:	20000e30 	.word	0x20000e30
 80086f4:	20000e18 	.word	0x20000e18
 80086f8:	20000940 	.word	0x20000940
 80086fc:	2000093c 	.word	0x2000093c
 8008700:	20000e24 	.word	0x20000e24
 8008704:	20000e20 	.word	0x20000e20

08008708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800870e:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <vTaskSwitchContext+0xa8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008716:	4b27      	ldr	r3, [pc, #156]	; (80087b4 <vTaskSwitchContext+0xac>)
 8008718:	2201      	movs	r2, #1
 800871a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800871c:	e041      	b.n	80087a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800871e:	4b25      	ldr	r3, [pc, #148]	; (80087b4 <vTaskSwitchContext+0xac>)
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008724:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <vTaskSwitchContext+0xb0>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	e010      	b.n	800874e <vTaskSwitchContext+0x46>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10a      	bne.n	8008748 <vTaskSwitchContext+0x40>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	607b      	str	r3, [r7, #4]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <vTaskSwitchContext+0x3e>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3b01      	subs	r3, #1
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	491b      	ldr	r1, [pc, #108]	; (80087bc <vTaskSwitchContext+0xb4>)
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0e4      	beq.n	800872c <vTaskSwitchContext+0x24>
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <vTaskSwitchContext+0xb4>)
 800876e:	4413      	add	r3, r2
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	605a      	str	r2, [r3, #4]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	3308      	adds	r3, #8
 8008784:	429a      	cmp	r2, r3
 8008786:	d104      	bne.n	8008792 <vTaskSwitchContext+0x8a>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	605a      	str	r2, [r3, #4]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <vTaskSwitchContext+0xb8>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	4a06      	ldr	r2, [pc, #24]	; (80087b8 <vTaskSwitchContext+0xb0>)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6013      	str	r3, [r2, #0]
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000e38 	.word	0x20000e38
 80087b4:	20000e24 	.word	0x20000e24
 80087b8:	20000e18 	.word	0x20000e18
 80087bc:	20000940 	.word	0x20000940
 80087c0:	2000093c 	.word	0x2000093c

080087c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	60fb      	str	r3, [r7, #12]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <vTaskPlaceOnEventList+0x44>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3318      	adds	r3, #24
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7fe fbf1 	bl	8006fda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087f8:	2101      	movs	r1, #1
 80087fa:	6838      	ldr	r0, [r7, #0]
 80087fc:	f000 fb7a 	bl	8008ef4 <prvAddCurrentTaskToDelayedList>
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	2000093c 	.word	0x2000093c

0800880c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	617b      	str	r3, [r7, #20]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008834:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <vTaskPlaceOnEventListRestricted+0x54>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3318      	adds	r3, #24
 800883a:	4619      	mov	r1, r3
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7fe fba8 	bl	8006f92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008848:	f04f 33ff 	mov.w	r3, #4294967295
 800884c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	68b8      	ldr	r0, [r7, #8]
 8008852:	f000 fb4f 	bl	8008ef4 <prvAddCurrentTaskToDelayedList>
	}
 8008856:	bf00      	nop
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	2000093c 	.word	0x2000093c

08008864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	60fb      	str	r3, [r7, #12]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	3318      	adds	r3, #24
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fbd9 	bl	800704c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800889a:	4b1e      	ldr	r3, [pc, #120]	; (8008914 <xTaskRemoveFromEventList+0xb0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d11d      	bne.n	80088de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fbd0 	bl	800704c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b0:	4b19      	ldr	r3, [pc, #100]	; (8008918 <xTaskRemoveFromEventList+0xb4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d903      	bls.n	80088c0 <xTaskRemoveFromEventList+0x5c>
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	4a16      	ldr	r2, [pc, #88]	; (8008918 <xTaskRemoveFromEventList+0xb4>)
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4a13      	ldr	r2, [pc, #76]	; (800891c <xTaskRemoveFromEventList+0xb8>)
 80088ce:	441a      	add	r2, r3
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f7fe fb5b 	bl	8006f92 <vListInsertEnd>
 80088dc:	e005      	b.n	80088ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	3318      	adds	r3, #24
 80088e2:	4619      	mov	r1, r3
 80088e4:	480e      	ldr	r0, [pc, #56]	; (8008920 <xTaskRemoveFromEventList+0xbc>)
 80088e6:	f7fe fb54 	bl	8006f92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	4b0d      	ldr	r3, [pc, #52]	; (8008924 <xTaskRemoveFromEventList+0xc0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d905      	bls.n	8008904 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088fc:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <xTaskRemoveFromEventList+0xc4>)
 80088fe:	2201      	movs	r2, #1
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e001      	b.n	8008908 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008908:	697b      	ldr	r3, [r7, #20]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000e38 	.word	0x20000e38
 8008918:	20000e18 	.word	0x20000e18
 800891c:	20000940 	.word	0x20000940
 8008920:	20000dd0 	.word	0x20000dd0
 8008924:	2000093c 	.word	0x2000093c
 8008928:	20000e24 	.word	0x20000e24

0800892c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008934:	4b06      	ldr	r3, [pc, #24]	; (8008950 <vTaskInternalSetTimeOutState+0x24>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800893c:	4b05      	ldr	r3, [pc, #20]	; (8008954 <vTaskInternalSetTimeOutState+0x28>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	605a      	str	r2, [r3, #4]
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000e28 	.word	0x20000e28
 8008954:	20000e14 	.word	0x20000e14

08008958 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	613b      	str	r3, [r7, #16]
}
 800897a:	bf00      	nop
 800897c:	e7fe      	b.n	800897c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	60fb      	str	r3, [r7, #12]
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800899a:	f001 f833 	bl	8009a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800899e:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <xTaskCheckForTimeOut+0xbc>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b6:	d102      	bne.n	80089be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	e023      	b.n	8008a06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <xTaskCheckForTimeOut+0xc0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d007      	beq.n	80089da <xTaskCheckForTimeOut+0x82>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d302      	bcc.n	80089da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089d4:	2301      	movs	r3, #1
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	e015      	b.n	8008a06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d20b      	bcs.n	80089fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	1ad2      	subs	r2, r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff ff9b 	bl	800892c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]
 80089fa:	e004      	b.n	8008a06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a02:	2301      	movs	r3, #1
 8008a04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a06:	f001 f82d 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000e14 	.word	0x20000e14
 8008a18:	20000e28 	.word	0x20000e28

08008a1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a20:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <vTaskMissedYield+0x14>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
}
 8008a26:	bf00      	nop
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	20000e24 	.word	0x20000e24

08008a34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a3c:	f000 f852 	bl	8008ae4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <prvIdleTask+0x28>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d9f9      	bls.n	8008a3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a48:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <prvIdleTask+0x2c>)
 8008a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a58:	e7f0      	b.n	8008a3c <prvIdleTask+0x8>
 8008a5a:	bf00      	nop
 8008a5c:	20000940 	.word	0x20000940
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	607b      	str	r3, [r7, #4]
 8008a6e:	e00c      	b.n	8008a8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4a12      	ldr	r2, [pc, #72]	; (8008ac4 <prvInitialiseTaskLists+0x60>)
 8008a7c:	4413      	add	r3, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fa5a 	bl	8006f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3301      	adds	r3, #1
 8008a88:	607b      	str	r3, [r7, #4]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b37      	cmp	r3, #55	; 0x37
 8008a8e:	d9ef      	bls.n	8008a70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a90:	480d      	ldr	r0, [pc, #52]	; (8008ac8 <prvInitialiseTaskLists+0x64>)
 8008a92:	f7fe fa51 	bl	8006f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a96:	480d      	ldr	r0, [pc, #52]	; (8008acc <prvInitialiseTaskLists+0x68>)
 8008a98:	f7fe fa4e 	bl	8006f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a9c:	480c      	ldr	r0, [pc, #48]	; (8008ad0 <prvInitialiseTaskLists+0x6c>)
 8008a9e:	f7fe fa4b 	bl	8006f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008aa2:	480c      	ldr	r0, [pc, #48]	; (8008ad4 <prvInitialiseTaskLists+0x70>)
 8008aa4:	f7fe fa48 	bl	8006f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008aa8:	480b      	ldr	r0, [pc, #44]	; (8008ad8 <prvInitialiseTaskLists+0x74>)
 8008aaa:	f7fe fa45 	bl	8006f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aae:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <prvInitialiseTaskLists+0x78>)
 8008ab0:	4a05      	ldr	r2, [pc, #20]	; (8008ac8 <prvInitialiseTaskLists+0x64>)
 8008ab2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <prvInitialiseTaskLists+0x7c>)
 8008ab6:	4a05      	ldr	r2, [pc, #20]	; (8008acc <prvInitialiseTaskLists+0x68>)
 8008ab8:	601a      	str	r2, [r3, #0]
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000940 	.word	0x20000940
 8008ac8:	20000da0 	.word	0x20000da0
 8008acc:	20000db4 	.word	0x20000db4
 8008ad0:	20000dd0 	.word	0x20000dd0
 8008ad4:	20000de4 	.word	0x20000de4
 8008ad8:	20000dfc 	.word	0x20000dfc
 8008adc:	20000dc8 	.word	0x20000dc8
 8008ae0:	20000dcc 	.word	0x20000dcc

08008ae4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aea:	e019      	b.n	8008b20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008aec:	f000 ff8a 	bl	8009a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af0:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <prvCheckTasksWaitingTermination+0x50>)
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3304      	adds	r3, #4
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe faa5 	bl	800704c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b02:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <prvCheckTasksWaitingTermination+0x54>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	4a0b      	ldr	r2, [pc, #44]	; (8008b38 <prvCheckTasksWaitingTermination+0x54>)
 8008b0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b0c:	4b0b      	ldr	r3, [pc, #44]	; (8008b3c <prvCheckTasksWaitingTermination+0x58>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	4a0a      	ldr	r2, [pc, #40]	; (8008b3c <prvCheckTasksWaitingTermination+0x58>)
 8008b14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b16:	f000 ffa5 	bl	8009a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f810 	bl	8008b40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b20:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <prvCheckTasksWaitingTermination+0x58>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e1      	bne.n	8008aec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000de4 	.word	0x20000de4
 8008b38:	20000e10 	.word	0x20000e10
 8008b3c:	20000df8 	.word	0x20000df8

08008b40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d108      	bne.n	8008b64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 f942 	bl	8009de0 <vPortFree>
				vPortFree( pxTCB );
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f93f 	bl	8009de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b62:	e018      	b.n	8008b96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d103      	bne.n	8008b76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 f936 	bl	8009de0 <vPortFree>
	}
 8008b74:	e00f      	b.n	8008b96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d00a      	beq.n	8008b96 <prvDeleteTCB+0x56>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	60fb      	str	r3, [r7, #12]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <prvDeleteTCB+0x54>
	}
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvResetNextTaskUnblockTime+0x38>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <prvResetNextTaskUnblockTime+0x3c>)
 8008bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bb8:	e008      	b.n	8008bcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <prvResetNextTaskUnblockTime+0x38>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a04      	ldr	r2, [pc, #16]	; (8008bdc <prvResetNextTaskUnblockTime+0x3c>)
 8008bca:	6013      	str	r3, [r2, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	20000dc8 	.word	0x20000dc8
 8008bdc:	20000e30 	.word	0x20000e30

08008be0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008be6:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <xTaskGetSchedulerState+0x34>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d102      	bne.n	8008bf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	607b      	str	r3, [r7, #4]
 8008bf2:	e008      	b.n	8008c06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf4:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <xTaskGetSchedulerState+0x38>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	607b      	str	r3, [r7, #4]
 8008c00:	e001      	b.n	8008c06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c02:	2300      	movs	r3, #0
 8008c04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c06:	687b      	ldr	r3, [r7, #4]
	}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	20000e1c 	.word	0x20000e1c
 8008c18:	20000e38 	.word	0x20000e38

08008c1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d051      	beq.n	8008cd6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c36:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <xTaskPriorityInherit+0xc4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d241      	bcs.n	8008cc4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	db06      	blt.n	8008c56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c48:	4b25      	ldr	r3, [pc, #148]	; (8008ce0 <xTaskPriorityInherit+0xc4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6959      	ldr	r1, [r3, #20]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4a1f      	ldr	r2, [pc, #124]	; (8008ce4 <xTaskPriorityInherit+0xc8>)
 8008c68:	4413      	add	r3, r2
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	d122      	bne.n	8008cb4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	3304      	adds	r3, #4
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe f9ea 	bl	800704c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c78:	4b19      	ldr	r3, [pc, #100]	; (8008ce0 <xTaskPriorityInherit+0xc4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c86:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <xTaskPriorityInherit+0xcc>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d903      	bls.n	8008c96 <xTaskPriorityInherit+0x7a>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	4a15      	ldr	r2, [pc, #84]	; (8008ce8 <xTaskPriorityInherit+0xcc>)
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4a10      	ldr	r2, [pc, #64]	; (8008ce4 <xTaskPriorityInherit+0xc8>)
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	4619      	mov	r1, r3
 8008cac:	4610      	mov	r0, r2
 8008cae:	f7fe f970 	bl	8006f92 <vListInsertEnd>
 8008cb2:	e004      	b.n	8008cbe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ce0 <xTaskPriorityInherit+0xc4>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e008      	b.n	8008cd6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <xTaskPriorityInherit+0xc4>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d201      	bcs.n	8008cd6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
	}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	2000093c 	.word	0x2000093c
 8008ce4:	20000940 	.word	0x20000940
 8008ce8:	20000e18 	.word	0x20000e18

08008cec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d056      	beq.n	8008db0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d02:	4b2e      	ldr	r3, [pc, #184]	; (8008dbc <xTaskPriorityDisinherit+0xd0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d00a      	beq.n	8008d22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60fb      	str	r3, [r7, #12]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	60bb      	str	r3, [r7, #8]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d44:	1e5a      	subs	r2, r3, #1
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d02c      	beq.n	8008db0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d128      	bne.n	8008db0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe f972 	bl	800704c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d80:	4b0f      	ldr	r3, [pc, #60]	; (8008dc0 <xTaskPriorityDisinherit+0xd4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d903      	bls.n	8008d90 <xTaskPriorityDisinherit+0xa4>
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a0c      	ldr	r2, [pc, #48]	; (8008dc0 <xTaskPriorityDisinherit+0xd4>)
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <xTaskPriorityDisinherit+0xd8>)
 8008d9e:	441a      	add	r2, r3
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	f7fe f8f3 	bl	8006f92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008db0:	697b      	ldr	r3, [r7, #20]
	}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	2000093c 	.word	0x2000093c
 8008dc0:	20000e18 	.word	0x20000e18
 8008dc4:	20000940 	.word	0x20000940

08008dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d06a      	beq.n	8008eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	60fb      	str	r3, [r7, #12]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d902      	bls.n	8008e0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	e002      	b.n	8008e14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d04b      	beq.n	8008eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d146      	bne.n	8008eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e28:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d10a      	bne.n	8008e48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	60bb      	str	r3, [r7, #8]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	db04      	blt.n	8008e66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	6959      	ldr	r1, [r3, #20]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4a13      	ldr	r2, [pc, #76]	; (8008ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e76:	4413      	add	r3, r2
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	d11c      	bne.n	8008eb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe f8e3 	bl	800704c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d903      	bls.n	8008e9a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	4a0c      	ldr	r2, [pc, #48]	; (8008ec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ea8:	441a      	add	r2, r3
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	f7fe f86e 	bl	8006f92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008eb6:	bf00      	nop
 8008eb8:	3720      	adds	r7, #32
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	2000093c 	.word	0x2000093c
 8008ec4:	20000940 	.word	0x20000940
 8008ec8:	20000e18 	.word	0x20000e18

08008ecc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ede:	3201      	adds	r2, #1
 8008ee0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ee2:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
	}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	2000093c 	.word	0x2000093c

08008ef4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008efe:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f04:	4b20      	ldr	r3, [pc, #128]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe f89e 	bl	800704c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d10a      	bne.n	8008f2e <prvAddCurrentTaskToDelayedList+0x3a>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d007      	beq.n	8008f2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4819      	ldr	r0, [pc, #100]	; (8008f8c <prvAddCurrentTaskToDelayedList+0x98>)
 8008f28:	f7fe f833 	bl	8006f92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f2c:	e026      	b.n	8008f7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d209      	bcs.n	8008f5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fe f841 	bl	8006fda <vListInsert>
}
 8008f58:	e010      	b.n	8008f7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f5a:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fe f837 	bl	8006fda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d202      	bcs.n	8008f7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f76:	4a08      	ldr	r2, [pc, #32]	; (8008f98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	6013      	str	r3, [r2, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000e14 	.word	0x20000e14
 8008f88:	2000093c 	.word	0x2000093c
 8008f8c:	20000dfc 	.word	0x20000dfc
 8008f90:	20000dcc 	.word	0x20000dcc
 8008f94:	20000dc8 	.word	0x20000dc8
 8008f98:	20000e30 	.word	0x20000e30

08008f9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08a      	sub	sp, #40	; 0x28
 8008fa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fa6:	f000 fba1 	bl	80096ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008faa:	4b1c      	ldr	r3, [pc, #112]	; (800901c <xTimerCreateTimerTask+0x80>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d021      	beq.n	8008ff6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fba:	1d3a      	adds	r2, r7, #4
 8008fbc:	f107 0108 	add.w	r1, r7, #8
 8008fc0:	f107 030c 	add.w	r3, r7, #12
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fd ff9d 	bl	8006f04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	9202      	str	r2, [sp, #8]
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	460a      	mov	r2, r1
 8008fdc:	4910      	ldr	r1, [pc, #64]	; (8009020 <xTimerCreateTimerTask+0x84>)
 8008fde:	4811      	ldr	r0, [pc, #68]	; (8009024 <xTimerCreateTimerTask+0x88>)
 8008fe0:	f7fe ffe0 	bl	8007fa4 <xTaskCreateStatic>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	4a10      	ldr	r2, [pc, #64]	; (8009028 <xTimerCreateTimerTask+0x8c>)
 8008fe8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <xTimerCreateTimerTask+0x8c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	613b      	str	r3, [r7, #16]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009012:	697b      	ldr	r3, [r7, #20]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000e6c 	.word	0x20000e6c
 8009020:	0800ccac 	.word	0x0800ccac
 8009024:	08009295 	.word	0x08009295
 8009028:	20000e70 	.word	0x20000e70

0800902c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af02      	add	r7, sp, #8
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800903a:	202c      	movs	r0, #44	; 0x2c
 800903c:	f000 fe04 	bl	8009c48 <pvPortMalloc>
 8009040:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00d      	beq.n	8009064 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f843 	bl	80090ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009064:	697b      	ldr	r3, [r7, #20]
	}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800906e:	b580      	push	{r7, lr}
 8009070:	b08a      	sub	sp, #40	; 0x28
 8009072:	af02      	add	r7, sp, #8
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	607a      	str	r2, [r7, #4]
 800907a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800907c:	232c      	movs	r3, #44	; 0x2c
 800907e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b2c      	cmp	r3, #44	; 0x2c
 8009084:	d00a      	beq.n	800909c <xTimerCreateStatic+0x2e>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	61bb      	str	r3, [r7, #24]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800909c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10a      	bne.n	80090ba <xTimerCreateStatic+0x4c>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	617b      	str	r3, [r7, #20]
}
 80090b6:	bf00      	nop
 80090b8:	e7fe      	b.n	80090b8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00d      	beq.n	80090e0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 f805 	bl	80090ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80090e0:	69fb      	ldr	r3, [r7, #28]
	}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3720      	adds	r7, #32
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	607a      	str	r2, [r7, #4]
 80090f6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	617b      	str	r3, [r7, #20]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01e      	beq.n	8009158 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800911a:	f000 fae7 	bl	80096ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	6a3a      	ldr	r2, [r7, #32]
 8009134:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	3304      	adds	r3, #4
 800913a:	4618      	mov	r0, r3
 800913c:	f7fd ff1c 	bl	8006f78 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d008      	beq.n	8009158 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800914c:	f043 0304 	orr.w	r3, r3, #4
 8009150:	b2da      	uxtb	r2, r3
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009158:	bf00      	nop
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800916e:	2300      	movs	r3, #0
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	623b      	str	r3, [r7, #32]
}
 800918a:	bf00      	nop
 800918c:	e7fe      	b.n	800918c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800918e:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <xTimerGenericCommand+0x98>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d02a      	beq.n	80091ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b05      	cmp	r3, #5
 80091a6:	dc18      	bgt.n	80091da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091a8:	f7ff fd1a 	bl	8008be0 <xTaskGetSchedulerState>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d109      	bne.n	80091c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091b2:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <xTimerGenericCommand+0x98>)
 80091b4:	6818      	ldr	r0, [r3, #0]
 80091b6:	f107 0110 	add.w	r1, r7, #16
 80091ba:	2300      	movs	r3, #0
 80091bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091be:	f7fe f917 	bl	80073f0 <xQueueGenericSend>
 80091c2:	6278      	str	r0, [r7, #36]	; 0x24
 80091c4:	e012      	b.n	80091ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <xTimerGenericCommand+0x98>)
 80091c8:	6818      	ldr	r0, [r3, #0]
 80091ca:	f107 0110 	add.w	r1, r7, #16
 80091ce:	2300      	movs	r3, #0
 80091d0:	2200      	movs	r2, #0
 80091d2:	f7fe f90d 	bl	80073f0 <xQueueGenericSend>
 80091d6:	6278      	str	r0, [r7, #36]	; 0x24
 80091d8:	e008      	b.n	80091ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <xTimerGenericCommand+0x98>)
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f107 0110 	add.w	r1, r7, #16
 80091e2:	2300      	movs	r3, #0
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	f7fe fa01 	bl	80075ec <xQueueGenericSendFromISR>
 80091ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3728      	adds	r7, #40	; 0x28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000e6c 	.word	0x20000e6c

080091fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009206:	4b22      	ldr	r3, [pc, #136]	; (8009290 <prvProcessExpiredTimer+0x94>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	3304      	adds	r3, #4
 8009214:	4618      	mov	r0, r3
 8009216:	f7fd ff19 	bl	800704c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d022      	beq.n	800926e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	699a      	ldr	r2, [r3, #24]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	18d1      	adds	r1, r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	6978      	ldr	r0, [r7, #20]
 8009236:	f000 f8d1 	bl	80093dc <prvInsertTimerInActiveList>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01f      	beq.n	8009280 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009240:	2300      	movs	r3, #0
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	2100      	movs	r1, #0
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	f7ff ff88 	bl	8009160 <xTimerGenericCommand>
 8009250:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d113      	bne.n	8009280 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	60fb      	str	r3, [r7, #12]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009274:	f023 0301 	bic.w	r3, r3, #1
 8009278:	b2da      	uxtb	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	6978      	ldr	r0, [r7, #20]
 8009286:	4798      	blx	r3
}
 8009288:	bf00      	nop
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000e64 	.word	0x20000e64

08009294 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800929c:	f107 0308 	add.w	r3, r7, #8
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f857 	bl	8009354 <prvGetNextExpireTime>
 80092a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	4619      	mov	r1, r3
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 f803 	bl	80092b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092b2:	f000 f8d5 	bl	8009460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092b6:	e7f1      	b.n	800929c <prvTimerTask+0x8>

080092b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092c2:	f7ff f8ab 	bl	800841c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092c6:	f107 0308 	add.w	r3, r7, #8
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f866 	bl	800939c <prvSampleTimeNow>
 80092d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d130      	bne.n	800933a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10a      	bne.n	80092f4 <prvProcessTimerOrBlockTask+0x3c>
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d806      	bhi.n	80092f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092e6:	f7ff f8a7 	bl	8008438 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092ea:	68f9      	ldr	r1, [r7, #12]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff ff85 	bl	80091fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092f2:	e024      	b.n	800933e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d008      	beq.n	800930c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <prvProcessTimerOrBlockTask+0x90>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <prvProcessTimerOrBlockTask+0x50>
 8009304:	2301      	movs	r3, #1
 8009306:	e000      	b.n	800930a <prvProcessTimerOrBlockTask+0x52>
 8009308:	2300      	movs	r3, #0
 800930a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800930c:	4b0f      	ldr	r3, [pc, #60]	; (800934c <prvProcessTimerOrBlockTask+0x94>)
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	4619      	mov	r1, r3
 800931a:	f7fe fe0f 	bl	8007f3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800931e:	f7ff f88b 	bl	8008438 <xTaskResumeAll>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009328:	4b09      	ldr	r3, [pc, #36]	; (8009350 <prvProcessTimerOrBlockTask+0x98>)
 800932a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	f3bf 8f6f 	isb	sy
}
 8009338:	e001      	b.n	800933e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800933a:	f7ff f87d 	bl	8008438 <xTaskResumeAll>
}
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000e68 	.word	0x20000e68
 800934c:	20000e6c 	.word	0x20000e6c
 8009350:	e000ed04 	.word	0xe000ed04

08009354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800935c:	4b0e      	ldr	r3, [pc, #56]	; (8009398 <prvGetNextExpireTime+0x44>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <prvGetNextExpireTime+0x16>
 8009366:	2201      	movs	r2, #1
 8009368:	e000      	b.n	800936c <prvGetNextExpireTime+0x18>
 800936a:	2200      	movs	r2, #0
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d105      	bne.n	8009384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009378:	4b07      	ldr	r3, [pc, #28]	; (8009398 <prvGetNextExpireTime+0x44>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	e001      	b.n	8009388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009388:	68fb      	ldr	r3, [r7, #12]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20000e64 	.word	0x20000e64

0800939c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093a4:	f7ff f8e6 	bl	8008574 <xTaskGetTickCount>
 80093a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093aa:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <prvSampleTimeNow+0x3c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d205      	bcs.n	80093c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093b4:	f000 f936 	bl	8009624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e002      	b.n	80093c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093c6:	4a04      	ldr	r2, [pc, #16]	; (80093d8 <prvSampleTimeNow+0x3c>)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093cc:	68fb      	ldr	r3, [r7, #12]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000e74 	.word	0x20000e74

080093dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d812      	bhi.n	8009428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	429a      	cmp	r2, r3
 800940e:	d302      	bcc.n	8009416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009410:	2301      	movs	r3, #1
 8009412:	617b      	str	r3, [r7, #20]
 8009414:	e01b      	b.n	800944e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009416:	4b10      	ldr	r3, [pc, #64]	; (8009458 <prvInsertTimerInActiveList+0x7c>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3304      	adds	r3, #4
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7fd fdda 	bl	8006fda <vListInsert>
 8009426:	e012      	b.n	800944e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d206      	bcs.n	800943e <prvInsertTimerInActiveList+0x62>
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d302      	bcc.n	800943e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	e007      	b.n	800944e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800943e:	4b07      	ldr	r3, [pc, #28]	; (800945c <prvInsertTimerInActiveList+0x80>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3304      	adds	r3, #4
 8009446:	4619      	mov	r1, r3
 8009448:	4610      	mov	r0, r2
 800944a:	f7fd fdc6 	bl	8006fda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800944e:	697b      	ldr	r3, [r7, #20]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000e68 	.word	0x20000e68
 800945c:	20000e64 	.word	0x20000e64

08009460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08e      	sub	sp, #56	; 0x38
 8009464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009466:	e0ca      	b.n	80095fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	da18      	bge.n	80094a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800946e:	1d3b      	adds	r3, r7, #4
 8009470:	3304      	adds	r3, #4
 8009472:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	61fb      	str	r3, [r7, #28]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009496:	6850      	ldr	r0, [r2, #4]
 8009498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800949a:	6892      	ldr	r2, [r2, #8]
 800949c:	4611      	mov	r1, r2
 800949e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f2c0 80aa 	blt.w	80095fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d004      	beq.n	80094be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	3304      	adds	r3, #4
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fd fdc7 	bl	800704c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094be:	463b      	mov	r3, r7
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff ff6b 	bl	800939c <prvSampleTimeNow>
 80094c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b09      	cmp	r3, #9
 80094cc:	f200 8097 	bhi.w	80095fe <prvProcessReceivedCommands+0x19e>
 80094d0:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <prvProcessReceivedCommands+0x78>)
 80094d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d6:	bf00      	nop
 80094d8:	08009501 	.word	0x08009501
 80094dc:	08009501 	.word	0x08009501
 80094e0:	08009501 	.word	0x08009501
 80094e4:	08009575 	.word	0x08009575
 80094e8:	08009589 	.word	0x08009589
 80094ec:	080095d3 	.word	0x080095d3
 80094f0:	08009501 	.word	0x08009501
 80094f4:	08009501 	.word	0x08009501
 80094f8:	08009575 	.word	0x08009575
 80094fc:	08009589 	.word	0x08009589
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009506:	f043 0301 	orr.w	r3, r3, #1
 800950a:	b2da      	uxtb	r2, r3
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	18d1      	adds	r1, r2, r3
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800951e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009520:	f7ff ff5c 	bl	80093dc <prvInsertTimerInActiveList>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d069      	beq.n	80095fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b00      	cmp	r3, #0
 800953e:	d05e      	beq.n	80095fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	441a      	add	r2, r3
 8009548:	2300      	movs	r3, #0
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	2300      	movs	r3, #0
 800954e:	2100      	movs	r1, #0
 8009550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009552:	f7ff fe05 	bl	8009160 <xTimerGenericCommand>
 8009556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d14f      	bne.n	80095fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	61bb      	str	r3, [r7, #24]
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800957a:	f023 0301 	bic.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009586:	e03a      	b.n	80095fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958e:	f043 0301 	orr.w	r3, r3, #1
 8009592:	b2da      	uxtb	r2, r3
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10a      	bne.n	80095be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	617b      	str	r3, [r7, #20]
}
 80095ba:	bf00      	nop
 80095bc:	e7fe      	b.n	80095bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	18d1      	adds	r1, r2, r3
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095cc:	f7ff ff06 	bl	80093dc <prvInsertTimerInActiveList>
					break;
 80095d0:	e015      	b.n	80095fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d103      	bne.n	80095e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e2:	f000 fbfd 	bl	8009de0 <vPortFree>
 80095e6:	e00a      	b.n	80095fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ee:	f023 0301 	bic.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095fa:	e000      	b.n	80095fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80095fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095fe:	4b08      	ldr	r3, [pc, #32]	; (8009620 <prvProcessReceivedCommands+0x1c0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	1d39      	adds	r1, r7, #4
 8009604:	2200      	movs	r2, #0
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe f88c 	bl	8007724 <xQueueReceive>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	f47f af2a 	bne.w	8009468 <prvProcessReceivedCommands+0x8>
	}
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	3730      	adds	r7, #48	; 0x30
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000e6c 	.word	0x20000e6c

08009624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800962a:	e048      	b.n	80096be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800962c:	4b2d      	ldr	r3, [pc, #180]	; (80096e4 <prvSwitchTimerLists+0xc0>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009636:	4b2b      	ldr	r3, [pc, #172]	; (80096e4 <prvSwitchTimerLists+0xc0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3304      	adds	r3, #4
 8009644:	4618      	mov	r0, r3
 8009646:	f7fd fd01 	bl	800704c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009658:	f003 0304 	and.w	r3, r3, #4
 800965c:	2b00      	cmp	r3, #0
 800965e:	d02e      	beq.n	80096be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4413      	add	r3, r2
 8009668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	429a      	cmp	r2, r3
 8009670:	d90e      	bls.n	8009690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800967e:	4b19      	ldr	r3, [pc, #100]	; (80096e4 <prvSwitchTimerLists+0xc0>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3304      	adds	r3, #4
 8009686:	4619      	mov	r1, r3
 8009688:	4610      	mov	r0, r2
 800968a:	f7fd fca6 	bl	8006fda <vListInsert>
 800968e:	e016      	b.n	80096be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009690:	2300      	movs	r3, #0
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2300      	movs	r3, #0
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	2100      	movs	r1, #0
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff fd60 	bl	8009160 <xTimerGenericCommand>
 80096a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10a      	bne.n	80096be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	603b      	str	r3, [r7, #0]
}
 80096ba:	bf00      	nop
 80096bc:	e7fe      	b.n	80096bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <prvSwitchTimerLists+0xc0>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1b1      	bne.n	800962c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096c8:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <prvSwitchTimerLists+0xc0>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <prvSwitchTimerLists+0xc4>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a04      	ldr	r2, [pc, #16]	; (80096e4 <prvSwitchTimerLists+0xc0>)
 80096d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096d6:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <prvSwitchTimerLists+0xc4>)
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	6013      	str	r3, [r2, #0]
}
 80096dc:	bf00      	nop
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000e64 	.word	0x20000e64
 80096e8:	20000e68 	.word	0x20000e68

080096ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096f2:	f000 f987 	bl	8009a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096f6:	4b15      	ldr	r3, [pc, #84]	; (800974c <prvCheckForValidListAndQueue+0x60>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d120      	bne.n	8009740 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096fe:	4814      	ldr	r0, [pc, #80]	; (8009750 <prvCheckForValidListAndQueue+0x64>)
 8009700:	f7fd fc1a 	bl	8006f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009704:	4813      	ldr	r0, [pc, #76]	; (8009754 <prvCheckForValidListAndQueue+0x68>)
 8009706:	f7fd fc17 	bl	8006f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800970a:	4b13      	ldr	r3, [pc, #76]	; (8009758 <prvCheckForValidListAndQueue+0x6c>)
 800970c:	4a10      	ldr	r2, [pc, #64]	; (8009750 <prvCheckForValidListAndQueue+0x64>)
 800970e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009710:	4b12      	ldr	r3, [pc, #72]	; (800975c <prvCheckForValidListAndQueue+0x70>)
 8009712:	4a10      	ldr	r2, [pc, #64]	; (8009754 <prvCheckForValidListAndQueue+0x68>)
 8009714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009716:	2300      	movs	r3, #0
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	4b11      	ldr	r3, [pc, #68]	; (8009760 <prvCheckForValidListAndQueue+0x74>)
 800971c:	4a11      	ldr	r2, [pc, #68]	; (8009764 <prvCheckForValidListAndQueue+0x78>)
 800971e:	2110      	movs	r1, #16
 8009720:	200a      	movs	r0, #10
 8009722:	f7fd fd25 	bl	8007170 <xQueueGenericCreateStatic>
 8009726:	4603      	mov	r3, r0
 8009728:	4a08      	ldr	r2, [pc, #32]	; (800974c <prvCheckForValidListAndQueue+0x60>)
 800972a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <prvCheckForValidListAndQueue+0x60>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d005      	beq.n	8009740 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009734:	4b05      	ldr	r3, [pc, #20]	; (800974c <prvCheckForValidListAndQueue+0x60>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	490b      	ldr	r1, [pc, #44]	; (8009768 <prvCheckForValidListAndQueue+0x7c>)
 800973a:	4618      	mov	r0, r3
 800973c:	f7fe fbaa 	bl	8007e94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009740:	f000 f990 	bl	8009a64 <vPortExitCritical>
}
 8009744:	bf00      	nop
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20000e6c 	.word	0x20000e6c
 8009750:	20000e3c 	.word	0x20000e3c
 8009754:	20000e50 	.word	0x20000e50
 8009758:	20000e64 	.word	0x20000e64
 800975c:	20000e68 	.word	0x20000e68
 8009760:	20000f18 	.word	0x20000f18
 8009764:	20000e78 	.word	0x20000e78
 8009768:	0800ccb4 	.word	0x0800ccb4

0800976c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <pvTimerGetTimerID+0x28>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60fb      	str	r3, [r7, #12]
}
 8009790:	bf00      	nop
 8009792:	e7fe      	b.n	8009792 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009794:	f000 f936 	bl	8009a04 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800979e:	f000 f961 	bl	8009a64 <vPortExitCritical>

	return pvReturn;
 80097a2:	693b      	ldr	r3, [r7, #16]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3b04      	subs	r3, #4
 80097bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3b04      	subs	r3, #4
 80097ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f023 0201 	bic.w	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3b04      	subs	r3, #4
 80097da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097dc:	4a0c      	ldr	r2, [pc, #48]	; (8009810 <pxPortInitialiseStack+0x64>)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3b14      	subs	r3, #20
 80097e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3b04      	subs	r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f06f 0202 	mvn.w	r2, #2
 80097fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3b20      	subs	r3, #32
 8009800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009802:	68fb      	ldr	r3, [r7, #12]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	08009815 	.word	0x08009815

08009814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <prvTaskExitError+0x54>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009826:	d00a      	beq.n	800983e <prvTaskExitError+0x2a>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	60fb      	str	r3, [r7, #12]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <prvTaskExitError+0x28>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	60bb      	str	r3, [r7, #8]
}
 8009850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009852:	bf00      	nop
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0fc      	beq.n	8009854 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	20000028 	.word	0x20000028
 800986c:	00000000 	.word	0x00000000

08009870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <pxCurrentTCBConst2>)
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	6808      	ldr	r0, [r1, #0]
 8009876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	f380 8809 	msr	PSP, r0
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8811 	msr	BASEPRI, r0
 800988a:	4770      	bx	lr
 800988c:	f3af 8000 	nop.w

08009890 <pxCurrentTCBConst2>:
 8009890:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop

08009898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009898:	4808      	ldr	r0, [pc, #32]	; (80098bc <prvPortStartFirstTask+0x24>)
 800989a:	6800      	ldr	r0, [r0, #0]
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	f380 8808 	msr	MSP, r0
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8814 	msr	CONTROL, r0
 80098aa:	b662      	cpsie	i
 80098ac:	b661      	cpsie	f
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	df00      	svc	0
 80098b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098ba:	bf00      	nop
 80098bc:	e000ed08 	.word	0xe000ed08

080098c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098c6:	4b46      	ldr	r3, [pc, #280]	; (80099e0 <xPortStartScheduler+0x120>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a46      	ldr	r2, [pc, #280]	; (80099e4 <xPortStartScheduler+0x124>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d10a      	bne.n	80098e6 <xPortStartScheduler+0x26>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	613b      	str	r3, [r7, #16]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098e6:	4b3e      	ldr	r3, [pc, #248]	; (80099e0 <xPortStartScheduler+0x120>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a3f      	ldr	r2, [pc, #252]	; (80099e8 <xPortStartScheduler+0x128>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d10a      	bne.n	8009906 <xPortStartScheduler+0x46>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009906:	4b39      	ldr	r3, [pc, #228]	; (80099ec <xPortStartScheduler+0x12c>)
 8009908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009928:	b2da      	uxtb	r2, r3
 800992a:	4b31      	ldr	r3, [pc, #196]	; (80099f0 <xPortStartScheduler+0x130>)
 800992c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800992e:	4b31      	ldr	r3, [pc, #196]	; (80099f4 <xPortStartScheduler+0x134>)
 8009930:	2207      	movs	r2, #7
 8009932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009934:	e009      	b.n	800994a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009936:	4b2f      	ldr	r3, [pc, #188]	; (80099f4 <xPortStartScheduler+0x134>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a2d      	ldr	r2, [pc, #180]	; (80099f4 <xPortStartScheduler+0x134>)
 800993e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	b2db      	uxtb	r3, r3
 8009948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009952:	2b80      	cmp	r3, #128	; 0x80
 8009954:	d0ef      	beq.n	8009936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009956:	4b27      	ldr	r3, [pc, #156]	; (80099f4 <xPortStartScheduler+0x134>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f1c3 0307 	rsb	r3, r3, #7
 800995e:	2b04      	cmp	r3, #4
 8009960:	d00a      	beq.n	8009978 <xPortStartScheduler+0xb8>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60bb      	str	r3, [r7, #8]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009978:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <xPortStartScheduler+0x134>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	4a1d      	ldr	r2, [pc, #116]	; (80099f4 <xPortStartScheduler+0x134>)
 8009980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009982:	4b1c      	ldr	r3, [pc, #112]	; (80099f4 <xPortStartScheduler+0x134>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800998a:	4a1a      	ldr	r2, [pc, #104]	; (80099f4 <xPortStartScheduler+0x134>)
 800998c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009996:	4b18      	ldr	r3, [pc, #96]	; (80099f8 <xPortStartScheduler+0x138>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a17      	ldr	r2, [pc, #92]	; (80099f8 <xPortStartScheduler+0x138>)
 800999c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <xPortStartScheduler+0x138>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a14      	ldr	r2, [pc, #80]	; (80099f8 <xPortStartScheduler+0x138>)
 80099a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099ae:	f000 f8dd 	bl	8009b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <xPortStartScheduler+0x13c>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099b8:	f000 f8fc 	bl	8009bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <xPortStartScheduler+0x140>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0f      	ldr	r2, [pc, #60]	; (8009a00 <xPortStartScheduler+0x140>)
 80099c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099c8:	f7ff ff66 	bl	8009898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099cc:	f7fe fe9c 	bl	8008708 <vTaskSwitchContext>
	prvTaskExitError();
 80099d0:	f7ff ff20 	bl	8009814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	e000ed00 	.word	0xe000ed00
 80099e4:	410fc271 	.word	0x410fc271
 80099e8:	410fc270 	.word	0x410fc270
 80099ec:	e000e400 	.word	0xe000e400
 80099f0:	20000f68 	.word	0x20000f68
 80099f4:	20000f6c 	.word	0x20000f6c
 80099f8:	e000ed20 	.word	0xe000ed20
 80099fc:	20000028 	.word	0x20000028
 8009a00:	e000ef34 	.word	0xe000ef34

08009a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	607b      	str	r3, [r7, #4]
}
 8009a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3301      	adds	r3, #1
 8009a24:	4a0d      	ldr	r2, [pc, #52]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a28:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <vPortEnterCritical+0x58>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d10f      	bne.n	8009a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a30:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <vPortEnterCritical+0x5c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	603b      	str	r3, [r7, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <vPortEnterCritical+0x4a>
	}
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	20000028 	.word	0x20000028
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a6a:	4b12      	ldr	r3, [pc, #72]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <vPortExitCritical+0x24>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	607b      	str	r3, [r7, #4]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a92:	4b08      	ldr	r3, [pc, #32]	; (8009ab4 <vPortExitCritical+0x50>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d105      	bne.n	8009aa6 <vPortExitCritical+0x42>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	f383 8811 	msr	BASEPRI, r3
}
 8009aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20000028 	.word	0x20000028
	...

08009ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ac0:	f3ef 8009 	mrs	r0, PSP
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <pxCurrentTCBConst>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	f01e 0f10 	tst.w	lr, #16
 8009ad0:	bf08      	it	eq
 8009ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ada:	6010      	str	r0, [r2, #0]
 8009adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ae4:	f380 8811 	msr	BASEPRI, r0
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f7fe fe0a 	bl	8008708 <vTaskSwitchContext>
 8009af4:	f04f 0000 	mov.w	r0, #0
 8009af8:	f380 8811 	msr	BASEPRI, r0
 8009afc:	bc09      	pop	{r0, r3}
 8009afe:	6819      	ldr	r1, [r3, #0]
 8009b00:	6808      	ldr	r0, [r1, #0]
 8009b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b06:	f01e 0f10 	tst.w	lr, #16
 8009b0a:	bf08      	it	eq
 8009b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b10:	f380 8809 	msr	PSP, r0
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	f3af 8000 	nop.w

08009b20 <pxCurrentTCBConst>:
 8009b20:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop

08009b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	607b      	str	r3, [r7, #4]
}
 8009b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b42:	f7fe fd27 	bl	8008594 <xTaskIncrementTick>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <xPortSysTickHandler+0x40>)
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	2300      	movs	r3, #0
 8009b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	f383 8811 	msr	BASEPRI, r3
}
 8009b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <vPortSetupTimerInterrupt+0x34>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <vPortSetupTimerInterrupt+0x38>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <vPortSetupTimerInterrupt+0x3c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a0a      	ldr	r2, [pc, #40]	; (8009bac <vPortSetupTimerInterrupt+0x40>)
 8009b82:	fba2 2303 	umull	r2, r3, r2, r3
 8009b86:	099b      	lsrs	r3, r3, #6
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <vPortSetupTimerInterrupt+0x44>)
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b8e:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <vPortSetupTimerInterrupt+0x34>)
 8009b90:	2207      	movs	r2, #7
 8009b92:	601a      	str	r2, [r3, #0]
}
 8009b94:	bf00      	nop
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	e000e010 	.word	0xe000e010
 8009ba4:	e000e018 	.word	0xe000e018
 8009ba8:	2000001c 	.word	0x2000001c
 8009bac:	10624dd3 	.word	0x10624dd3
 8009bb0:	e000e014 	.word	0xe000e014

08009bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bc4 <vPortEnableVFP+0x10>
 8009bb8:	6801      	ldr	r1, [r0, #0]
 8009bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bbe:	6001      	str	r1, [r0, #0]
 8009bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bc2:	bf00      	nop
 8009bc4:	e000ed88 	.word	0xe000ed88

08009bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b0f      	cmp	r3, #15
 8009bd8:	d914      	bls.n	8009c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bda:	4a17      	ldr	r2, [pc, #92]	; (8009c38 <vPortValidateInterruptPriority+0x70>)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <vPortValidateInterruptPriority+0x74>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	7afa      	ldrb	r2, [r7, #11]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d20a      	bcs.n	8009c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	607b      	str	r3, [r7, #4]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c04:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <vPortValidateInterruptPriority+0x78>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <vPortValidateInterruptPriority+0x7c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d90a      	bls.n	8009c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	603b      	str	r3, [r7, #0]
}
 8009c26:	bf00      	nop
 8009c28:	e7fe      	b.n	8009c28 <vPortValidateInterruptPriority+0x60>
	}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	e000e3f0 	.word	0xe000e3f0
 8009c3c:	20000f68 	.word	0x20000f68
 8009c40:	e000ed0c 	.word	0xe000ed0c
 8009c44:	20000f6c 	.word	0x20000f6c

08009c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c54:	f7fe fbe2 	bl	800841c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c58:	4b5b      	ldr	r3, [pc, #364]	; (8009dc8 <pvPortMalloc+0x180>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c60:	f000 f920 	bl	8009ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c64:	4b59      	ldr	r3, [pc, #356]	; (8009dcc <pvPortMalloc+0x184>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 8093 	bne.w	8009d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01d      	beq.n	8009cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c78:	2208      	movs	r2, #8
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d014      	beq.n	8009cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f023 0307 	bic.w	r3, r3, #7
 8009c90:	3308      	adds	r3, #8
 8009c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	617b      	str	r3, [r7, #20]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d06e      	beq.n	8009d98 <pvPortMalloc+0x150>
 8009cba:	4b45      	ldr	r3, [pc, #276]	; (8009dd0 <pvPortMalloc+0x188>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d869      	bhi.n	8009d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cc4:	4b43      	ldr	r3, [pc, #268]	; (8009dd4 <pvPortMalloc+0x18c>)
 8009cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cc8:	4b42      	ldr	r3, [pc, #264]	; (8009dd4 <pvPortMalloc+0x18c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cce:	e004      	b.n	8009cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d903      	bls.n	8009cec <pvPortMalloc+0xa4>
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f1      	bne.n	8009cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cec:	4b36      	ldr	r3, [pc, #216]	; (8009dc8 <pvPortMalloc+0x180>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d050      	beq.n	8009d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2208      	movs	r2, #8
 8009cfc:	4413      	add	r3, r2
 8009cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	1ad2      	subs	r2, r2, r3
 8009d10:	2308      	movs	r3, #8
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d91f      	bls.n	8009d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <pvPortMalloc+0xf8>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	613b      	str	r3, [r7, #16]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d52:	69b8      	ldr	r0, [r7, #24]
 8009d54:	f000 f908 	bl	8009f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	4a1b      	ldr	r2, [pc, #108]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d66:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <pvPortMalloc+0x190>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d203      	bcs.n	8009d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d72:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <pvPortMalloc+0x188>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a18      	ldr	r2, [pc, #96]	; (8009dd8 <pvPortMalloc+0x190>)
 8009d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <pvPortMalloc+0x184>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <pvPortMalloc+0x194>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a11      	ldr	r2, [pc, #68]	; (8009ddc <pvPortMalloc+0x194>)
 8009d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d98:	f7fe fb4e 	bl	8008438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <pvPortMalloc+0x174>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	60fb      	str	r3, [r7, #12]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <pvPortMalloc+0x172>
	return pvReturn;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3728      	adds	r7, #40	; 0x28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20004b78 	.word	0x20004b78
 8009dcc:	20004b8c 	.word	0x20004b8c
 8009dd0:	20004b7c 	.word	0x20004b7c
 8009dd4:	20004b70 	.word	0x20004b70
 8009dd8:	20004b80 	.word	0x20004b80
 8009ddc:	20004b84 	.word	0x20004b84

08009de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d04d      	beq.n	8009e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009df2:	2308      	movs	r3, #8
 8009df4:	425b      	negs	r3, r3
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	4413      	add	r3, r2
 8009dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	4b24      	ldr	r3, [pc, #144]	; (8009e98 <vPortFree+0xb8>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <vPortFree+0x44>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	60fb      	str	r3, [r7, #12]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <vPortFree+0x62>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	60bb      	str	r3, [r7, #8]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <vPortFree+0xb8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01e      	beq.n	8009e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d11a      	bne.n	8009e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <vPortFree+0xb8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	401a      	ands	r2, r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e68:	f7fe fad8 	bl	800841c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <vPortFree+0xbc>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	4a09      	ldr	r2, [pc, #36]	; (8009e9c <vPortFree+0xbc>)
 8009e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f000 f874 	bl	8009f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <vPortFree+0xc0>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	4a06      	ldr	r2, [pc, #24]	; (8009ea0 <vPortFree+0xc0>)
 8009e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e8a:	f7fe fad5 	bl	8008438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e8e:	bf00      	nop
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20004b8c 	.word	0x20004b8c
 8009e9c:	20004b7c 	.word	0x20004b7c
 8009ea0:	20004b88 	.word	0x20004b88

08009ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009eb0:	4b27      	ldr	r3, [pc, #156]	; (8009f50 <prvHeapInit+0xac>)
 8009eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00c      	beq.n	8009ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3307      	adds	r3, #7
 8009ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0307 	bic.w	r3, r3, #7
 8009eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	4a1f      	ldr	r2, [pc, #124]	; (8009f50 <prvHeapInit+0xac>)
 8009ed4:	4413      	add	r3, r2
 8009ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009edc:	4a1d      	ldr	r2, [pc, #116]	; (8009f54 <prvHeapInit+0xb0>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <prvHeapInit+0xb0>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ef0:	2208      	movs	r2, #8
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a15      	ldr	r2, [pc, #84]	; (8009f58 <prvHeapInit+0xb4>)
 8009f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <prvHeapInit+0xb4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f0e:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <prvHeapInit+0xb4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f24:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <prvHeapInit+0xb4>)
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <prvHeapInit+0xb8>)
 8009f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <prvHeapInit+0xbc>)
 8009f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <prvHeapInit+0xc0>)
 8009f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f42:	601a      	str	r2, [r3, #0]
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	20000f70 	.word	0x20000f70
 8009f54:	20004b70 	.word	0x20004b70
 8009f58:	20004b78 	.word	0x20004b78
 8009f5c:	20004b80 	.word	0x20004b80
 8009f60:	20004b7c 	.word	0x20004b7c
 8009f64:	20004b8c 	.word	0x20004b8c

08009f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f70:	4b28      	ldr	r3, [pc, #160]	; (800a014 <prvInsertBlockIntoFreeList+0xac>)
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e002      	b.n	8009f7c <prvInsertBlockIntoFreeList+0x14>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d8f7      	bhi.n	8009f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4413      	add	r3, r2
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d108      	bne.n	8009faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d118      	bne.n	8009ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d00d      	beq.n	8009fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	e008      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fe6:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	e003      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d002      	beq.n	800a006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	20004b70 	.word	0x20004b70
 800a018:	20004b78 	.word	0x20004b78

0800a01c <__errno>:
 800a01c:	4b01      	ldr	r3, [pc, #4]	; (800a024 <__errno+0x8>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	2000002c 	.word	0x2000002c

0800a028 <__libc_init_array>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	4d0d      	ldr	r5, [pc, #52]	; (800a060 <__libc_init_array+0x38>)
 800a02c:	4c0d      	ldr	r4, [pc, #52]	; (800a064 <__libc_init_array+0x3c>)
 800a02e:	1b64      	subs	r4, r4, r5
 800a030:	10a4      	asrs	r4, r4, #2
 800a032:	2600      	movs	r6, #0
 800a034:	42a6      	cmp	r6, r4
 800a036:	d109      	bne.n	800a04c <__libc_init_array+0x24>
 800a038:	4d0b      	ldr	r5, [pc, #44]	; (800a068 <__libc_init_array+0x40>)
 800a03a:	4c0c      	ldr	r4, [pc, #48]	; (800a06c <__libc_init_array+0x44>)
 800a03c:	f002 fcf0 	bl	800ca20 <_init>
 800a040:	1b64      	subs	r4, r4, r5
 800a042:	10a4      	asrs	r4, r4, #2
 800a044:	2600      	movs	r6, #0
 800a046:	42a6      	cmp	r6, r4
 800a048:	d105      	bne.n	800a056 <__libc_init_array+0x2e>
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a050:	4798      	blx	r3
 800a052:	3601      	adds	r6, #1
 800a054:	e7ee      	b.n	800a034 <__libc_init_array+0xc>
 800a056:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05a:	4798      	blx	r3
 800a05c:	3601      	adds	r6, #1
 800a05e:	e7f2      	b.n	800a046 <__libc_init_array+0x1e>
 800a060:	0800d234 	.word	0x0800d234
 800a064:	0800d234 	.word	0x0800d234
 800a068:	0800d234 	.word	0x0800d234
 800a06c:	0800d238 	.word	0x0800d238

0800a070 <memcpy>:
 800a070:	440a      	add	r2, r1
 800a072:	4291      	cmp	r1, r2
 800a074:	f100 33ff 	add.w	r3, r0, #4294967295
 800a078:	d100      	bne.n	800a07c <memcpy+0xc>
 800a07a:	4770      	bx	lr
 800a07c:	b510      	push	{r4, lr}
 800a07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a082:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a086:	4291      	cmp	r1, r2
 800a088:	d1f9      	bne.n	800a07e <memcpy+0xe>
 800a08a:	bd10      	pop	{r4, pc}

0800a08c <memset>:
 800a08c:	4402      	add	r2, r0
 800a08e:	4603      	mov	r3, r0
 800a090:	4293      	cmp	r3, r2
 800a092:	d100      	bne.n	800a096 <memset+0xa>
 800a094:	4770      	bx	lr
 800a096:	f803 1b01 	strb.w	r1, [r3], #1
 800a09a:	e7f9      	b.n	800a090 <memset+0x4>

0800a09c <__cvt>:
 800a09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	ec55 4b10 	vmov	r4, r5, d0
 800a0a4:	2d00      	cmp	r5, #0
 800a0a6:	460e      	mov	r6, r1
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	bfbb      	ittet	lt
 800a0ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0b2:	461d      	movlt	r5, r3
 800a0b4:	2300      	movge	r3, #0
 800a0b6:	232d      	movlt	r3, #45	; 0x2d
 800a0b8:	700b      	strb	r3, [r1, #0]
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a0c0:	4691      	mov	r9, r2
 800a0c2:	f023 0820 	bic.w	r8, r3, #32
 800a0c6:	bfbc      	itt	lt
 800a0c8:	4622      	movlt	r2, r4
 800a0ca:	4614      	movlt	r4, r2
 800a0cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0d0:	d005      	beq.n	800a0de <__cvt+0x42>
 800a0d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0d6:	d100      	bne.n	800a0da <__cvt+0x3e>
 800a0d8:	3601      	adds	r6, #1
 800a0da:	2102      	movs	r1, #2
 800a0dc:	e000      	b.n	800a0e0 <__cvt+0x44>
 800a0de:	2103      	movs	r1, #3
 800a0e0:	ab03      	add	r3, sp, #12
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	ab02      	add	r3, sp, #8
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	ec45 4b10 	vmov	d0, r4, r5
 800a0ec:	4653      	mov	r3, sl
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	f000 fcca 	bl	800aa88 <_dtoa_r>
 800a0f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	d102      	bne.n	800a102 <__cvt+0x66>
 800a0fc:	f019 0f01 	tst.w	r9, #1
 800a100:	d022      	beq.n	800a148 <__cvt+0xac>
 800a102:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a106:	eb07 0906 	add.w	r9, r7, r6
 800a10a:	d110      	bne.n	800a12e <__cvt+0x92>
 800a10c:	783b      	ldrb	r3, [r7, #0]
 800a10e:	2b30      	cmp	r3, #48	; 0x30
 800a110:	d10a      	bne.n	800a128 <__cvt+0x8c>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a11e:	b918      	cbnz	r0, 800a128 <__cvt+0x8c>
 800a120:	f1c6 0601 	rsb	r6, r6, #1
 800a124:	f8ca 6000 	str.w	r6, [sl]
 800a128:	f8da 3000 	ldr.w	r3, [sl]
 800a12c:	4499      	add	r9, r3
 800a12e:	2200      	movs	r2, #0
 800a130:	2300      	movs	r3, #0
 800a132:	4620      	mov	r0, r4
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a13a:	b108      	cbz	r0, 800a140 <__cvt+0xa4>
 800a13c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a140:	2230      	movs	r2, #48	; 0x30
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	454b      	cmp	r3, r9
 800a146:	d307      	bcc.n	800a158 <__cvt+0xbc>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a14c:	1bdb      	subs	r3, r3, r7
 800a14e:	4638      	mov	r0, r7
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	b004      	add	sp, #16
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	1c59      	adds	r1, r3, #1
 800a15a:	9103      	str	r1, [sp, #12]
 800a15c:	701a      	strb	r2, [r3, #0]
 800a15e:	e7f0      	b.n	800a142 <__cvt+0xa6>

0800a160 <__exponent>:
 800a160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a162:	4603      	mov	r3, r0
 800a164:	2900      	cmp	r1, #0
 800a166:	bfb8      	it	lt
 800a168:	4249      	neglt	r1, r1
 800a16a:	f803 2b02 	strb.w	r2, [r3], #2
 800a16e:	bfb4      	ite	lt
 800a170:	222d      	movlt	r2, #45	; 0x2d
 800a172:	222b      	movge	r2, #43	; 0x2b
 800a174:	2909      	cmp	r1, #9
 800a176:	7042      	strb	r2, [r0, #1]
 800a178:	dd2a      	ble.n	800a1d0 <__exponent+0x70>
 800a17a:	f10d 0407 	add.w	r4, sp, #7
 800a17e:	46a4      	mov	ip, r4
 800a180:	270a      	movs	r7, #10
 800a182:	46a6      	mov	lr, r4
 800a184:	460a      	mov	r2, r1
 800a186:	fb91 f6f7 	sdiv	r6, r1, r7
 800a18a:	fb07 1516 	mls	r5, r7, r6, r1
 800a18e:	3530      	adds	r5, #48	; 0x30
 800a190:	2a63      	cmp	r2, #99	; 0x63
 800a192:	f104 34ff 	add.w	r4, r4, #4294967295
 800a196:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a19a:	4631      	mov	r1, r6
 800a19c:	dcf1      	bgt.n	800a182 <__exponent+0x22>
 800a19e:	3130      	adds	r1, #48	; 0x30
 800a1a0:	f1ae 0502 	sub.w	r5, lr, #2
 800a1a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a1a8:	1c44      	adds	r4, r0, #1
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4561      	cmp	r1, ip
 800a1ae:	d30a      	bcc.n	800a1c6 <__exponent+0x66>
 800a1b0:	f10d 0209 	add.w	r2, sp, #9
 800a1b4:	eba2 020e 	sub.w	r2, r2, lr
 800a1b8:	4565      	cmp	r5, ip
 800a1ba:	bf88      	it	hi
 800a1bc:	2200      	movhi	r2, #0
 800a1be:	4413      	add	r3, r2
 800a1c0:	1a18      	subs	r0, r3, r0
 800a1c2:	b003      	add	sp, #12
 800a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a1ce:	e7ed      	b.n	800a1ac <__exponent+0x4c>
 800a1d0:	2330      	movs	r3, #48	; 0x30
 800a1d2:	3130      	adds	r1, #48	; 0x30
 800a1d4:	7083      	strb	r3, [r0, #2]
 800a1d6:	70c1      	strb	r1, [r0, #3]
 800a1d8:	1d03      	adds	r3, r0, #4
 800a1da:	e7f1      	b.n	800a1c0 <__exponent+0x60>

0800a1dc <_printf_float>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	ed2d 8b02 	vpush	{d8}
 800a1e4:	b08d      	sub	sp, #52	; 0x34
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	f001 fa35 	bl	800b660 <_localeconv_r>
 800a1f6:	f8d0 a000 	ldr.w	sl, [r0]
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	f7f5 fff0 	bl	80001e0 <strlen>
 800a200:	2300      	movs	r3, #0
 800a202:	930a      	str	r3, [sp, #40]	; 0x28
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	f8d8 3000 	ldr.w	r3, [r8]
 800a20c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a210:	3307      	adds	r3, #7
 800a212:	f023 0307 	bic.w	r3, r3, #7
 800a216:	f103 0208 	add.w	r2, r3, #8
 800a21a:	f8c8 2000 	str.w	r2, [r8]
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a226:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a22a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	f8cd 8018 	str.w	r8, [sp, #24]
 800a234:	ee08 0a10 	vmov	s16, r0
 800a238:	4b9f      	ldr	r3, [pc, #636]	; (800a4b8 <_printf_float+0x2dc>)
 800a23a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a23e:	f04f 32ff 	mov.w	r2, #4294967295
 800a242:	f7f6 fc7b 	bl	8000b3c <__aeabi_dcmpun>
 800a246:	bb88      	cbnz	r0, 800a2ac <_printf_float+0xd0>
 800a248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a24c:	4b9a      	ldr	r3, [pc, #616]	; (800a4b8 <_printf_float+0x2dc>)
 800a24e:	f04f 32ff 	mov.w	r2, #4294967295
 800a252:	f7f6 fc55 	bl	8000b00 <__aeabi_dcmple>
 800a256:	bb48      	cbnz	r0, 800a2ac <_printf_float+0xd0>
 800a258:	2200      	movs	r2, #0
 800a25a:	2300      	movs	r3, #0
 800a25c:	4640      	mov	r0, r8
 800a25e:	4649      	mov	r1, r9
 800a260:	f7f6 fc44 	bl	8000aec <__aeabi_dcmplt>
 800a264:	b110      	cbz	r0, 800a26c <_printf_float+0x90>
 800a266:	232d      	movs	r3, #45	; 0x2d
 800a268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a26c:	4b93      	ldr	r3, [pc, #588]	; (800a4bc <_printf_float+0x2e0>)
 800a26e:	4894      	ldr	r0, [pc, #592]	; (800a4c0 <_printf_float+0x2e4>)
 800a270:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a274:	bf94      	ite	ls
 800a276:	4698      	movls	r8, r3
 800a278:	4680      	movhi	r8, r0
 800a27a:	2303      	movs	r3, #3
 800a27c:	6123      	str	r3, [r4, #16]
 800a27e:	9b05      	ldr	r3, [sp, #20]
 800a280:	f023 0204 	bic.w	r2, r3, #4
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	f04f 0900 	mov.w	r9, #0
 800a28a:	9700      	str	r7, [sp, #0]
 800a28c:	4633      	mov	r3, r6
 800a28e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a290:	4621      	mov	r1, r4
 800a292:	4628      	mov	r0, r5
 800a294:	f000 f9d8 	bl	800a648 <_printf_common>
 800a298:	3001      	adds	r0, #1
 800a29a:	f040 8090 	bne.w	800a3be <_printf_float+0x1e2>
 800a29e:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a2:	b00d      	add	sp, #52	; 0x34
 800a2a4:	ecbd 8b02 	vpop	{d8}
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	4642      	mov	r2, r8
 800a2ae:	464b      	mov	r3, r9
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	f7f6 fc42 	bl	8000b3c <__aeabi_dcmpun>
 800a2b8:	b140      	cbz	r0, 800a2cc <_printf_float+0xf0>
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bfbc      	itt	lt
 800a2c0:	232d      	movlt	r3, #45	; 0x2d
 800a2c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a2c6:	487f      	ldr	r0, [pc, #508]	; (800a4c4 <_printf_float+0x2e8>)
 800a2c8:	4b7f      	ldr	r3, [pc, #508]	; (800a4c8 <_printf_float+0x2ec>)
 800a2ca:	e7d1      	b.n	800a270 <_printf_float+0x94>
 800a2cc:	6863      	ldr	r3, [r4, #4]
 800a2ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a2d2:	9206      	str	r2, [sp, #24]
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	d13f      	bne.n	800a358 <_printf_float+0x17c>
 800a2d8:	2306      	movs	r3, #6
 800a2da:	6063      	str	r3, [r4, #4]
 800a2dc:	9b05      	ldr	r3, [sp, #20]
 800a2de:	6861      	ldr	r1, [r4, #4]
 800a2e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	ab0a      	add	r3, sp, #40	; 0x28
 800a2ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2ee:	ab09      	add	r3, sp, #36	; 0x24
 800a2f0:	ec49 8b10 	vmov	d0, r8, r9
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	6022      	str	r2, [r4, #0]
 800a2f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f7ff fecd 	bl	800a09c <__cvt>
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a306:	2b47      	cmp	r3, #71	; 0x47
 800a308:	4680      	mov	r8, r0
 800a30a:	d108      	bne.n	800a31e <_printf_float+0x142>
 800a30c:	1cc8      	adds	r0, r1, #3
 800a30e:	db02      	blt.n	800a316 <_printf_float+0x13a>
 800a310:	6863      	ldr	r3, [r4, #4]
 800a312:	4299      	cmp	r1, r3
 800a314:	dd41      	ble.n	800a39a <_printf_float+0x1be>
 800a316:	f1ab 0b02 	sub.w	fp, fp, #2
 800a31a:	fa5f fb8b 	uxtb.w	fp, fp
 800a31e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a322:	d820      	bhi.n	800a366 <_printf_float+0x18a>
 800a324:	3901      	subs	r1, #1
 800a326:	465a      	mov	r2, fp
 800a328:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a32c:	9109      	str	r1, [sp, #36]	; 0x24
 800a32e:	f7ff ff17 	bl	800a160 <__exponent>
 800a332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a334:	1813      	adds	r3, r2, r0
 800a336:	2a01      	cmp	r2, #1
 800a338:	4681      	mov	r9, r0
 800a33a:	6123      	str	r3, [r4, #16]
 800a33c:	dc02      	bgt.n	800a344 <_printf_float+0x168>
 800a33e:	6822      	ldr	r2, [r4, #0]
 800a340:	07d2      	lsls	r2, r2, #31
 800a342:	d501      	bpl.n	800a348 <_printf_float+0x16c>
 800a344:	3301      	adds	r3, #1
 800a346:	6123      	str	r3, [r4, #16]
 800a348:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d09c      	beq.n	800a28a <_printf_float+0xae>
 800a350:	232d      	movs	r3, #45	; 0x2d
 800a352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a356:	e798      	b.n	800a28a <_printf_float+0xae>
 800a358:	9a06      	ldr	r2, [sp, #24]
 800a35a:	2a47      	cmp	r2, #71	; 0x47
 800a35c:	d1be      	bne.n	800a2dc <_printf_float+0x100>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1bc      	bne.n	800a2dc <_printf_float+0x100>
 800a362:	2301      	movs	r3, #1
 800a364:	e7b9      	b.n	800a2da <_printf_float+0xfe>
 800a366:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a36a:	d118      	bne.n	800a39e <_printf_float+0x1c2>
 800a36c:	2900      	cmp	r1, #0
 800a36e:	6863      	ldr	r3, [r4, #4]
 800a370:	dd0b      	ble.n	800a38a <_printf_float+0x1ae>
 800a372:	6121      	str	r1, [r4, #16]
 800a374:	b913      	cbnz	r3, 800a37c <_printf_float+0x1a0>
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	07d0      	lsls	r0, r2, #31
 800a37a:	d502      	bpl.n	800a382 <_printf_float+0x1a6>
 800a37c:	3301      	adds	r3, #1
 800a37e:	440b      	add	r3, r1
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	65a1      	str	r1, [r4, #88]	; 0x58
 800a384:	f04f 0900 	mov.w	r9, #0
 800a388:	e7de      	b.n	800a348 <_printf_float+0x16c>
 800a38a:	b913      	cbnz	r3, 800a392 <_printf_float+0x1b6>
 800a38c:	6822      	ldr	r2, [r4, #0]
 800a38e:	07d2      	lsls	r2, r2, #31
 800a390:	d501      	bpl.n	800a396 <_printf_float+0x1ba>
 800a392:	3302      	adds	r3, #2
 800a394:	e7f4      	b.n	800a380 <_printf_float+0x1a4>
 800a396:	2301      	movs	r3, #1
 800a398:	e7f2      	b.n	800a380 <_printf_float+0x1a4>
 800a39a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	db05      	blt.n	800a3b0 <_printf_float+0x1d4>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	6121      	str	r1, [r4, #16]
 800a3a8:	07d8      	lsls	r0, r3, #31
 800a3aa:	d5ea      	bpl.n	800a382 <_printf_float+0x1a6>
 800a3ac:	1c4b      	adds	r3, r1, #1
 800a3ae:	e7e7      	b.n	800a380 <_printf_float+0x1a4>
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	bfd4      	ite	le
 800a3b4:	f1c1 0202 	rsble	r2, r1, #2
 800a3b8:	2201      	movgt	r2, #1
 800a3ba:	4413      	add	r3, r2
 800a3bc:	e7e0      	b.n	800a380 <_printf_float+0x1a4>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	055a      	lsls	r2, r3, #21
 800a3c2:	d407      	bmi.n	800a3d4 <_printf_float+0x1f8>
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b8      	blx	r7
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d12c      	bne.n	800a42c <_printf_float+0x250>
 800a3d2:	e764      	b.n	800a29e <_printf_float+0xc2>
 800a3d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3d8:	f240 80e0 	bls.w	800a59c <_printf_float+0x3c0>
 800a3dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f7f6 fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d034      	beq.n	800a456 <_printf_float+0x27a>
 800a3ec:	4a37      	ldr	r2, [pc, #220]	; (800a4cc <_printf_float+0x2f0>)
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	47b8      	blx	r7
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	f43f af51 	beq.w	800a29e <_printf_float+0xc2>
 800a3fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a400:	429a      	cmp	r2, r3
 800a402:	db02      	blt.n	800a40a <_printf_float+0x22e>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	07d8      	lsls	r0, r3, #31
 800a408:	d510      	bpl.n	800a42c <_printf_float+0x250>
 800a40a:	ee18 3a10 	vmov	r3, s16
 800a40e:	4652      	mov	r2, sl
 800a410:	4631      	mov	r1, r6
 800a412:	4628      	mov	r0, r5
 800a414:	47b8      	blx	r7
 800a416:	3001      	adds	r0, #1
 800a418:	f43f af41 	beq.w	800a29e <_printf_float+0xc2>
 800a41c:	f04f 0800 	mov.w	r8, #0
 800a420:	f104 091a 	add.w	r9, r4, #26
 800a424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a426:	3b01      	subs	r3, #1
 800a428:	4543      	cmp	r3, r8
 800a42a:	dc09      	bgt.n	800a440 <_printf_float+0x264>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	079b      	lsls	r3, r3, #30
 800a430:	f100 8105 	bmi.w	800a63e <_printf_float+0x462>
 800a434:	68e0      	ldr	r0, [r4, #12]
 800a436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a438:	4298      	cmp	r0, r3
 800a43a:	bfb8      	it	lt
 800a43c:	4618      	movlt	r0, r3
 800a43e:	e730      	b.n	800a2a2 <_printf_float+0xc6>
 800a440:	2301      	movs	r3, #1
 800a442:	464a      	mov	r2, r9
 800a444:	4631      	mov	r1, r6
 800a446:	4628      	mov	r0, r5
 800a448:	47b8      	blx	r7
 800a44a:	3001      	adds	r0, #1
 800a44c:	f43f af27 	beq.w	800a29e <_printf_float+0xc2>
 800a450:	f108 0801 	add.w	r8, r8, #1
 800a454:	e7e6      	b.n	800a424 <_printf_float+0x248>
 800a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dc39      	bgt.n	800a4d0 <_printf_float+0x2f4>
 800a45c:	4a1b      	ldr	r2, [pc, #108]	; (800a4cc <_printf_float+0x2f0>)
 800a45e:	2301      	movs	r3, #1
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af19 	beq.w	800a29e <_printf_float+0xc2>
 800a46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a470:	4313      	orrs	r3, r2
 800a472:	d102      	bne.n	800a47a <_printf_float+0x29e>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07d9      	lsls	r1, r3, #31
 800a478:	d5d8      	bpl.n	800a42c <_printf_float+0x250>
 800a47a:	ee18 3a10 	vmov	r3, s16
 800a47e:	4652      	mov	r2, sl
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af09 	beq.w	800a29e <_printf_float+0xc2>
 800a48c:	f04f 0900 	mov.w	r9, #0
 800a490:	f104 0a1a 	add.w	sl, r4, #26
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	425b      	negs	r3, r3
 800a498:	454b      	cmp	r3, r9
 800a49a:	dc01      	bgt.n	800a4a0 <_printf_float+0x2c4>
 800a49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49e:	e792      	b.n	800a3c6 <_printf_float+0x1ea>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	4652      	mov	r2, sl
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	f43f aef7 	beq.w	800a29e <_printf_float+0xc2>
 800a4b0:	f109 0901 	add.w	r9, r9, #1
 800a4b4:	e7ee      	b.n	800a494 <_printf_float+0x2b8>
 800a4b6:	bf00      	nop
 800a4b8:	7fefffff 	.word	0x7fefffff
 800a4bc:	0800ce4c 	.word	0x0800ce4c
 800a4c0:	0800ce50 	.word	0x0800ce50
 800a4c4:	0800ce58 	.word	0x0800ce58
 800a4c8:	0800ce54 	.word	0x0800ce54
 800a4cc:	0800ce5c 	.word	0x0800ce5c
 800a4d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	bfa8      	it	ge
 800a4d8:	461a      	movge	r2, r3
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	4691      	mov	r9, r2
 800a4de:	dc37      	bgt.n	800a550 <_printf_float+0x374>
 800a4e0:	f04f 0b00 	mov.w	fp, #0
 800a4e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4e8:	f104 021a 	add.w	r2, r4, #26
 800a4ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	eba3 0309 	sub.w	r3, r3, r9
 800a4f4:	455b      	cmp	r3, fp
 800a4f6:	dc33      	bgt.n	800a560 <_printf_float+0x384>
 800a4f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	db3b      	blt.n	800a578 <_printf_float+0x39c>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	07da      	lsls	r2, r3, #31
 800a504:	d438      	bmi.n	800a578 <_printf_float+0x39c>
 800a506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a508:	9b05      	ldr	r3, [sp, #20]
 800a50a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	eba2 0901 	sub.w	r9, r2, r1
 800a512:	4599      	cmp	r9, r3
 800a514:	bfa8      	it	ge
 800a516:	4699      	movge	r9, r3
 800a518:	f1b9 0f00 	cmp.w	r9, #0
 800a51c:	dc35      	bgt.n	800a58a <_printf_float+0x3ae>
 800a51e:	f04f 0800 	mov.w	r8, #0
 800a522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a526:	f104 0a1a 	add.w	sl, r4, #26
 800a52a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	eba3 0309 	sub.w	r3, r3, r9
 800a534:	4543      	cmp	r3, r8
 800a536:	f77f af79 	ble.w	800a42c <_printf_float+0x250>
 800a53a:	2301      	movs	r3, #1
 800a53c:	4652      	mov	r2, sl
 800a53e:	4631      	mov	r1, r6
 800a540:	4628      	mov	r0, r5
 800a542:	47b8      	blx	r7
 800a544:	3001      	adds	r0, #1
 800a546:	f43f aeaa 	beq.w	800a29e <_printf_float+0xc2>
 800a54a:	f108 0801 	add.w	r8, r8, #1
 800a54e:	e7ec      	b.n	800a52a <_printf_float+0x34e>
 800a550:	4613      	mov	r3, r2
 800a552:	4631      	mov	r1, r6
 800a554:	4642      	mov	r2, r8
 800a556:	4628      	mov	r0, r5
 800a558:	47b8      	blx	r7
 800a55a:	3001      	adds	r0, #1
 800a55c:	d1c0      	bne.n	800a4e0 <_printf_float+0x304>
 800a55e:	e69e      	b.n	800a29e <_printf_float+0xc2>
 800a560:	2301      	movs	r3, #1
 800a562:	4631      	mov	r1, r6
 800a564:	4628      	mov	r0, r5
 800a566:	9205      	str	r2, [sp, #20]
 800a568:	47b8      	blx	r7
 800a56a:	3001      	adds	r0, #1
 800a56c:	f43f ae97 	beq.w	800a29e <_printf_float+0xc2>
 800a570:	9a05      	ldr	r2, [sp, #20]
 800a572:	f10b 0b01 	add.w	fp, fp, #1
 800a576:	e7b9      	b.n	800a4ec <_printf_float+0x310>
 800a578:	ee18 3a10 	vmov	r3, s16
 800a57c:	4652      	mov	r2, sl
 800a57e:	4631      	mov	r1, r6
 800a580:	4628      	mov	r0, r5
 800a582:	47b8      	blx	r7
 800a584:	3001      	adds	r0, #1
 800a586:	d1be      	bne.n	800a506 <_printf_float+0x32a>
 800a588:	e689      	b.n	800a29e <_printf_float+0xc2>
 800a58a:	9a05      	ldr	r2, [sp, #20]
 800a58c:	464b      	mov	r3, r9
 800a58e:	4442      	add	r2, r8
 800a590:	4631      	mov	r1, r6
 800a592:	4628      	mov	r0, r5
 800a594:	47b8      	blx	r7
 800a596:	3001      	adds	r0, #1
 800a598:	d1c1      	bne.n	800a51e <_printf_float+0x342>
 800a59a:	e680      	b.n	800a29e <_printf_float+0xc2>
 800a59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a59e:	2a01      	cmp	r2, #1
 800a5a0:	dc01      	bgt.n	800a5a6 <_printf_float+0x3ca>
 800a5a2:	07db      	lsls	r3, r3, #31
 800a5a4:	d538      	bpl.n	800a618 <_printf_float+0x43c>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b8      	blx	r7
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f43f ae74 	beq.w	800a29e <_printf_float+0xc2>
 800a5b6:	ee18 3a10 	vmov	r3, s16
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f ae6b 	beq.w	800a29e <_printf_float+0xc2>
 800a5c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f7f6 fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5d4:	b9d8      	cbnz	r0, 800a60e <_printf_float+0x432>
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d8:	f108 0201 	add.w	r2, r8, #1
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	4631      	mov	r1, r6
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b8      	blx	r7
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d10e      	bne.n	800a606 <_printf_float+0x42a>
 800a5e8:	e659      	b.n	800a29e <_printf_float+0xc2>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	f43f ae52 	beq.w	800a29e <_printf_float+0xc2>
 800a5fa:	f108 0801 	add.w	r8, r8, #1
 800a5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a600:	3b01      	subs	r3, #1
 800a602:	4543      	cmp	r3, r8
 800a604:	dcf1      	bgt.n	800a5ea <_printf_float+0x40e>
 800a606:	464b      	mov	r3, r9
 800a608:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a60c:	e6dc      	b.n	800a3c8 <_printf_float+0x1ec>
 800a60e:	f04f 0800 	mov.w	r8, #0
 800a612:	f104 0a1a 	add.w	sl, r4, #26
 800a616:	e7f2      	b.n	800a5fe <_printf_float+0x422>
 800a618:	2301      	movs	r3, #1
 800a61a:	4642      	mov	r2, r8
 800a61c:	e7df      	b.n	800a5de <_printf_float+0x402>
 800a61e:	2301      	movs	r3, #1
 800a620:	464a      	mov	r2, r9
 800a622:	4631      	mov	r1, r6
 800a624:	4628      	mov	r0, r5
 800a626:	47b8      	blx	r7
 800a628:	3001      	adds	r0, #1
 800a62a:	f43f ae38 	beq.w	800a29e <_printf_float+0xc2>
 800a62e:	f108 0801 	add.w	r8, r8, #1
 800a632:	68e3      	ldr	r3, [r4, #12]
 800a634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a636:	1a5b      	subs	r3, r3, r1
 800a638:	4543      	cmp	r3, r8
 800a63a:	dcf0      	bgt.n	800a61e <_printf_float+0x442>
 800a63c:	e6fa      	b.n	800a434 <_printf_float+0x258>
 800a63e:	f04f 0800 	mov.w	r8, #0
 800a642:	f104 0919 	add.w	r9, r4, #25
 800a646:	e7f4      	b.n	800a632 <_printf_float+0x456>

0800a648 <_printf_common>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	4616      	mov	r6, r2
 800a64e:	4699      	mov	r9, r3
 800a650:	688a      	ldr	r2, [r1, #8]
 800a652:	690b      	ldr	r3, [r1, #16]
 800a654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a658:	4293      	cmp	r3, r2
 800a65a:	bfb8      	it	lt
 800a65c:	4613      	movlt	r3, r2
 800a65e:	6033      	str	r3, [r6, #0]
 800a660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a664:	4607      	mov	r7, r0
 800a666:	460c      	mov	r4, r1
 800a668:	b10a      	cbz	r2, 800a66e <_printf_common+0x26>
 800a66a:	3301      	adds	r3, #1
 800a66c:	6033      	str	r3, [r6, #0]
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	0699      	lsls	r1, r3, #26
 800a672:	bf42      	ittt	mi
 800a674:	6833      	ldrmi	r3, [r6, #0]
 800a676:	3302      	addmi	r3, #2
 800a678:	6033      	strmi	r3, [r6, #0]
 800a67a:	6825      	ldr	r5, [r4, #0]
 800a67c:	f015 0506 	ands.w	r5, r5, #6
 800a680:	d106      	bne.n	800a690 <_printf_common+0x48>
 800a682:	f104 0a19 	add.w	sl, r4, #25
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	6832      	ldr	r2, [r6, #0]
 800a68a:	1a9b      	subs	r3, r3, r2
 800a68c:	42ab      	cmp	r3, r5
 800a68e:	dc26      	bgt.n	800a6de <_printf_common+0x96>
 800a690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a694:	1e13      	subs	r3, r2, #0
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	bf18      	it	ne
 800a69a:	2301      	movne	r3, #1
 800a69c:	0692      	lsls	r2, r2, #26
 800a69e:	d42b      	bmi.n	800a6f8 <_printf_common+0xb0>
 800a6a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	47c0      	blx	r8
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d01e      	beq.n	800a6ec <_printf_common+0xa4>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	68e5      	ldr	r5, [r4, #12]
 800a6b2:	6832      	ldr	r2, [r6, #0]
 800a6b4:	f003 0306 	and.w	r3, r3, #6
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	bf08      	it	eq
 800a6bc:	1aad      	subeq	r5, r5, r2
 800a6be:	68a3      	ldr	r3, [r4, #8]
 800a6c0:	6922      	ldr	r2, [r4, #16]
 800a6c2:	bf0c      	ite	eq
 800a6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6c8:	2500      	movne	r5, #0
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	bfc4      	itt	gt
 800a6ce:	1a9b      	subgt	r3, r3, r2
 800a6d0:	18ed      	addgt	r5, r5, r3
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	341a      	adds	r4, #26
 800a6d6:	42b5      	cmp	r5, r6
 800a6d8:	d11a      	bne.n	800a710 <_printf_common+0xc8>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e008      	b.n	800a6f0 <_printf_common+0xa8>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	47c0      	blx	r8
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d103      	bne.n	800a6f4 <_printf_common+0xac>
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f4:	3501      	adds	r5, #1
 800a6f6:	e7c6      	b.n	800a686 <_printf_common+0x3e>
 800a6f8:	18e1      	adds	r1, r4, r3
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	2030      	movs	r0, #48	; 0x30
 800a6fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a702:	4422      	add	r2, r4
 800a704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a70c:	3302      	adds	r3, #2
 800a70e:	e7c7      	b.n	800a6a0 <_printf_common+0x58>
 800a710:	2301      	movs	r3, #1
 800a712:	4622      	mov	r2, r4
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d0e6      	beq.n	800a6ec <_printf_common+0xa4>
 800a71e:	3601      	adds	r6, #1
 800a720:	e7d9      	b.n	800a6d6 <_printf_common+0x8e>
	...

0800a724 <_printf_i>:
 800a724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	460c      	mov	r4, r1
 800a72a:	4691      	mov	r9, r2
 800a72c:	7e27      	ldrb	r7, [r4, #24]
 800a72e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a730:	2f78      	cmp	r7, #120	; 0x78
 800a732:	4680      	mov	r8, r0
 800a734:	469a      	mov	sl, r3
 800a736:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a73a:	d807      	bhi.n	800a74c <_printf_i+0x28>
 800a73c:	2f62      	cmp	r7, #98	; 0x62
 800a73e:	d80a      	bhi.n	800a756 <_printf_i+0x32>
 800a740:	2f00      	cmp	r7, #0
 800a742:	f000 80d8 	beq.w	800a8f6 <_printf_i+0x1d2>
 800a746:	2f58      	cmp	r7, #88	; 0x58
 800a748:	f000 80a3 	beq.w	800a892 <_printf_i+0x16e>
 800a74c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a754:	e03a      	b.n	800a7cc <_printf_i+0xa8>
 800a756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a75a:	2b15      	cmp	r3, #21
 800a75c:	d8f6      	bhi.n	800a74c <_printf_i+0x28>
 800a75e:	a001      	add	r0, pc, #4	; (adr r0, 800a764 <_printf_i+0x40>)
 800a760:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a764:	0800a7bd 	.word	0x0800a7bd
 800a768:	0800a7d1 	.word	0x0800a7d1
 800a76c:	0800a74d 	.word	0x0800a74d
 800a770:	0800a74d 	.word	0x0800a74d
 800a774:	0800a74d 	.word	0x0800a74d
 800a778:	0800a74d 	.word	0x0800a74d
 800a77c:	0800a7d1 	.word	0x0800a7d1
 800a780:	0800a74d 	.word	0x0800a74d
 800a784:	0800a74d 	.word	0x0800a74d
 800a788:	0800a74d 	.word	0x0800a74d
 800a78c:	0800a74d 	.word	0x0800a74d
 800a790:	0800a8dd 	.word	0x0800a8dd
 800a794:	0800a801 	.word	0x0800a801
 800a798:	0800a8bf 	.word	0x0800a8bf
 800a79c:	0800a74d 	.word	0x0800a74d
 800a7a0:	0800a74d 	.word	0x0800a74d
 800a7a4:	0800a8ff 	.word	0x0800a8ff
 800a7a8:	0800a74d 	.word	0x0800a74d
 800a7ac:	0800a801 	.word	0x0800a801
 800a7b0:	0800a74d 	.word	0x0800a74d
 800a7b4:	0800a74d 	.word	0x0800a74d
 800a7b8:	0800a8c7 	.word	0x0800a8c7
 800a7bc:	680b      	ldr	r3, [r1, #0]
 800a7be:	1d1a      	adds	r2, r3, #4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	600a      	str	r2, [r1, #0]
 800a7c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e0a3      	b.n	800a918 <_printf_i+0x1f4>
 800a7d0:	6825      	ldr	r5, [r4, #0]
 800a7d2:	6808      	ldr	r0, [r1, #0]
 800a7d4:	062e      	lsls	r6, r5, #24
 800a7d6:	f100 0304 	add.w	r3, r0, #4
 800a7da:	d50a      	bpl.n	800a7f2 <_printf_i+0xce>
 800a7dc:	6805      	ldr	r5, [r0, #0]
 800a7de:	600b      	str	r3, [r1, #0]
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	da03      	bge.n	800a7ec <_printf_i+0xc8>
 800a7e4:	232d      	movs	r3, #45	; 0x2d
 800a7e6:	426d      	negs	r5, r5
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ec:	485e      	ldr	r0, [pc, #376]	; (800a968 <_printf_i+0x244>)
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	e019      	b.n	800a826 <_printf_i+0x102>
 800a7f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a7f6:	6805      	ldr	r5, [r0, #0]
 800a7f8:	600b      	str	r3, [r1, #0]
 800a7fa:	bf18      	it	ne
 800a7fc:	b22d      	sxthne	r5, r5
 800a7fe:	e7ef      	b.n	800a7e0 <_printf_i+0xbc>
 800a800:	680b      	ldr	r3, [r1, #0]
 800a802:	6825      	ldr	r5, [r4, #0]
 800a804:	1d18      	adds	r0, r3, #4
 800a806:	6008      	str	r0, [r1, #0]
 800a808:	0628      	lsls	r0, r5, #24
 800a80a:	d501      	bpl.n	800a810 <_printf_i+0xec>
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	e002      	b.n	800a816 <_printf_i+0xf2>
 800a810:	0669      	lsls	r1, r5, #25
 800a812:	d5fb      	bpl.n	800a80c <_printf_i+0xe8>
 800a814:	881d      	ldrh	r5, [r3, #0]
 800a816:	4854      	ldr	r0, [pc, #336]	; (800a968 <_printf_i+0x244>)
 800a818:	2f6f      	cmp	r7, #111	; 0x6f
 800a81a:	bf0c      	ite	eq
 800a81c:	2308      	moveq	r3, #8
 800a81e:	230a      	movne	r3, #10
 800a820:	2100      	movs	r1, #0
 800a822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a826:	6866      	ldr	r6, [r4, #4]
 800a828:	60a6      	str	r6, [r4, #8]
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	bfa2      	ittt	ge
 800a82e:	6821      	ldrge	r1, [r4, #0]
 800a830:	f021 0104 	bicge.w	r1, r1, #4
 800a834:	6021      	strge	r1, [r4, #0]
 800a836:	b90d      	cbnz	r5, 800a83c <_printf_i+0x118>
 800a838:	2e00      	cmp	r6, #0
 800a83a:	d04d      	beq.n	800a8d8 <_printf_i+0x1b4>
 800a83c:	4616      	mov	r6, r2
 800a83e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a842:	fb03 5711 	mls	r7, r3, r1, r5
 800a846:	5dc7      	ldrb	r7, [r0, r7]
 800a848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a84c:	462f      	mov	r7, r5
 800a84e:	42bb      	cmp	r3, r7
 800a850:	460d      	mov	r5, r1
 800a852:	d9f4      	bls.n	800a83e <_printf_i+0x11a>
 800a854:	2b08      	cmp	r3, #8
 800a856:	d10b      	bne.n	800a870 <_printf_i+0x14c>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	07df      	lsls	r7, r3, #31
 800a85c:	d508      	bpl.n	800a870 <_printf_i+0x14c>
 800a85e:	6923      	ldr	r3, [r4, #16]
 800a860:	6861      	ldr	r1, [r4, #4]
 800a862:	4299      	cmp	r1, r3
 800a864:	bfde      	ittt	le
 800a866:	2330      	movle	r3, #48	; 0x30
 800a868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a86c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a870:	1b92      	subs	r2, r2, r6
 800a872:	6122      	str	r2, [r4, #16]
 800a874:	f8cd a000 	str.w	sl, [sp]
 800a878:	464b      	mov	r3, r9
 800a87a:	aa03      	add	r2, sp, #12
 800a87c:	4621      	mov	r1, r4
 800a87e:	4640      	mov	r0, r8
 800a880:	f7ff fee2 	bl	800a648 <_printf_common>
 800a884:	3001      	adds	r0, #1
 800a886:	d14c      	bne.n	800a922 <_printf_i+0x1fe>
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	b004      	add	sp, #16
 800a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a892:	4835      	ldr	r0, [pc, #212]	; (800a968 <_printf_i+0x244>)
 800a894:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	680e      	ldr	r6, [r1, #0]
 800a89c:	061f      	lsls	r7, r3, #24
 800a89e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a8a2:	600e      	str	r6, [r1, #0]
 800a8a4:	d514      	bpl.n	800a8d0 <_printf_i+0x1ac>
 800a8a6:	07d9      	lsls	r1, r3, #31
 800a8a8:	bf44      	itt	mi
 800a8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ae:	6023      	strmi	r3, [r4, #0]
 800a8b0:	b91d      	cbnz	r5, 800a8ba <_printf_i+0x196>
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	f023 0320 	bic.w	r3, r3, #32
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	2310      	movs	r3, #16
 800a8bc:	e7b0      	b.n	800a820 <_printf_i+0xfc>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	f043 0320 	orr.w	r3, r3, #32
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	2378      	movs	r3, #120	; 0x78
 800a8c8:	4828      	ldr	r0, [pc, #160]	; (800a96c <_printf_i+0x248>)
 800a8ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8ce:	e7e3      	b.n	800a898 <_printf_i+0x174>
 800a8d0:	065e      	lsls	r6, r3, #25
 800a8d2:	bf48      	it	mi
 800a8d4:	b2ad      	uxthmi	r5, r5
 800a8d6:	e7e6      	b.n	800a8a6 <_printf_i+0x182>
 800a8d8:	4616      	mov	r6, r2
 800a8da:	e7bb      	b.n	800a854 <_printf_i+0x130>
 800a8dc:	680b      	ldr	r3, [r1, #0]
 800a8de:	6826      	ldr	r6, [r4, #0]
 800a8e0:	6960      	ldr	r0, [r4, #20]
 800a8e2:	1d1d      	adds	r5, r3, #4
 800a8e4:	600d      	str	r5, [r1, #0]
 800a8e6:	0635      	lsls	r5, r6, #24
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	d501      	bpl.n	800a8f0 <_printf_i+0x1cc>
 800a8ec:	6018      	str	r0, [r3, #0]
 800a8ee:	e002      	b.n	800a8f6 <_printf_i+0x1d2>
 800a8f0:	0671      	lsls	r1, r6, #25
 800a8f2:	d5fb      	bpl.n	800a8ec <_printf_i+0x1c8>
 800a8f4:	8018      	strh	r0, [r3, #0]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6123      	str	r3, [r4, #16]
 800a8fa:	4616      	mov	r6, r2
 800a8fc:	e7ba      	b.n	800a874 <_printf_i+0x150>
 800a8fe:	680b      	ldr	r3, [r1, #0]
 800a900:	1d1a      	adds	r2, r3, #4
 800a902:	600a      	str	r2, [r1, #0]
 800a904:	681e      	ldr	r6, [r3, #0]
 800a906:	6862      	ldr	r2, [r4, #4]
 800a908:	2100      	movs	r1, #0
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7f5 fc70 	bl	80001f0 <memchr>
 800a910:	b108      	cbz	r0, 800a916 <_printf_i+0x1f2>
 800a912:	1b80      	subs	r0, r0, r6
 800a914:	6060      	str	r0, [r4, #4]
 800a916:	6863      	ldr	r3, [r4, #4]
 800a918:	6123      	str	r3, [r4, #16]
 800a91a:	2300      	movs	r3, #0
 800a91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a920:	e7a8      	b.n	800a874 <_printf_i+0x150>
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	4632      	mov	r2, r6
 800a926:	4649      	mov	r1, r9
 800a928:	4640      	mov	r0, r8
 800a92a:	47d0      	blx	sl
 800a92c:	3001      	adds	r0, #1
 800a92e:	d0ab      	beq.n	800a888 <_printf_i+0x164>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	079b      	lsls	r3, r3, #30
 800a934:	d413      	bmi.n	800a95e <_printf_i+0x23a>
 800a936:	68e0      	ldr	r0, [r4, #12]
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	4298      	cmp	r0, r3
 800a93c:	bfb8      	it	lt
 800a93e:	4618      	movlt	r0, r3
 800a940:	e7a4      	b.n	800a88c <_printf_i+0x168>
 800a942:	2301      	movs	r3, #1
 800a944:	4632      	mov	r2, r6
 800a946:	4649      	mov	r1, r9
 800a948:	4640      	mov	r0, r8
 800a94a:	47d0      	blx	sl
 800a94c:	3001      	adds	r0, #1
 800a94e:	d09b      	beq.n	800a888 <_printf_i+0x164>
 800a950:	3501      	adds	r5, #1
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	9903      	ldr	r1, [sp, #12]
 800a956:	1a5b      	subs	r3, r3, r1
 800a958:	42ab      	cmp	r3, r5
 800a95a:	dcf2      	bgt.n	800a942 <_printf_i+0x21e>
 800a95c:	e7eb      	b.n	800a936 <_printf_i+0x212>
 800a95e:	2500      	movs	r5, #0
 800a960:	f104 0619 	add.w	r6, r4, #25
 800a964:	e7f5      	b.n	800a952 <_printf_i+0x22e>
 800a966:	bf00      	nop
 800a968:	0800ce5e 	.word	0x0800ce5e
 800a96c:	0800ce6f 	.word	0x0800ce6f

0800a970 <quorem>:
 800a970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	6903      	ldr	r3, [r0, #16]
 800a976:	690c      	ldr	r4, [r1, #16]
 800a978:	42a3      	cmp	r3, r4
 800a97a:	4607      	mov	r7, r0
 800a97c:	f2c0 8081 	blt.w	800aa82 <quorem+0x112>
 800a980:	3c01      	subs	r4, #1
 800a982:	f101 0814 	add.w	r8, r1, #20
 800a986:	f100 0514 	add.w	r5, r0, #20
 800a98a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a998:	3301      	adds	r3, #1
 800a99a:	429a      	cmp	r2, r3
 800a99c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a9a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9a8:	d331      	bcc.n	800aa0e <quorem+0x9e>
 800a9aa:	f04f 0e00 	mov.w	lr, #0
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	46ac      	mov	ip, r5
 800a9b2:	46f2      	mov	sl, lr
 800a9b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9b8:	b293      	uxth	r3, r2
 800a9ba:	fb06 e303 	mla	r3, r6, r3, lr
 800a9be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a9c8:	0c12      	lsrs	r2, r2, #16
 800a9ca:	f8dc a000 	ldr.w	sl, [ip]
 800a9ce:	fb06 e202 	mla	r2, r6, r2, lr
 800a9d2:	fa13 f38a 	uxtah	r3, r3, sl
 800a9d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9da:	fa1f fa82 	uxth.w	sl, r2
 800a9de:	f8dc 2000 	ldr.w	r2, [ip]
 800a9e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a9e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9f0:	4581      	cmp	r9, r0
 800a9f2:	f84c 3b04 	str.w	r3, [ip], #4
 800a9f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a9fa:	d2db      	bcs.n	800a9b4 <quorem+0x44>
 800a9fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa00:	b92b      	cbnz	r3, 800aa0e <quorem+0x9e>
 800aa02:	9b01      	ldr	r3, [sp, #4]
 800aa04:	3b04      	subs	r3, #4
 800aa06:	429d      	cmp	r5, r3
 800aa08:	461a      	mov	r2, r3
 800aa0a:	d32e      	bcc.n	800aa6a <quorem+0xfa>
 800aa0c:	613c      	str	r4, [r7, #16]
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f001 f8b0 	bl	800bb74 <__mcmp>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	db24      	blt.n	800aa62 <quorem+0xf2>
 800aa18:	3601      	adds	r6, #1
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f04f 0c00 	mov.w	ip, #0
 800aa20:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa24:	f8d0 e000 	ldr.w	lr, [r0]
 800aa28:	b293      	uxth	r3, r2
 800aa2a:	ebac 0303 	sub.w	r3, ip, r3
 800aa2e:	0c12      	lsrs	r2, r2, #16
 800aa30:	fa13 f38e 	uxtah	r3, r3, lr
 800aa34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa42:	45c1      	cmp	r9, r8
 800aa44:	f840 3b04 	str.w	r3, [r0], #4
 800aa48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa4c:	d2e8      	bcs.n	800aa20 <quorem+0xb0>
 800aa4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa56:	b922      	cbnz	r2, 800aa62 <quorem+0xf2>
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	429d      	cmp	r5, r3
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	d30a      	bcc.n	800aa76 <quorem+0x106>
 800aa60:	613c      	str	r4, [r7, #16]
 800aa62:	4630      	mov	r0, r6
 800aa64:	b003      	add	sp, #12
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	6812      	ldr	r2, [r2, #0]
 800aa6c:	3b04      	subs	r3, #4
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	d1cc      	bne.n	800aa0c <quorem+0x9c>
 800aa72:	3c01      	subs	r4, #1
 800aa74:	e7c7      	b.n	800aa06 <quorem+0x96>
 800aa76:	6812      	ldr	r2, [r2, #0]
 800aa78:	3b04      	subs	r3, #4
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	d1f0      	bne.n	800aa60 <quorem+0xf0>
 800aa7e:	3c01      	subs	r4, #1
 800aa80:	e7eb      	b.n	800aa5a <quorem+0xea>
 800aa82:	2000      	movs	r0, #0
 800aa84:	e7ee      	b.n	800aa64 <quorem+0xf4>
	...

0800aa88 <_dtoa_r>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ed2d 8b02 	vpush	{d8}
 800aa90:	ec57 6b10 	vmov	r6, r7, d0
 800aa94:	b095      	sub	sp, #84	; 0x54
 800aa96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa9c:	9105      	str	r1, [sp, #20]
 800aa9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaa8:	b975      	cbnz	r5, 800aac8 <_dtoa_r+0x40>
 800aaaa:	2010      	movs	r0, #16
 800aaac:	f000 fddc 	bl	800b668 <malloc>
 800aab0:	4602      	mov	r2, r0
 800aab2:	6260      	str	r0, [r4, #36]	; 0x24
 800aab4:	b920      	cbnz	r0, 800aac0 <_dtoa_r+0x38>
 800aab6:	4bb2      	ldr	r3, [pc, #712]	; (800ad80 <_dtoa_r+0x2f8>)
 800aab8:	21ea      	movs	r1, #234	; 0xea
 800aaba:	48b2      	ldr	r0, [pc, #712]	; (800ad84 <_dtoa_r+0x2fc>)
 800aabc:	f001 fa24 	bl	800bf08 <__assert_func>
 800aac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aac4:	6005      	str	r5, [r0, #0]
 800aac6:	60c5      	str	r5, [r0, #12]
 800aac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaca:	6819      	ldr	r1, [r3, #0]
 800aacc:	b151      	cbz	r1, 800aae4 <_dtoa_r+0x5c>
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	604a      	str	r2, [r1, #4]
 800aad2:	2301      	movs	r3, #1
 800aad4:	4093      	lsls	r3, r2
 800aad6:	608b      	str	r3, [r1, #8]
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fe0d 	bl	800b6f8 <_Bfree>
 800aade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	1e3b      	subs	r3, r7, #0
 800aae6:	bfb9      	ittee	lt
 800aae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aaec:	9303      	strlt	r3, [sp, #12]
 800aaee:	2300      	movge	r3, #0
 800aaf0:	f8c8 3000 	strge.w	r3, [r8]
 800aaf4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aaf8:	4ba3      	ldr	r3, [pc, #652]	; (800ad88 <_dtoa_r+0x300>)
 800aafa:	bfbc      	itt	lt
 800aafc:	2201      	movlt	r2, #1
 800aafe:	f8c8 2000 	strlt.w	r2, [r8]
 800ab02:	ea33 0309 	bics.w	r3, r3, r9
 800ab06:	d11b      	bne.n	800ab40 <_dtoa_r+0xb8>
 800ab08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab14:	4333      	orrs	r3, r6
 800ab16:	f000 857a 	beq.w	800b60e <_dtoa_r+0xb86>
 800ab1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab1c:	b963      	cbnz	r3, 800ab38 <_dtoa_r+0xb0>
 800ab1e:	4b9b      	ldr	r3, [pc, #620]	; (800ad8c <_dtoa_r+0x304>)
 800ab20:	e024      	b.n	800ab6c <_dtoa_r+0xe4>
 800ab22:	4b9b      	ldr	r3, [pc, #620]	; (800ad90 <_dtoa_r+0x308>)
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	9800      	ldr	r0, [sp, #0]
 800ab2e:	b015      	add	sp, #84	; 0x54
 800ab30:	ecbd 8b02 	vpop	{d8}
 800ab34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab38:	4b94      	ldr	r3, [pc, #592]	; (800ad8c <_dtoa_r+0x304>)
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	3303      	adds	r3, #3
 800ab3e:	e7f3      	b.n	800ab28 <_dtoa_r+0xa0>
 800ab40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab44:	2200      	movs	r2, #0
 800ab46:	ec51 0b17 	vmov	r0, r1, d7
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ab50:	f7f5 ffc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab54:	4680      	mov	r8, r0
 800ab56:	b158      	cbz	r0, 800ab70 <_dtoa_r+0xe8>
 800ab58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	6013      	str	r3, [r2, #0]
 800ab5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 8551 	beq.w	800b608 <_dtoa_r+0xb80>
 800ab66:	488b      	ldr	r0, [pc, #556]	; (800ad94 <_dtoa_r+0x30c>)
 800ab68:	6018      	str	r0, [r3, #0]
 800ab6a:	1e43      	subs	r3, r0, #1
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	e7dd      	b.n	800ab2c <_dtoa_r+0xa4>
 800ab70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ab74:	aa12      	add	r2, sp, #72	; 0x48
 800ab76:	a913      	add	r1, sp, #76	; 0x4c
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f001 f89f 	bl	800bcbc <__d2b>
 800ab7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab82:	4683      	mov	fp, r0
 800ab84:	2d00      	cmp	r5, #0
 800ab86:	d07c      	beq.n	800ac82 <_dtoa_r+0x1fa>
 800ab88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ab8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ab96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aba2:	4b7d      	ldr	r3, [pc, #500]	; (800ad98 <_dtoa_r+0x310>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	4630      	mov	r0, r6
 800aba8:	4639      	mov	r1, r7
 800abaa:	f7f5 fb75 	bl	8000298 <__aeabi_dsub>
 800abae:	a36e      	add	r3, pc, #440	; (adr r3, 800ad68 <_dtoa_r+0x2e0>)
 800abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb4:	f7f5 fd28 	bl	8000608 <__aeabi_dmul>
 800abb8:	a36d      	add	r3, pc, #436	; (adr r3, 800ad70 <_dtoa_r+0x2e8>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fb6d 	bl	800029c <__adddf3>
 800abc2:	4606      	mov	r6, r0
 800abc4:	4628      	mov	r0, r5
 800abc6:	460f      	mov	r7, r1
 800abc8:	f7f5 fcb4 	bl	8000534 <__aeabi_i2d>
 800abcc:	a36a      	add	r3, pc, #424	; (adr r3, 800ad78 <_dtoa_r+0x2f0>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fd19 	bl	8000608 <__aeabi_dmul>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4630      	mov	r0, r6
 800abdc:	4639      	mov	r1, r7
 800abde:	f7f5 fb5d 	bl	800029c <__adddf3>
 800abe2:	4606      	mov	r6, r0
 800abe4:	460f      	mov	r7, r1
 800abe6:	f7f5 ffbf 	bl	8000b68 <__aeabi_d2iz>
 800abea:	2200      	movs	r2, #0
 800abec:	4682      	mov	sl, r0
 800abee:	2300      	movs	r3, #0
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ff7a 	bl	8000aec <__aeabi_dcmplt>
 800abf8:	b148      	cbz	r0, 800ac0e <_dtoa_r+0x186>
 800abfa:	4650      	mov	r0, sl
 800abfc:	f7f5 fc9a 	bl	8000534 <__aeabi_i2d>
 800ac00:	4632      	mov	r2, r6
 800ac02:	463b      	mov	r3, r7
 800ac04:	f7f5 ff68 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac08:	b908      	cbnz	r0, 800ac0e <_dtoa_r+0x186>
 800ac0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac0e:	f1ba 0f16 	cmp.w	sl, #22
 800ac12:	d854      	bhi.n	800acbe <_dtoa_r+0x236>
 800ac14:	4b61      	ldr	r3, [pc, #388]	; (800ad9c <_dtoa_r+0x314>)
 800ac16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac22:	f7f5 ff63 	bl	8000aec <__aeabi_dcmplt>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d04b      	beq.n	800acc2 <_dtoa_r+0x23a>
 800ac2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac2e:	2300      	movs	r3, #0
 800ac30:	930e      	str	r3, [sp, #56]	; 0x38
 800ac32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac34:	1b5d      	subs	r5, r3, r5
 800ac36:	1e6b      	subs	r3, r5, #1
 800ac38:	9304      	str	r3, [sp, #16]
 800ac3a:	bf43      	ittte	mi
 800ac3c:	2300      	movmi	r3, #0
 800ac3e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ac42:	9304      	strmi	r3, [sp, #16]
 800ac44:	f04f 0800 	movpl.w	r8, #0
 800ac48:	f1ba 0f00 	cmp.w	sl, #0
 800ac4c:	db3b      	blt.n	800acc6 <_dtoa_r+0x23e>
 800ac4e:	9b04      	ldr	r3, [sp, #16]
 800ac50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ac54:	4453      	add	r3, sl
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9306      	str	r3, [sp, #24]
 800ac5c:	9b05      	ldr	r3, [sp, #20]
 800ac5e:	2b09      	cmp	r3, #9
 800ac60:	d869      	bhi.n	800ad36 <_dtoa_r+0x2ae>
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	bfc4      	itt	gt
 800ac66:	3b04      	subgt	r3, #4
 800ac68:	9305      	strgt	r3, [sp, #20]
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	f1a3 0302 	sub.w	r3, r3, #2
 800ac70:	bfcc      	ite	gt
 800ac72:	2500      	movgt	r5, #0
 800ac74:	2501      	movle	r5, #1
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d869      	bhi.n	800ad4e <_dtoa_r+0x2c6>
 800ac7a:	e8df f003 	tbb	[pc, r3]
 800ac7e:	4e2c      	.short	0x4e2c
 800ac80:	5a4c      	.short	0x5a4c
 800ac82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ac86:	441d      	add	r5, r3
 800ac88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac8c:	2b20      	cmp	r3, #32
 800ac8e:	bfc1      	itttt	gt
 800ac90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac98:	fa09 f303 	lslgt.w	r3, r9, r3
 800ac9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aca0:	bfda      	itte	le
 800aca2:	f1c3 0320 	rsble	r3, r3, #32
 800aca6:	fa06 f003 	lslle.w	r0, r6, r3
 800acaa:	4318      	orrgt	r0, r3
 800acac:	f7f5 fc32 	bl	8000514 <__aeabi_ui2d>
 800acb0:	2301      	movs	r3, #1
 800acb2:	4606      	mov	r6, r0
 800acb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800acb8:	3d01      	subs	r5, #1
 800acba:	9310      	str	r3, [sp, #64]	; 0x40
 800acbc:	e771      	b.n	800aba2 <_dtoa_r+0x11a>
 800acbe:	2301      	movs	r3, #1
 800acc0:	e7b6      	b.n	800ac30 <_dtoa_r+0x1a8>
 800acc2:	900e      	str	r0, [sp, #56]	; 0x38
 800acc4:	e7b5      	b.n	800ac32 <_dtoa_r+0x1aa>
 800acc6:	f1ca 0300 	rsb	r3, sl, #0
 800acca:	9306      	str	r3, [sp, #24]
 800accc:	2300      	movs	r3, #0
 800acce:	eba8 080a 	sub.w	r8, r8, sl
 800acd2:	930d      	str	r3, [sp, #52]	; 0x34
 800acd4:	e7c2      	b.n	800ac5c <_dtoa_r+0x1d4>
 800acd6:	2300      	movs	r3, #0
 800acd8:	9308      	str	r3, [sp, #32]
 800acda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acdc:	2b00      	cmp	r3, #0
 800acde:	dc39      	bgt.n	800ad54 <_dtoa_r+0x2cc>
 800ace0:	f04f 0901 	mov.w	r9, #1
 800ace4:	f8cd 9004 	str.w	r9, [sp, #4]
 800ace8:	464b      	mov	r3, r9
 800acea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800acee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800acf0:	2200      	movs	r2, #0
 800acf2:	6042      	str	r2, [r0, #4]
 800acf4:	2204      	movs	r2, #4
 800acf6:	f102 0614 	add.w	r6, r2, #20
 800acfa:	429e      	cmp	r6, r3
 800acfc:	6841      	ldr	r1, [r0, #4]
 800acfe:	d92f      	bls.n	800ad60 <_dtoa_r+0x2d8>
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fcb9 	bl	800b678 <_Balloc>
 800ad06:	9000      	str	r0, [sp, #0]
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d14b      	bne.n	800ada4 <_dtoa_r+0x31c>
 800ad0c:	4b24      	ldr	r3, [pc, #144]	; (800ada0 <_dtoa_r+0x318>)
 800ad0e:	4602      	mov	r2, r0
 800ad10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ad14:	e6d1      	b.n	800aaba <_dtoa_r+0x32>
 800ad16:	2301      	movs	r3, #1
 800ad18:	e7de      	b.n	800acd8 <_dtoa_r+0x250>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9308      	str	r3, [sp, #32]
 800ad1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad20:	eb0a 0903 	add.w	r9, sl, r3
 800ad24:	f109 0301 	add.w	r3, r9, #1
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	bfb8      	it	lt
 800ad2e:	2301      	movlt	r3, #1
 800ad30:	e7dd      	b.n	800acee <_dtoa_r+0x266>
 800ad32:	2301      	movs	r3, #1
 800ad34:	e7f2      	b.n	800ad1c <_dtoa_r+0x294>
 800ad36:	2501      	movs	r5, #1
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9305      	str	r3, [sp, #20]
 800ad3c:	9508      	str	r5, [sp, #32]
 800ad3e:	f04f 39ff 	mov.w	r9, #4294967295
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad48:	2312      	movs	r3, #18
 800ad4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4c:	e7cf      	b.n	800acee <_dtoa_r+0x266>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	9308      	str	r3, [sp, #32]
 800ad52:	e7f4      	b.n	800ad3e <_dtoa_r+0x2b6>
 800ad54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ad58:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	e7c6      	b.n	800acee <_dtoa_r+0x266>
 800ad60:	3101      	adds	r1, #1
 800ad62:	6041      	str	r1, [r0, #4]
 800ad64:	0052      	lsls	r2, r2, #1
 800ad66:	e7c6      	b.n	800acf6 <_dtoa_r+0x26e>
 800ad68:	636f4361 	.word	0x636f4361
 800ad6c:	3fd287a7 	.word	0x3fd287a7
 800ad70:	8b60c8b3 	.word	0x8b60c8b3
 800ad74:	3fc68a28 	.word	0x3fc68a28
 800ad78:	509f79fb 	.word	0x509f79fb
 800ad7c:	3fd34413 	.word	0x3fd34413
 800ad80:	0800ce8d 	.word	0x0800ce8d
 800ad84:	0800cea4 	.word	0x0800cea4
 800ad88:	7ff00000 	.word	0x7ff00000
 800ad8c:	0800ce89 	.word	0x0800ce89
 800ad90:	0800ce80 	.word	0x0800ce80
 800ad94:	0800ce5d 	.word	0x0800ce5d
 800ad98:	3ff80000 	.word	0x3ff80000
 800ad9c:	0800cfa0 	.word	0x0800cfa0
 800ada0:	0800cf03 	.word	0x0800cf03
 800ada4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ada6:	9a00      	ldr	r2, [sp, #0]
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	9b01      	ldr	r3, [sp, #4]
 800adac:	2b0e      	cmp	r3, #14
 800adae:	f200 80ad 	bhi.w	800af0c <_dtoa_r+0x484>
 800adb2:	2d00      	cmp	r5, #0
 800adb4:	f000 80aa 	beq.w	800af0c <_dtoa_r+0x484>
 800adb8:	f1ba 0f00 	cmp.w	sl, #0
 800adbc:	dd36      	ble.n	800ae2c <_dtoa_r+0x3a4>
 800adbe:	4ac3      	ldr	r2, [pc, #780]	; (800b0cc <_dtoa_r+0x644>)
 800adc0:	f00a 030f 	and.w	r3, sl, #15
 800adc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800adc8:	ed93 7b00 	vldr	d7, [r3]
 800adcc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800add0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800add4:	eeb0 8a47 	vmov.f32	s16, s14
 800add8:	eef0 8a67 	vmov.f32	s17, s15
 800addc:	d016      	beq.n	800ae0c <_dtoa_r+0x384>
 800adde:	4bbc      	ldr	r3, [pc, #752]	; (800b0d0 <_dtoa_r+0x648>)
 800ade0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ade4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ade8:	f7f5 fd38 	bl	800085c <__aeabi_ddiv>
 800adec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf0:	f007 070f 	and.w	r7, r7, #15
 800adf4:	2503      	movs	r5, #3
 800adf6:	4eb6      	ldr	r6, [pc, #728]	; (800b0d0 <_dtoa_r+0x648>)
 800adf8:	b957      	cbnz	r7, 800ae10 <_dtoa_r+0x388>
 800adfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfe:	ec53 2b18 	vmov	r2, r3, d8
 800ae02:	f7f5 fd2b 	bl	800085c <__aeabi_ddiv>
 800ae06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae0a:	e029      	b.n	800ae60 <_dtoa_r+0x3d8>
 800ae0c:	2502      	movs	r5, #2
 800ae0e:	e7f2      	b.n	800adf6 <_dtoa_r+0x36e>
 800ae10:	07f9      	lsls	r1, r7, #31
 800ae12:	d508      	bpl.n	800ae26 <_dtoa_r+0x39e>
 800ae14:	ec51 0b18 	vmov	r0, r1, d8
 800ae18:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae1c:	f7f5 fbf4 	bl	8000608 <__aeabi_dmul>
 800ae20:	ec41 0b18 	vmov	d8, r0, r1
 800ae24:	3501      	adds	r5, #1
 800ae26:	107f      	asrs	r7, r7, #1
 800ae28:	3608      	adds	r6, #8
 800ae2a:	e7e5      	b.n	800adf8 <_dtoa_r+0x370>
 800ae2c:	f000 80a6 	beq.w	800af7c <_dtoa_r+0x4f4>
 800ae30:	f1ca 0600 	rsb	r6, sl, #0
 800ae34:	4ba5      	ldr	r3, [pc, #660]	; (800b0cc <_dtoa_r+0x644>)
 800ae36:	4fa6      	ldr	r7, [pc, #664]	; (800b0d0 <_dtoa_r+0x648>)
 800ae38:	f006 020f 	and.w	r2, r6, #15
 800ae3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae48:	f7f5 fbde 	bl	8000608 <__aeabi_dmul>
 800ae4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae50:	1136      	asrs	r6, r6, #4
 800ae52:	2300      	movs	r3, #0
 800ae54:	2502      	movs	r5, #2
 800ae56:	2e00      	cmp	r6, #0
 800ae58:	f040 8085 	bne.w	800af66 <_dtoa_r+0x4de>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1d2      	bne.n	800ae06 <_dtoa_r+0x37e>
 800ae60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f000 808c 	beq.w	800af80 <_dtoa_r+0x4f8>
 800ae68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae6c:	4b99      	ldr	r3, [pc, #612]	; (800b0d4 <_dtoa_r+0x64c>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4630      	mov	r0, r6
 800ae72:	4639      	mov	r1, r7
 800ae74:	f7f5 fe3a 	bl	8000aec <__aeabi_dcmplt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	f000 8081 	beq.w	800af80 <_dtoa_r+0x4f8>
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d07d      	beq.n	800af80 <_dtoa_r+0x4f8>
 800ae84:	f1b9 0f00 	cmp.w	r9, #0
 800ae88:	dd3c      	ble.n	800af04 <_dtoa_r+0x47c>
 800ae8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae8e:	9307      	str	r3, [sp, #28]
 800ae90:	2200      	movs	r2, #0
 800ae92:	4b91      	ldr	r3, [pc, #580]	; (800b0d8 <_dtoa_r+0x650>)
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	f7f5 fbb6 	bl	8000608 <__aeabi_dmul>
 800ae9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aea0:	3501      	adds	r5, #1
 800aea2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800aea6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7f5 fb42 	bl	8000534 <__aeabi_i2d>
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	f7f5 fba8 	bl	8000608 <__aeabi_dmul>
 800aeb8:	4b88      	ldr	r3, [pc, #544]	; (800b0dc <_dtoa_r+0x654>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7f5 f9ee 	bl	800029c <__adddf3>
 800aec0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aec8:	9303      	str	r3, [sp, #12]
 800aeca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d15c      	bne.n	800af8a <_dtoa_r+0x502>
 800aed0:	4b83      	ldr	r3, [pc, #524]	; (800b0e0 <_dtoa_r+0x658>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	4630      	mov	r0, r6
 800aed6:	4639      	mov	r1, r7
 800aed8:	f7f5 f9de 	bl	8000298 <__aeabi_dsub>
 800aedc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aee0:	4606      	mov	r6, r0
 800aee2:	460f      	mov	r7, r1
 800aee4:	f7f5 fe20 	bl	8000b28 <__aeabi_dcmpgt>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	f040 8296 	bne.w	800b41a <_dtoa_r+0x992>
 800aeee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aef2:	4630      	mov	r0, r6
 800aef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aef8:	4639      	mov	r1, r7
 800aefa:	f7f5 fdf7 	bl	8000aec <__aeabi_dcmplt>
 800aefe:	2800      	cmp	r0, #0
 800af00:	f040 8288 	bne.w	800b414 <_dtoa_r+0x98c>
 800af04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f2c0 8158 	blt.w	800b1c4 <_dtoa_r+0x73c>
 800af14:	f1ba 0f0e 	cmp.w	sl, #14
 800af18:	f300 8154 	bgt.w	800b1c4 <_dtoa_r+0x73c>
 800af1c:	4b6b      	ldr	r3, [pc, #428]	; (800b0cc <_dtoa_r+0x644>)
 800af1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800af22:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f280 80e3 	bge.w	800b0f4 <_dtoa_r+0x66c>
 800af2e:	9b01      	ldr	r3, [sp, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f300 80df 	bgt.w	800b0f4 <_dtoa_r+0x66c>
 800af36:	f040 826d 	bne.w	800b414 <_dtoa_r+0x98c>
 800af3a:	4b69      	ldr	r3, [pc, #420]	; (800b0e0 <_dtoa_r+0x658>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 fb61 	bl	8000608 <__aeabi_dmul>
 800af46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af4a:	f7f5 fde3 	bl	8000b14 <__aeabi_dcmpge>
 800af4e:	9e01      	ldr	r6, [sp, #4]
 800af50:	4637      	mov	r7, r6
 800af52:	2800      	cmp	r0, #0
 800af54:	f040 8243 	bne.w	800b3de <_dtoa_r+0x956>
 800af58:	9d00      	ldr	r5, [sp, #0]
 800af5a:	2331      	movs	r3, #49	; 0x31
 800af5c:	f805 3b01 	strb.w	r3, [r5], #1
 800af60:	f10a 0a01 	add.w	sl, sl, #1
 800af64:	e23f      	b.n	800b3e6 <_dtoa_r+0x95e>
 800af66:	07f2      	lsls	r2, r6, #31
 800af68:	d505      	bpl.n	800af76 <_dtoa_r+0x4ee>
 800af6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6e:	f7f5 fb4b 	bl	8000608 <__aeabi_dmul>
 800af72:	3501      	adds	r5, #1
 800af74:	2301      	movs	r3, #1
 800af76:	1076      	asrs	r6, r6, #1
 800af78:	3708      	adds	r7, #8
 800af7a:	e76c      	b.n	800ae56 <_dtoa_r+0x3ce>
 800af7c:	2502      	movs	r5, #2
 800af7e:	e76f      	b.n	800ae60 <_dtoa_r+0x3d8>
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	f8cd a01c 	str.w	sl, [sp, #28]
 800af86:	930c      	str	r3, [sp, #48]	; 0x30
 800af88:	e78d      	b.n	800aea6 <_dtoa_r+0x41e>
 800af8a:	9900      	ldr	r1, [sp, #0]
 800af8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800af8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af90:	4b4e      	ldr	r3, [pc, #312]	; (800b0cc <_dtoa_r+0x644>)
 800af92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af96:	4401      	add	r1, r0
 800af98:	9102      	str	r1, [sp, #8]
 800af9a:	9908      	ldr	r1, [sp, #32]
 800af9c:	eeb0 8a47 	vmov.f32	s16, s14
 800afa0:	eef0 8a67 	vmov.f32	s17, s15
 800afa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afac:	2900      	cmp	r1, #0
 800afae:	d045      	beq.n	800b03c <_dtoa_r+0x5b4>
 800afb0:	494c      	ldr	r1, [pc, #304]	; (800b0e4 <_dtoa_r+0x65c>)
 800afb2:	2000      	movs	r0, #0
 800afb4:	f7f5 fc52 	bl	800085c <__aeabi_ddiv>
 800afb8:	ec53 2b18 	vmov	r2, r3, d8
 800afbc:	f7f5 f96c 	bl	8000298 <__aeabi_dsub>
 800afc0:	9d00      	ldr	r5, [sp, #0]
 800afc2:	ec41 0b18 	vmov	d8, r0, r1
 800afc6:	4639      	mov	r1, r7
 800afc8:	4630      	mov	r0, r6
 800afca:	f7f5 fdcd 	bl	8000b68 <__aeabi_d2iz>
 800afce:	900c      	str	r0, [sp, #48]	; 0x30
 800afd0:	f7f5 fab0 	bl	8000534 <__aeabi_i2d>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	f7f5 f95c 	bl	8000298 <__aeabi_dsub>
 800afe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe2:	3330      	adds	r3, #48	; 0x30
 800afe4:	f805 3b01 	strb.w	r3, [r5], #1
 800afe8:	ec53 2b18 	vmov	r2, r3, d8
 800afec:	4606      	mov	r6, r0
 800afee:	460f      	mov	r7, r1
 800aff0:	f7f5 fd7c 	bl	8000aec <__aeabi_dcmplt>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d165      	bne.n	800b0c4 <_dtoa_r+0x63c>
 800aff8:	4632      	mov	r2, r6
 800affa:	463b      	mov	r3, r7
 800affc:	4935      	ldr	r1, [pc, #212]	; (800b0d4 <_dtoa_r+0x64c>)
 800affe:	2000      	movs	r0, #0
 800b000:	f7f5 f94a 	bl	8000298 <__aeabi_dsub>
 800b004:	ec53 2b18 	vmov	r2, r3, d8
 800b008:	f7f5 fd70 	bl	8000aec <__aeabi_dcmplt>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	f040 80b9 	bne.w	800b184 <_dtoa_r+0x6fc>
 800b012:	9b02      	ldr	r3, [sp, #8]
 800b014:	429d      	cmp	r5, r3
 800b016:	f43f af75 	beq.w	800af04 <_dtoa_r+0x47c>
 800b01a:	4b2f      	ldr	r3, [pc, #188]	; (800b0d8 <_dtoa_r+0x650>)
 800b01c:	ec51 0b18 	vmov	r0, r1, d8
 800b020:	2200      	movs	r2, #0
 800b022:	f7f5 faf1 	bl	8000608 <__aeabi_dmul>
 800b026:	4b2c      	ldr	r3, [pc, #176]	; (800b0d8 <_dtoa_r+0x650>)
 800b028:	ec41 0b18 	vmov	d8, r0, r1
 800b02c:	2200      	movs	r2, #0
 800b02e:	4630      	mov	r0, r6
 800b030:	4639      	mov	r1, r7
 800b032:	f7f5 fae9 	bl	8000608 <__aeabi_dmul>
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	e7c4      	b.n	800afc6 <_dtoa_r+0x53e>
 800b03c:	ec51 0b17 	vmov	r0, r1, d7
 800b040:	f7f5 fae2 	bl	8000608 <__aeabi_dmul>
 800b044:	9b02      	ldr	r3, [sp, #8]
 800b046:	9d00      	ldr	r5, [sp, #0]
 800b048:	930c      	str	r3, [sp, #48]	; 0x30
 800b04a:	ec41 0b18 	vmov	d8, r0, r1
 800b04e:	4639      	mov	r1, r7
 800b050:	4630      	mov	r0, r6
 800b052:	f7f5 fd89 	bl	8000b68 <__aeabi_d2iz>
 800b056:	9011      	str	r0, [sp, #68]	; 0x44
 800b058:	f7f5 fa6c 	bl	8000534 <__aeabi_i2d>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f7f5 f918 	bl	8000298 <__aeabi_dsub>
 800b068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b06a:	3330      	adds	r3, #48	; 0x30
 800b06c:	f805 3b01 	strb.w	r3, [r5], #1
 800b070:	9b02      	ldr	r3, [sp, #8]
 800b072:	429d      	cmp	r5, r3
 800b074:	4606      	mov	r6, r0
 800b076:	460f      	mov	r7, r1
 800b078:	f04f 0200 	mov.w	r2, #0
 800b07c:	d134      	bne.n	800b0e8 <_dtoa_r+0x660>
 800b07e:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <_dtoa_r+0x65c>)
 800b080:	ec51 0b18 	vmov	r0, r1, d8
 800b084:	f7f5 f90a 	bl	800029c <__adddf3>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 fd4a 	bl	8000b28 <__aeabi_dcmpgt>
 800b094:	2800      	cmp	r0, #0
 800b096:	d175      	bne.n	800b184 <_dtoa_r+0x6fc>
 800b098:	ec53 2b18 	vmov	r2, r3, d8
 800b09c:	4911      	ldr	r1, [pc, #68]	; (800b0e4 <_dtoa_r+0x65c>)
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f7f5 f8fa 	bl	8000298 <__aeabi_dsub>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f7f5 fd1e 	bl	8000aec <__aeabi_dcmplt>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f43f af27 	beq.w	800af04 <_dtoa_r+0x47c>
 800b0b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0b8:	1e6b      	subs	r3, r5, #1
 800b0ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b0bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b0c0:	2b30      	cmp	r3, #48	; 0x30
 800b0c2:	d0f8      	beq.n	800b0b6 <_dtoa_r+0x62e>
 800b0c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b0c8:	e04a      	b.n	800b160 <_dtoa_r+0x6d8>
 800b0ca:	bf00      	nop
 800b0cc:	0800cfa0 	.word	0x0800cfa0
 800b0d0:	0800cf78 	.word	0x0800cf78
 800b0d4:	3ff00000 	.word	0x3ff00000
 800b0d8:	40240000 	.word	0x40240000
 800b0dc:	401c0000 	.word	0x401c0000
 800b0e0:	40140000 	.word	0x40140000
 800b0e4:	3fe00000 	.word	0x3fe00000
 800b0e8:	4baf      	ldr	r3, [pc, #700]	; (800b3a8 <_dtoa_r+0x920>)
 800b0ea:	f7f5 fa8d 	bl	8000608 <__aeabi_dmul>
 800b0ee:	4606      	mov	r6, r0
 800b0f0:	460f      	mov	r7, r1
 800b0f2:	e7ac      	b.n	800b04e <_dtoa_r+0x5c6>
 800b0f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0f8:	9d00      	ldr	r5, [sp, #0]
 800b0fa:	4642      	mov	r2, r8
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	4630      	mov	r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	f7f5 fbab 	bl	800085c <__aeabi_ddiv>
 800b106:	f7f5 fd2f 	bl	8000b68 <__aeabi_d2iz>
 800b10a:	9002      	str	r0, [sp, #8]
 800b10c:	f7f5 fa12 	bl	8000534 <__aeabi_i2d>
 800b110:	4642      	mov	r2, r8
 800b112:	464b      	mov	r3, r9
 800b114:	f7f5 fa78 	bl	8000608 <__aeabi_dmul>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4630      	mov	r0, r6
 800b11e:	4639      	mov	r1, r7
 800b120:	f7f5 f8ba 	bl	8000298 <__aeabi_dsub>
 800b124:	9e02      	ldr	r6, [sp, #8]
 800b126:	9f01      	ldr	r7, [sp, #4]
 800b128:	3630      	adds	r6, #48	; 0x30
 800b12a:	f805 6b01 	strb.w	r6, [r5], #1
 800b12e:	9e00      	ldr	r6, [sp, #0]
 800b130:	1bae      	subs	r6, r5, r6
 800b132:	42b7      	cmp	r7, r6
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	d137      	bne.n	800b1aa <_dtoa_r+0x722>
 800b13a:	f7f5 f8af 	bl	800029c <__adddf3>
 800b13e:	4642      	mov	r2, r8
 800b140:	464b      	mov	r3, r9
 800b142:	4606      	mov	r6, r0
 800b144:	460f      	mov	r7, r1
 800b146:	f7f5 fcef 	bl	8000b28 <__aeabi_dcmpgt>
 800b14a:	b9c8      	cbnz	r0, 800b180 <_dtoa_r+0x6f8>
 800b14c:	4642      	mov	r2, r8
 800b14e:	464b      	mov	r3, r9
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b158:	b110      	cbz	r0, 800b160 <_dtoa_r+0x6d8>
 800b15a:	9b02      	ldr	r3, [sp, #8]
 800b15c:	07d9      	lsls	r1, r3, #31
 800b15e:	d40f      	bmi.n	800b180 <_dtoa_r+0x6f8>
 800b160:	4620      	mov	r0, r4
 800b162:	4659      	mov	r1, fp
 800b164:	f000 fac8 	bl	800b6f8 <_Bfree>
 800b168:	2300      	movs	r3, #0
 800b16a:	702b      	strb	r3, [r5, #0]
 800b16c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b16e:	f10a 0001 	add.w	r0, sl, #1
 800b172:	6018      	str	r0, [r3, #0]
 800b174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b176:	2b00      	cmp	r3, #0
 800b178:	f43f acd8 	beq.w	800ab2c <_dtoa_r+0xa4>
 800b17c:	601d      	str	r5, [r3, #0]
 800b17e:	e4d5      	b.n	800ab2c <_dtoa_r+0xa4>
 800b180:	f8cd a01c 	str.w	sl, [sp, #28]
 800b184:	462b      	mov	r3, r5
 800b186:	461d      	mov	r5, r3
 800b188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b18c:	2a39      	cmp	r2, #57	; 0x39
 800b18e:	d108      	bne.n	800b1a2 <_dtoa_r+0x71a>
 800b190:	9a00      	ldr	r2, [sp, #0]
 800b192:	429a      	cmp	r2, r3
 800b194:	d1f7      	bne.n	800b186 <_dtoa_r+0x6fe>
 800b196:	9a07      	ldr	r2, [sp, #28]
 800b198:	9900      	ldr	r1, [sp, #0]
 800b19a:	3201      	adds	r2, #1
 800b19c:	9207      	str	r2, [sp, #28]
 800b19e:	2230      	movs	r2, #48	; 0x30
 800b1a0:	700a      	strb	r2, [r1, #0]
 800b1a2:	781a      	ldrb	r2, [r3, #0]
 800b1a4:	3201      	adds	r2, #1
 800b1a6:	701a      	strb	r2, [r3, #0]
 800b1a8:	e78c      	b.n	800b0c4 <_dtoa_r+0x63c>
 800b1aa:	4b7f      	ldr	r3, [pc, #508]	; (800b3a8 <_dtoa_r+0x920>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f7f5 fa2b 	bl	8000608 <__aeabi_dmul>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	f7f5 fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d09b      	beq.n	800b0fa <_dtoa_r+0x672>
 800b1c2:	e7cd      	b.n	800b160 <_dtoa_r+0x6d8>
 800b1c4:	9a08      	ldr	r2, [sp, #32]
 800b1c6:	2a00      	cmp	r2, #0
 800b1c8:	f000 80c4 	beq.w	800b354 <_dtoa_r+0x8cc>
 800b1cc:	9a05      	ldr	r2, [sp, #20]
 800b1ce:	2a01      	cmp	r2, #1
 800b1d0:	f300 80a8 	bgt.w	800b324 <_dtoa_r+0x89c>
 800b1d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1d6:	2a00      	cmp	r2, #0
 800b1d8:	f000 80a0 	beq.w	800b31c <_dtoa_r+0x894>
 800b1dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b1e0:	9e06      	ldr	r6, [sp, #24]
 800b1e2:	4645      	mov	r5, r8
 800b1e4:	9a04      	ldr	r2, [sp, #16]
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	441a      	add	r2, r3
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4498      	add	r8, r3
 800b1ee:	9204      	str	r2, [sp, #16]
 800b1f0:	f000 fb3e 	bl	800b870 <__i2b>
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	2d00      	cmp	r5, #0
 800b1f8:	dd0b      	ble.n	800b212 <_dtoa_r+0x78a>
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dd08      	ble.n	800b212 <_dtoa_r+0x78a>
 800b200:	42ab      	cmp	r3, r5
 800b202:	9a04      	ldr	r2, [sp, #16]
 800b204:	bfa8      	it	ge
 800b206:	462b      	movge	r3, r5
 800b208:	eba8 0803 	sub.w	r8, r8, r3
 800b20c:	1aed      	subs	r5, r5, r3
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	9304      	str	r3, [sp, #16]
 800b212:	9b06      	ldr	r3, [sp, #24]
 800b214:	b1fb      	cbz	r3, 800b256 <_dtoa_r+0x7ce>
 800b216:	9b08      	ldr	r3, [sp, #32]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 809f 	beq.w	800b35c <_dtoa_r+0x8d4>
 800b21e:	2e00      	cmp	r6, #0
 800b220:	dd11      	ble.n	800b246 <_dtoa_r+0x7be>
 800b222:	4639      	mov	r1, r7
 800b224:	4632      	mov	r2, r6
 800b226:	4620      	mov	r0, r4
 800b228:	f000 fbde 	bl	800b9e8 <__pow5mult>
 800b22c:	465a      	mov	r2, fp
 800b22e:	4601      	mov	r1, r0
 800b230:	4607      	mov	r7, r0
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fb32 	bl	800b89c <__multiply>
 800b238:	4659      	mov	r1, fp
 800b23a:	9007      	str	r0, [sp, #28]
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 fa5b 	bl	800b6f8 <_Bfree>
 800b242:	9b07      	ldr	r3, [sp, #28]
 800b244:	469b      	mov	fp, r3
 800b246:	9b06      	ldr	r3, [sp, #24]
 800b248:	1b9a      	subs	r2, r3, r6
 800b24a:	d004      	beq.n	800b256 <_dtoa_r+0x7ce>
 800b24c:	4659      	mov	r1, fp
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 fbca 	bl	800b9e8 <__pow5mult>
 800b254:	4683      	mov	fp, r0
 800b256:	2101      	movs	r1, #1
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 fb09 	bl	800b870 <__i2b>
 800b25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b260:	2b00      	cmp	r3, #0
 800b262:	4606      	mov	r6, r0
 800b264:	dd7c      	ble.n	800b360 <_dtoa_r+0x8d8>
 800b266:	461a      	mov	r2, r3
 800b268:	4601      	mov	r1, r0
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fbbc 	bl	800b9e8 <__pow5mult>
 800b270:	9b05      	ldr	r3, [sp, #20]
 800b272:	2b01      	cmp	r3, #1
 800b274:	4606      	mov	r6, r0
 800b276:	dd76      	ble.n	800b366 <_dtoa_r+0x8de>
 800b278:	2300      	movs	r3, #0
 800b27a:	9306      	str	r3, [sp, #24]
 800b27c:	6933      	ldr	r3, [r6, #16]
 800b27e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b282:	6918      	ldr	r0, [r3, #16]
 800b284:	f000 faa4 	bl	800b7d0 <__hi0bits>
 800b288:	f1c0 0020 	rsb	r0, r0, #32
 800b28c:	9b04      	ldr	r3, [sp, #16]
 800b28e:	4418      	add	r0, r3
 800b290:	f010 001f 	ands.w	r0, r0, #31
 800b294:	f000 8086 	beq.w	800b3a4 <_dtoa_r+0x91c>
 800b298:	f1c0 0320 	rsb	r3, r0, #32
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	dd7f      	ble.n	800b3a0 <_dtoa_r+0x918>
 800b2a0:	f1c0 001c 	rsb	r0, r0, #28
 800b2a4:	9b04      	ldr	r3, [sp, #16]
 800b2a6:	4403      	add	r3, r0
 800b2a8:	4480      	add	r8, r0
 800b2aa:	4405      	add	r5, r0
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	f1b8 0f00 	cmp.w	r8, #0
 800b2b2:	dd05      	ble.n	800b2c0 <_dtoa_r+0x838>
 800b2b4:	4659      	mov	r1, fp
 800b2b6:	4642      	mov	r2, r8
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 fbef 	bl	800ba9c <__lshift>
 800b2be:	4683      	mov	fp, r0
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dd05      	ble.n	800b2d2 <_dtoa_r+0x84a>
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 fbe6 	bl	800ba9c <__lshift>
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d069      	beq.n	800b3ac <_dtoa_r+0x924>
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4658      	mov	r0, fp
 800b2dc:	f000 fc4a 	bl	800bb74 <__mcmp>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	da63      	bge.n	800b3ac <_dtoa_r+0x924>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4659      	mov	r1, fp
 800b2e8:	220a      	movs	r2, #10
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fa26 	bl	800b73c <__multadd>
 800b2f0:	9b08      	ldr	r3, [sp, #32]
 800b2f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2f6:	4683      	mov	fp, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 818f 	beq.w	800b61c <_dtoa_r+0xb94>
 800b2fe:	4639      	mov	r1, r7
 800b300:	2300      	movs	r3, #0
 800b302:	220a      	movs	r2, #10
 800b304:	4620      	mov	r0, r4
 800b306:	f000 fa19 	bl	800b73c <__multadd>
 800b30a:	f1b9 0f00 	cmp.w	r9, #0
 800b30e:	4607      	mov	r7, r0
 800b310:	f300 808e 	bgt.w	800b430 <_dtoa_r+0x9a8>
 800b314:	9b05      	ldr	r3, [sp, #20]
 800b316:	2b02      	cmp	r3, #2
 800b318:	dc50      	bgt.n	800b3bc <_dtoa_r+0x934>
 800b31a:	e089      	b.n	800b430 <_dtoa_r+0x9a8>
 800b31c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b31e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b322:	e75d      	b.n	800b1e0 <_dtoa_r+0x758>
 800b324:	9b01      	ldr	r3, [sp, #4]
 800b326:	1e5e      	subs	r6, r3, #1
 800b328:	9b06      	ldr	r3, [sp, #24]
 800b32a:	42b3      	cmp	r3, r6
 800b32c:	bfbf      	itttt	lt
 800b32e:	9b06      	ldrlt	r3, [sp, #24]
 800b330:	9606      	strlt	r6, [sp, #24]
 800b332:	1af2      	sublt	r2, r6, r3
 800b334:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b336:	bfb6      	itet	lt
 800b338:	189b      	addlt	r3, r3, r2
 800b33a:	1b9e      	subge	r6, r3, r6
 800b33c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b33e:	9b01      	ldr	r3, [sp, #4]
 800b340:	bfb8      	it	lt
 800b342:	2600      	movlt	r6, #0
 800b344:	2b00      	cmp	r3, #0
 800b346:	bfb5      	itete	lt
 800b348:	eba8 0503 	sublt.w	r5, r8, r3
 800b34c:	9b01      	ldrge	r3, [sp, #4]
 800b34e:	2300      	movlt	r3, #0
 800b350:	4645      	movge	r5, r8
 800b352:	e747      	b.n	800b1e4 <_dtoa_r+0x75c>
 800b354:	9e06      	ldr	r6, [sp, #24]
 800b356:	9f08      	ldr	r7, [sp, #32]
 800b358:	4645      	mov	r5, r8
 800b35a:	e74c      	b.n	800b1f6 <_dtoa_r+0x76e>
 800b35c:	9a06      	ldr	r2, [sp, #24]
 800b35e:	e775      	b.n	800b24c <_dtoa_r+0x7c4>
 800b360:	9b05      	ldr	r3, [sp, #20]
 800b362:	2b01      	cmp	r3, #1
 800b364:	dc18      	bgt.n	800b398 <_dtoa_r+0x910>
 800b366:	9b02      	ldr	r3, [sp, #8]
 800b368:	b9b3      	cbnz	r3, 800b398 <_dtoa_r+0x910>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b370:	b9a3      	cbnz	r3, 800b39c <_dtoa_r+0x914>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b378:	0d1b      	lsrs	r3, r3, #20
 800b37a:	051b      	lsls	r3, r3, #20
 800b37c:	b12b      	cbz	r3, 800b38a <_dtoa_r+0x902>
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	3301      	adds	r3, #1
 800b382:	9304      	str	r3, [sp, #16]
 800b384:	f108 0801 	add.w	r8, r8, #1
 800b388:	2301      	movs	r3, #1
 800b38a:	9306      	str	r3, [sp, #24]
 800b38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f47f af74 	bne.w	800b27c <_dtoa_r+0x7f4>
 800b394:	2001      	movs	r0, #1
 800b396:	e779      	b.n	800b28c <_dtoa_r+0x804>
 800b398:	2300      	movs	r3, #0
 800b39a:	e7f6      	b.n	800b38a <_dtoa_r+0x902>
 800b39c:	9b02      	ldr	r3, [sp, #8]
 800b39e:	e7f4      	b.n	800b38a <_dtoa_r+0x902>
 800b3a0:	d085      	beq.n	800b2ae <_dtoa_r+0x826>
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	301c      	adds	r0, #28
 800b3a6:	e77d      	b.n	800b2a4 <_dtoa_r+0x81c>
 800b3a8:	40240000 	.word	0x40240000
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	dc38      	bgt.n	800b424 <_dtoa_r+0x99c>
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	dd35      	ble.n	800b424 <_dtoa_r+0x99c>
 800b3b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b3bc:	f1b9 0f00 	cmp.w	r9, #0
 800b3c0:	d10d      	bne.n	800b3de <_dtoa_r+0x956>
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	464b      	mov	r3, r9
 800b3c6:	2205      	movs	r2, #5
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 f9b7 	bl	800b73c <__multadd>
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	4658      	mov	r0, fp
 800b3d4:	f000 fbce 	bl	800bb74 <__mcmp>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	f73f adbd 	bgt.w	800af58 <_dtoa_r+0x4d0>
 800b3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e0:	9d00      	ldr	r5, [sp, #0]
 800b3e2:	ea6f 0a03 	mvn.w	sl, r3
 800b3e6:	f04f 0800 	mov.w	r8, #0
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f000 f983 	bl	800b6f8 <_Bfree>
 800b3f2:	2f00      	cmp	r7, #0
 800b3f4:	f43f aeb4 	beq.w	800b160 <_dtoa_r+0x6d8>
 800b3f8:	f1b8 0f00 	cmp.w	r8, #0
 800b3fc:	d005      	beq.n	800b40a <_dtoa_r+0x982>
 800b3fe:	45b8      	cmp	r8, r7
 800b400:	d003      	beq.n	800b40a <_dtoa_r+0x982>
 800b402:	4641      	mov	r1, r8
 800b404:	4620      	mov	r0, r4
 800b406:	f000 f977 	bl	800b6f8 <_Bfree>
 800b40a:	4639      	mov	r1, r7
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 f973 	bl	800b6f8 <_Bfree>
 800b412:	e6a5      	b.n	800b160 <_dtoa_r+0x6d8>
 800b414:	2600      	movs	r6, #0
 800b416:	4637      	mov	r7, r6
 800b418:	e7e1      	b.n	800b3de <_dtoa_r+0x956>
 800b41a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b41c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b420:	4637      	mov	r7, r6
 800b422:	e599      	b.n	800af58 <_dtoa_r+0x4d0>
 800b424:	9b08      	ldr	r3, [sp, #32]
 800b426:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 80fd 	beq.w	800b62a <_dtoa_r+0xba2>
 800b430:	2d00      	cmp	r5, #0
 800b432:	dd05      	ble.n	800b440 <_dtoa_r+0x9b8>
 800b434:	4639      	mov	r1, r7
 800b436:	462a      	mov	r2, r5
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 fb2f 	bl	800ba9c <__lshift>
 800b43e:	4607      	mov	r7, r0
 800b440:	9b06      	ldr	r3, [sp, #24]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d05c      	beq.n	800b500 <_dtoa_r+0xa78>
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 f915 	bl	800b678 <_Balloc>
 800b44e:	4605      	mov	r5, r0
 800b450:	b928      	cbnz	r0, 800b45e <_dtoa_r+0x9d6>
 800b452:	4b80      	ldr	r3, [pc, #512]	; (800b654 <_dtoa_r+0xbcc>)
 800b454:	4602      	mov	r2, r0
 800b456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b45a:	f7ff bb2e 	b.w	800aaba <_dtoa_r+0x32>
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	3202      	adds	r2, #2
 800b462:	0092      	lsls	r2, r2, #2
 800b464:	f107 010c 	add.w	r1, r7, #12
 800b468:	300c      	adds	r0, #12
 800b46a:	f7fe fe01 	bl	800a070 <memcpy>
 800b46e:	2201      	movs	r2, #1
 800b470:	4629      	mov	r1, r5
 800b472:	4620      	mov	r0, r4
 800b474:	f000 fb12 	bl	800ba9c <__lshift>
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	9b00      	ldr	r3, [sp, #0]
 800b480:	444b      	add	r3, r9
 800b482:	9307      	str	r3, [sp, #28]
 800b484:	9b02      	ldr	r3, [sp, #8]
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	46b8      	mov	r8, r7
 800b48c:	9306      	str	r3, [sp, #24]
 800b48e:	4607      	mov	r7, r0
 800b490:	9b01      	ldr	r3, [sp, #4]
 800b492:	4631      	mov	r1, r6
 800b494:	3b01      	subs	r3, #1
 800b496:	4658      	mov	r0, fp
 800b498:	9302      	str	r3, [sp, #8]
 800b49a:	f7ff fa69 	bl	800a970 <quorem>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	3330      	adds	r3, #48	; 0x30
 800b4a2:	9004      	str	r0, [sp, #16]
 800b4a4:	4641      	mov	r1, r8
 800b4a6:	4658      	mov	r0, fp
 800b4a8:	9308      	str	r3, [sp, #32]
 800b4aa:	f000 fb63 	bl	800bb74 <__mcmp>
 800b4ae:	463a      	mov	r2, r7
 800b4b0:	4681      	mov	r9, r0
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fb79 	bl	800bbac <__mdiff>
 800b4ba:	68c2      	ldr	r2, [r0, #12]
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	4605      	mov	r5, r0
 800b4c0:	bb02      	cbnz	r2, 800b504 <_dtoa_r+0xa7c>
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	4658      	mov	r0, fp
 800b4c6:	f000 fb55 	bl	800bb74 <__mcmp>
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b4d6:	f000 f90f 	bl	800b6f8 <_Bfree>
 800b4da:	9b05      	ldr	r3, [sp, #20]
 800b4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4de:	9d01      	ldr	r5, [sp, #4]
 800b4e0:	ea43 0102 	orr.w	r1, r3, r2
 800b4e4:	9b06      	ldr	r3, [sp, #24]
 800b4e6:	430b      	orrs	r3, r1
 800b4e8:	9b08      	ldr	r3, [sp, #32]
 800b4ea:	d10d      	bne.n	800b508 <_dtoa_r+0xa80>
 800b4ec:	2b39      	cmp	r3, #57	; 0x39
 800b4ee:	d029      	beq.n	800b544 <_dtoa_r+0xabc>
 800b4f0:	f1b9 0f00 	cmp.w	r9, #0
 800b4f4:	dd01      	ble.n	800b4fa <_dtoa_r+0xa72>
 800b4f6:	9b04      	ldr	r3, [sp, #16]
 800b4f8:	3331      	adds	r3, #49	; 0x31
 800b4fa:	9a02      	ldr	r2, [sp, #8]
 800b4fc:	7013      	strb	r3, [r2, #0]
 800b4fe:	e774      	b.n	800b3ea <_dtoa_r+0x962>
 800b500:	4638      	mov	r0, r7
 800b502:	e7b9      	b.n	800b478 <_dtoa_r+0x9f0>
 800b504:	2201      	movs	r2, #1
 800b506:	e7e2      	b.n	800b4ce <_dtoa_r+0xa46>
 800b508:	f1b9 0f00 	cmp.w	r9, #0
 800b50c:	db06      	blt.n	800b51c <_dtoa_r+0xa94>
 800b50e:	9905      	ldr	r1, [sp, #20]
 800b510:	ea41 0909 	orr.w	r9, r1, r9
 800b514:	9906      	ldr	r1, [sp, #24]
 800b516:	ea59 0101 	orrs.w	r1, r9, r1
 800b51a:	d120      	bne.n	800b55e <_dtoa_r+0xad6>
 800b51c:	2a00      	cmp	r2, #0
 800b51e:	ddec      	ble.n	800b4fa <_dtoa_r+0xa72>
 800b520:	4659      	mov	r1, fp
 800b522:	2201      	movs	r2, #1
 800b524:	4620      	mov	r0, r4
 800b526:	9301      	str	r3, [sp, #4]
 800b528:	f000 fab8 	bl	800ba9c <__lshift>
 800b52c:	4631      	mov	r1, r6
 800b52e:	4683      	mov	fp, r0
 800b530:	f000 fb20 	bl	800bb74 <__mcmp>
 800b534:	2800      	cmp	r0, #0
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	dc02      	bgt.n	800b540 <_dtoa_r+0xab8>
 800b53a:	d1de      	bne.n	800b4fa <_dtoa_r+0xa72>
 800b53c:	07da      	lsls	r2, r3, #31
 800b53e:	d5dc      	bpl.n	800b4fa <_dtoa_r+0xa72>
 800b540:	2b39      	cmp	r3, #57	; 0x39
 800b542:	d1d8      	bne.n	800b4f6 <_dtoa_r+0xa6e>
 800b544:	9a02      	ldr	r2, [sp, #8]
 800b546:	2339      	movs	r3, #57	; 0x39
 800b548:	7013      	strb	r3, [r2, #0]
 800b54a:	462b      	mov	r3, r5
 800b54c:	461d      	mov	r5, r3
 800b54e:	3b01      	subs	r3, #1
 800b550:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b554:	2a39      	cmp	r2, #57	; 0x39
 800b556:	d050      	beq.n	800b5fa <_dtoa_r+0xb72>
 800b558:	3201      	adds	r2, #1
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	e745      	b.n	800b3ea <_dtoa_r+0x962>
 800b55e:	2a00      	cmp	r2, #0
 800b560:	dd03      	ble.n	800b56a <_dtoa_r+0xae2>
 800b562:	2b39      	cmp	r3, #57	; 0x39
 800b564:	d0ee      	beq.n	800b544 <_dtoa_r+0xabc>
 800b566:	3301      	adds	r3, #1
 800b568:	e7c7      	b.n	800b4fa <_dtoa_r+0xa72>
 800b56a:	9a01      	ldr	r2, [sp, #4]
 800b56c:	9907      	ldr	r1, [sp, #28]
 800b56e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b572:	428a      	cmp	r2, r1
 800b574:	d02a      	beq.n	800b5cc <_dtoa_r+0xb44>
 800b576:	4659      	mov	r1, fp
 800b578:	2300      	movs	r3, #0
 800b57a:	220a      	movs	r2, #10
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 f8dd 	bl	800b73c <__multadd>
 800b582:	45b8      	cmp	r8, r7
 800b584:	4683      	mov	fp, r0
 800b586:	f04f 0300 	mov.w	r3, #0
 800b58a:	f04f 020a 	mov.w	r2, #10
 800b58e:	4641      	mov	r1, r8
 800b590:	4620      	mov	r0, r4
 800b592:	d107      	bne.n	800b5a4 <_dtoa_r+0xb1c>
 800b594:	f000 f8d2 	bl	800b73c <__multadd>
 800b598:	4680      	mov	r8, r0
 800b59a:	4607      	mov	r7, r0
 800b59c:	9b01      	ldr	r3, [sp, #4]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	e775      	b.n	800b490 <_dtoa_r+0xa08>
 800b5a4:	f000 f8ca 	bl	800b73c <__multadd>
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	4680      	mov	r8, r0
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	220a      	movs	r2, #10
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 f8c3 	bl	800b73c <__multadd>
 800b5b6:	4607      	mov	r7, r0
 800b5b8:	e7f0      	b.n	800b59c <_dtoa_r+0xb14>
 800b5ba:	f1b9 0f00 	cmp.w	r9, #0
 800b5be:	9a00      	ldr	r2, [sp, #0]
 800b5c0:	bfcc      	ite	gt
 800b5c2:	464d      	movgt	r5, r9
 800b5c4:	2501      	movle	r5, #1
 800b5c6:	4415      	add	r5, r2
 800b5c8:	f04f 0800 	mov.w	r8, #0
 800b5cc:	4659      	mov	r1, fp
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	f000 fa62 	bl	800ba9c <__lshift>
 800b5d8:	4631      	mov	r1, r6
 800b5da:	4683      	mov	fp, r0
 800b5dc:	f000 faca 	bl	800bb74 <__mcmp>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	dcb2      	bgt.n	800b54a <_dtoa_r+0xac2>
 800b5e4:	d102      	bne.n	800b5ec <_dtoa_r+0xb64>
 800b5e6:	9b01      	ldr	r3, [sp, #4]
 800b5e8:	07db      	lsls	r3, r3, #31
 800b5ea:	d4ae      	bmi.n	800b54a <_dtoa_r+0xac2>
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5f4:	2a30      	cmp	r2, #48	; 0x30
 800b5f6:	d0fa      	beq.n	800b5ee <_dtoa_r+0xb66>
 800b5f8:	e6f7      	b.n	800b3ea <_dtoa_r+0x962>
 800b5fa:	9a00      	ldr	r2, [sp, #0]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d1a5      	bne.n	800b54c <_dtoa_r+0xac4>
 800b600:	f10a 0a01 	add.w	sl, sl, #1
 800b604:	2331      	movs	r3, #49	; 0x31
 800b606:	e779      	b.n	800b4fc <_dtoa_r+0xa74>
 800b608:	4b13      	ldr	r3, [pc, #76]	; (800b658 <_dtoa_r+0xbd0>)
 800b60a:	f7ff baaf 	b.w	800ab6c <_dtoa_r+0xe4>
 800b60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b610:	2b00      	cmp	r3, #0
 800b612:	f47f aa86 	bne.w	800ab22 <_dtoa_r+0x9a>
 800b616:	4b11      	ldr	r3, [pc, #68]	; (800b65c <_dtoa_r+0xbd4>)
 800b618:	f7ff baa8 	b.w	800ab6c <_dtoa_r+0xe4>
 800b61c:	f1b9 0f00 	cmp.w	r9, #0
 800b620:	dc03      	bgt.n	800b62a <_dtoa_r+0xba2>
 800b622:	9b05      	ldr	r3, [sp, #20]
 800b624:	2b02      	cmp	r3, #2
 800b626:	f73f aec9 	bgt.w	800b3bc <_dtoa_r+0x934>
 800b62a:	9d00      	ldr	r5, [sp, #0]
 800b62c:	4631      	mov	r1, r6
 800b62e:	4658      	mov	r0, fp
 800b630:	f7ff f99e 	bl	800a970 <quorem>
 800b634:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b638:	f805 3b01 	strb.w	r3, [r5], #1
 800b63c:	9a00      	ldr	r2, [sp, #0]
 800b63e:	1aaa      	subs	r2, r5, r2
 800b640:	4591      	cmp	r9, r2
 800b642:	ddba      	ble.n	800b5ba <_dtoa_r+0xb32>
 800b644:	4659      	mov	r1, fp
 800b646:	2300      	movs	r3, #0
 800b648:	220a      	movs	r2, #10
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 f876 	bl	800b73c <__multadd>
 800b650:	4683      	mov	fp, r0
 800b652:	e7eb      	b.n	800b62c <_dtoa_r+0xba4>
 800b654:	0800cf03 	.word	0x0800cf03
 800b658:	0800ce5c 	.word	0x0800ce5c
 800b65c:	0800ce80 	.word	0x0800ce80

0800b660 <_localeconv_r>:
 800b660:	4800      	ldr	r0, [pc, #0]	; (800b664 <_localeconv_r+0x4>)
 800b662:	4770      	bx	lr
 800b664:	20000180 	.word	0x20000180

0800b668 <malloc>:
 800b668:	4b02      	ldr	r3, [pc, #8]	; (800b674 <malloc+0xc>)
 800b66a:	4601      	mov	r1, r0
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	f000 bbe1 	b.w	800be34 <_malloc_r>
 800b672:	bf00      	nop
 800b674:	2000002c 	.word	0x2000002c

0800b678 <_Balloc>:
 800b678:	b570      	push	{r4, r5, r6, lr}
 800b67a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b67c:	4604      	mov	r4, r0
 800b67e:	460d      	mov	r5, r1
 800b680:	b976      	cbnz	r6, 800b6a0 <_Balloc+0x28>
 800b682:	2010      	movs	r0, #16
 800b684:	f7ff fff0 	bl	800b668 <malloc>
 800b688:	4602      	mov	r2, r0
 800b68a:	6260      	str	r0, [r4, #36]	; 0x24
 800b68c:	b920      	cbnz	r0, 800b698 <_Balloc+0x20>
 800b68e:	4b18      	ldr	r3, [pc, #96]	; (800b6f0 <_Balloc+0x78>)
 800b690:	4818      	ldr	r0, [pc, #96]	; (800b6f4 <_Balloc+0x7c>)
 800b692:	2166      	movs	r1, #102	; 0x66
 800b694:	f000 fc38 	bl	800bf08 <__assert_func>
 800b698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b69c:	6006      	str	r6, [r0, #0]
 800b69e:	60c6      	str	r6, [r0, #12]
 800b6a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6a2:	68f3      	ldr	r3, [r6, #12]
 800b6a4:	b183      	cbz	r3, 800b6c8 <_Balloc+0x50>
 800b6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ae:	b9b8      	cbnz	r0, 800b6e0 <_Balloc+0x68>
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b6b6:	1d72      	adds	r2, r6, #5
 800b6b8:	0092      	lsls	r2, r2, #2
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 fb5a 	bl	800bd74 <_calloc_r>
 800b6c0:	b160      	cbz	r0, 800b6dc <_Balloc+0x64>
 800b6c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6c6:	e00e      	b.n	800b6e6 <_Balloc+0x6e>
 800b6c8:	2221      	movs	r2, #33	; 0x21
 800b6ca:	2104      	movs	r1, #4
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f000 fb51 	bl	800bd74 <_calloc_r>
 800b6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6d4:	60f0      	str	r0, [r6, #12]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e4      	bne.n	800b6a6 <_Balloc+0x2e>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	6802      	ldr	r2, [r0, #0]
 800b6e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6ec:	e7f7      	b.n	800b6de <_Balloc+0x66>
 800b6ee:	bf00      	nop
 800b6f0:	0800ce8d 	.word	0x0800ce8d
 800b6f4:	0800cf14 	.word	0x0800cf14

0800b6f8 <_Bfree>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	460c      	mov	r4, r1
 800b700:	b976      	cbnz	r6, 800b720 <_Bfree+0x28>
 800b702:	2010      	movs	r0, #16
 800b704:	f7ff ffb0 	bl	800b668 <malloc>
 800b708:	4602      	mov	r2, r0
 800b70a:	6268      	str	r0, [r5, #36]	; 0x24
 800b70c:	b920      	cbnz	r0, 800b718 <_Bfree+0x20>
 800b70e:	4b09      	ldr	r3, [pc, #36]	; (800b734 <_Bfree+0x3c>)
 800b710:	4809      	ldr	r0, [pc, #36]	; (800b738 <_Bfree+0x40>)
 800b712:	218a      	movs	r1, #138	; 0x8a
 800b714:	f000 fbf8 	bl	800bf08 <__assert_func>
 800b718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b71c:	6006      	str	r6, [r0, #0]
 800b71e:	60c6      	str	r6, [r0, #12]
 800b720:	b13c      	cbz	r4, 800b732 <_Bfree+0x3a>
 800b722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b724:	6862      	ldr	r2, [r4, #4]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b72c:	6021      	str	r1, [r4, #0]
 800b72e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	0800ce8d 	.word	0x0800ce8d
 800b738:	0800cf14 	.word	0x0800cf14

0800b73c <__multadd>:
 800b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b740:	690e      	ldr	r6, [r1, #16]
 800b742:	4607      	mov	r7, r0
 800b744:	4698      	mov	r8, r3
 800b746:	460c      	mov	r4, r1
 800b748:	f101 0014 	add.w	r0, r1, #20
 800b74c:	2300      	movs	r3, #0
 800b74e:	6805      	ldr	r5, [r0, #0]
 800b750:	b2a9      	uxth	r1, r5
 800b752:	fb02 8101 	mla	r1, r2, r1, r8
 800b756:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b75a:	0c2d      	lsrs	r5, r5, #16
 800b75c:	fb02 c505 	mla	r5, r2, r5, ip
 800b760:	b289      	uxth	r1, r1
 800b762:	3301      	adds	r3, #1
 800b764:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b768:	429e      	cmp	r6, r3
 800b76a:	f840 1b04 	str.w	r1, [r0], #4
 800b76e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b772:	dcec      	bgt.n	800b74e <__multadd+0x12>
 800b774:	f1b8 0f00 	cmp.w	r8, #0
 800b778:	d022      	beq.n	800b7c0 <__multadd+0x84>
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	42b3      	cmp	r3, r6
 800b77e:	dc19      	bgt.n	800b7b4 <__multadd+0x78>
 800b780:	6861      	ldr	r1, [r4, #4]
 800b782:	4638      	mov	r0, r7
 800b784:	3101      	adds	r1, #1
 800b786:	f7ff ff77 	bl	800b678 <_Balloc>
 800b78a:	4605      	mov	r5, r0
 800b78c:	b928      	cbnz	r0, 800b79a <__multadd+0x5e>
 800b78e:	4602      	mov	r2, r0
 800b790:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <__multadd+0x8c>)
 800b792:	480e      	ldr	r0, [pc, #56]	; (800b7cc <__multadd+0x90>)
 800b794:	21b5      	movs	r1, #181	; 0xb5
 800b796:	f000 fbb7 	bl	800bf08 <__assert_func>
 800b79a:	6922      	ldr	r2, [r4, #16]
 800b79c:	3202      	adds	r2, #2
 800b79e:	f104 010c 	add.w	r1, r4, #12
 800b7a2:	0092      	lsls	r2, r2, #2
 800b7a4:	300c      	adds	r0, #12
 800b7a6:	f7fe fc63 	bl	800a070 <memcpy>
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	f7ff ffa3 	bl	800b6f8 <_Bfree>
 800b7b2:	462c      	mov	r4, r5
 800b7b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b7b8:	3601      	adds	r6, #1
 800b7ba:	f8c3 8014 	str.w	r8, [r3, #20]
 800b7be:	6126      	str	r6, [r4, #16]
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0800cf03 	.word	0x0800cf03
 800b7cc:	0800cf14 	.word	0x0800cf14

0800b7d0 <__hi0bits>:
 800b7d0:	0c03      	lsrs	r3, r0, #16
 800b7d2:	041b      	lsls	r3, r3, #16
 800b7d4:	b9d3      	cbnz	r3, 800b80c <__hi0bits+0x3c>
 800b7d6:	0400      	lsls	r0, r0, #16
 800b7d8:	2310      	movs	r3, #16
 800b7da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7de:	bf04      	itt	eq
 800b7e0:	0200      	lsleq	r0, r0, #8
 800b7e2:	3308      	addeq	r3, #8
 800b7e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7e8:	bf04      	itt	eq
 800b7ea:	0100      	lsleq	r0, r0, #4
 800b7ec:	3304      	addeq	r3, #4
 800b7ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7f2:	bf04      	itt	eq
 800b7f4:	0080      	lsleq	r0, r0, #2
 800b7f6:	3302      	addeq	r3, #2
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	db05      	blt.n	800b808 <__hi0bits+0x38>
 800b7fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b800:	f103 0301 	add.w	r3, r3, #1
 800b804:	bf08      	it	eq
 800b806:	2320      	moveq	r3, #32
 800b808:	4618      	mov	r0, r3
 800b80a:	4770      	bx	lr
 800b80c:	2300      	movs	r3, #0
 800b80e:	e7e4      	b.n	800b7da <__hi0bits+0xa>

0800b810 <__lo0bits>:
 800b810:	6803      	ldr	r3, [r0, #0]
 800b812:	f013 0207 	ands.w	r2, r3, #7
 800b816:	4601      	mov	r1, r0
 800b818:	d00b      	beq.n	800b832 <__lo0bits+0x22>
 800b81a:	07da      	lsls	r2, r3, #31
 800b81c:	d424      	bmi.n	800b868 <__lo0bits+0x58>
 800b81e:	0798      	lsls	r0, r3, #30
 800b820:	bf49      	itett	mi
 800b822:	085b      	lsrmi	r3, r3, #1
 800b824:	089b      	lsrpl	r3, r3, #2
 800b826:	2001      	movmi	r0, #1
 800b828:	600b      	strmi	r3, [r1, #0]
 800b82a:	bf5c      	itt	pl
 800b82c:	600b      	strpl	r3, [r1, #0]
 800b82e:	2002      	movpl	r0, #2
 800b830:	4770      	bx	lr
 800b832:	b298      	uxth	r0, r3
 800b834:	b9b0      	cbnz	r0, 800b864 <__lo0bits+0x54>
 800b836:	0c1b      	lsrs	r3, r3, #16
 800b838:	2010      	movs	r0, #16
 800b83a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b83e:	bf04      	itt	eq
 800b840:	0a1b      	lsreq	r3, r3, #8
 800b842:	3008      	addeq	r0, #8
 800b844:	071a      	lsls	r2, r3, #28
 800b846:	bf04      	itt	eq
 800b848:	091b      	lsreq	r3, r3, #4
 800b84a:	3004      	addeq	r0, #4
 800b84c:	079a      	lsls	r2, r3, #30
 800b84e:	bf04      	itt	eq
 800b850:	089b      	lsreq	r3, r3, #2
 800b852:	3002      	addeq	r0, #2
 800b854:	07da      	lsls	r2, r3, #31
 800b856:	d403      	bmi.n	800b860 <__lo0bits+0x50>
 800b858:	085b      	lsrs	r3, r3, #1
 800b85a:	f100 0001 	add.w	r0, r0, #1
 800b85e:	d005      	beq.n	800b86c <__lo0bits+0x5c>
 800b860:	600b      	str	r3, [r1, #0]
 800b862:	4770      	bx	lr
 800b864:	4610      	mov	r0, r2
 800b866:	e7e8      	b.n	800b83a <__lo0bits+0x2a>
 800b868:	2000      	movs	r0, #0
 800b86a:	4770      	bx	lr
 800b86c:	2020      	movs	r0, #32
 800b86e:	4770      	bx	lr

0800b870 <__i2b>:
 800b870:	b510      	push	{r4, lr}
 800b872:	460c      	mov	r4, r1
 800b874:	2101      	movs	r1, #1
 800b876:	f7ff feff 	bl	800b678 <_Balloc>
 800b87a:	4602      	mov	r2, r0
 800b87c:	b928      	cbnz	r0, 800b88a <__i2b+0x1a>
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <__i2b+0x24>)
 800b880:	4805      	ldr	r0, [pc, #20]	; (800b898 <__i2b+0x28>)
 800b882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b886:	f000 fb3f 	bl	800bf08 <__assert_func>
 800b88a:	2301      	movs	r3, #1
 800b88c:	6144      	str	r4, [r0, #20]
 800b88e:	6103      	str	r3, [r0, #16]
 800b890:	bd10      	pop	{r4, pc}
 800b892:	bf00      	nop
 800b894:	0800cf03 	.word	0x0800cf03
 800b898:	0800cf14 	.word	0x0800cf14

0800b89c <__multiply>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	4614      	mov	r4, r2
 800b8a2:	690a      	ldr	r2, [r1, #16]
 800b8a4:	6923      	ldr	r3, [r4, #16]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	bfb8      	it	lt
 800b8aa:	460b      	movlt	r3, r1
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	bfbc      	itt	lt
 800b8b0:	4625      	movlt	r5, r4
 800b8b2:	461c      	movlt	r4, r3
 800b8b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b8b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b8bc:	68ab      	ldr	r3, [r5, #8]
 800b8be:	6869      	ldr	r1, [r5, #4]
 800b8c0:	eb0a 0709 	add.w	r7, sl, r9
 800b8c4:	42bb      	cmp	r3, r7
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	bfb8      	it	lt
 800b8ca:	3101      	addlt	r1, #1
 800b8cc:	f7ff fed4 	bl	800b678 <_Balloc>
 800b8d0:	b930      	cbnz	r0, 800b8e0 <__multiply+0x44>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	4b42      	ldr	r3, [pc, #264]	; (800b9e0 <__multiply+0x144>)
 800b8d6:	4843      	ldr	r0, [pc, #268]	; (800b9e4 <__multiply+0x148>)
 800b8d8:	f240 115d 	movw	r1, #349	; 0x15d
 800b8dc:	f000 fb14 	bl	800bf08 <__assert_func>
 800b8e0:	f100 0614 	add.w	r6, r0, #20
 800b8e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b8e8:	4633      	mov	r3, r6
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	4543      	cmp	r3, r8
 800b8ee:	d31e      	bcc.n	800b92e <__multiply+0x92>
 800b8f0:	f105 0c14 	add.w	ip, r5, #20
 800b8f4:	f104 0314 	add.w	r3, r4, #20
 800b8f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b8fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b900:	9202      	str	r2, [sp, #8]
 800b902:	ebac 0205 	sub.w	r2, ip, r5
 800b906:	3a15      	subs	r2, #21
 800b908:	f022 0203 	bic.w	r2, r2, #3
 800b90c:	3204      	adds	r2, #4
 800b90e:	f105 0115 	add.w	r1, r5, #21
 800b912:	458c      	cmp	ip, r1
 800b914:	bf38      	it	cc
 800b916:	2204      	movcc	r2, #4
 800b918:	9201      	str	r2, [sp, #4]
 800b91a:	9a02      	ldr	r2, [sp, #8]
 800b91c:	9303      	str	r3, [sp, #12]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d808      	bhi.n	800b934 <__multiply+0x98>
 800b922:	2f00      	cmp	r7, #0
 800b924:	dc55      	bgt.n	800b9d2 <__multiply+0x136>
 800b926:	6107      	str	r7, [r0, #16]
 800b928:	b005      	add	sp, #20
 800b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92e:	f843 2b04 	str.w	r2, [r3], #4
 800b932:	e7db      	b.n	800b8ec <__multiply+0x50>
 800b934:	f8b3 a000 	ldrh.w	sl, [r3]
 800b938:	f1ba 0f00 	cmp.w	sl, #0
 800b93c:	d020      	beq.n	800b980 <__multiply+0xe4>
 800b93e:	f105 0e14 	add.w	lr, r5, #20
 800b942:	46b1      	mov	r9, r6
 800b944:	2200      	movs	r2, #0
 800b946:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b94a:	f8d9 b000 	ldr.w	fp, [r9]
 800b94e:	b2a1      	uxth	r1, r4
 800b950:	fa1f fb8b 	uxth.w	fp, fp
 800b954:	fb0a b101 	mla	r1, sl, r1, fp
 800b958:	4411      	add	r1, r2
 800b95a:	f8d9 2000 	ldr.w	r2, [r9]
 800b95e:	0c24      	lsrs	r4, r4, #16
 800b960:	0c12      	lsrs	r2, r2, #16
 800b962:	fb0a 2404 	mla	r4, sl, r4, r2
 800b966:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b96a:	b289      	uxth	r1, r1
 800b96c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b970:	45f4      	cmp	ip, lr
 800b972:	f849 1b04 	str.w	r1, [r9], #4
 800b976:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b97a:	d8e4      	bhi.n	800b946 <__multiply+0xaa>
 800b97c:	9901      	ldr	r1, [sp, #4]
 800b97e:	5072      	str	r2, [r6, r1]
 800b980:	9a03      	ldr	r2, [sp, #12]
 800b982:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b986:	3304      	adds	r3, #4
 800b988:	f1b9 0f00 	cmp.w	r9, #0
 800b98c:	d01f      	beq.n	800b9ce <__multiply+0x132>
 800b98e:	6834      	ldr	r4, [r6, #0]
 800b990:	f105 0114 	add.w	r1, r5, #20
 800b994:	46b6      	mov	lr, r6
 800b996:	f04f 0a00 	mov.w	sl, #0
 800b99a:	880a      	ldrh	r2, [r1, #0]
 800b99c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b9a0:	fb09 b202 	mla	r2, r9, r2, fp
 800b9a4:	4492      	add	sl, r2
 800b9a6:	b2a4      	uxth	r4, r4
 800b9a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b9ac:	f84e 4b04 	str.w	r4, [lr], #4
 800b9b0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b9b4:	f8be 2000 	ldrh.w	r2, [lr]
 800b9b8:	0c24      	lsrs	r4, r4, #16
 800b9ba:	fb09 2404 	mla	r4, r9, r4, r2
 800b9be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b9c2:	458c      	cmp	ip, r1
 800b9c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b9c8:	d8e7      	bhi.n	800b99a <__multiply+0xfe>
 800b9ca:	9a01      	ldr	r2, [sp, #4]
 800b9cc:	50b4      	str	r4, [r6, r2]
 800b9ce:	3604      	adds	r6, #4
 800b9d0:	e7a3      	b.n	800b91a <__multiply+0x7e>
 800b9d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1a5      	bne.n	800b926 <__multiply+0x8a>
 800b9da:	3f01      	subs	r7, #1
 800b9dc:	e7a1      	b.n	800b922 <__multiply+0x86>
 800b9de:	bf00      	nop
 800b9e0:	0800cf03 	.word	0x0800cf03
 800b9e4:	0800cf14 	.word	0x0800cf14

0800b9e8 <__pow5mult>:
 800b9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9ec:	4615      	mov	r5, r2
 800b9ee:	f012 0203 	ands.w	r2, r2, #3
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460f      	mov	r7, r1
 800b9f6:	d007      	beq.n	800ba08 <__pow5mult+0x20>
 800b9f8:	4c25      	ldr	r4, [pc, #148]	; (800ba90 <__pow5mult+0xa8>)
 800b9fa:	3a01      	subs	r2, #1
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba02:	f7ff fe9b 	bl	800b73c <__multadd>
 800ba06:	4607      	mov	r7, r0
 800ba08:	10ad      	asrs	r5, r5, #2
 800ba0a:	d03d      	beq.n	800ba88 <__pow5mult+0xa0>
 800ba0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba0e:	b97c      	cbnz	r4, 800ba30 <__pow5mult+0x48>
 800ba10:	2010      	movs	r0, #16
 800ba12:	f7ff fe29 	bl	800b668 <malloc>
 800ba16:	4602      	mov	r2, r0
 800ba18:	6270      	str	r0, [r6, #36]	; 0x24
 800ba1a:	b928      	cbnz	r0, 800ba28 <__pow5mult+0x40>
 800ba1c:	4b1d      	ldr	r3, [pc, #116]	; (800ba94 <__pow5mult+0xac>)
 800ba1e:	481e      	ldr	r0, [pc, #120]	; (800ba98 <__pow5mult+0xb0>)
 800ba20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba24:	f000 fa70 	bl	800bf08 <__assert_func>
 800ba28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba2c:	6004      	str	r4, [r0, #0]
 800ba2e:	60c4      	str	r4, [r0, #12]
 800ba30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba38:	b94c      	cbnz	r4, 800ba4e <__pow5mult+0x66>
 800ba3a:	f240 2171 	movw	r1, #625	; 0x271
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7ff ff16 	bl	800b870 <__i2b>
 800ba44:	2300      	movs	r3, #0
 800ba46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	f04f 0900 	mov.w	r9, #0
 800ba52:	07eb      	lsls	r3, r5, #31
 800ba54:	d50a      	bpl.n	800ba6c <__pow5mult+0x84>
 800ba56:	4639      	mov	r1, r7
 800ba58:	4622      	mov	r2, r4
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ff1e 	bl	800b89c <__multiply>
 800ba60:	4639      	mov	r1, r7
 800ba62:	4680      	mov	r8, r0
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7ff fe47 	bl	800b6f8 <_Bfree>
 800ba6a:	4647      	mov	r7, r8
 800ba6c:	106d      	asrs	r5, r5, #1
 800ba6e:	d00b      	beq.n	800ba88 <__pow5mult+0xa0>
 800ba70:	6820      	ldr	r0, [r4, #0]
 800ba72:	b938      	cbnz	r0, 800ba84 <__pow5mult+0x9c>
 800ba74:	4622      	mov	r2, r4
 800ba76:	4621      	mov	r1, r4
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f7ff ff0f 	bl	800b89c <__multiply>
 800ba7e:	6020      	str	r0, [r4, #0]
 800ba80:	f8c0 9000 	str.w	r9, [r0]
 800ba84:	4604      	mov	r4, r0
 800ba86:	e7e4      	b.n	800ba52 <__pow5mult+0x6a>
 800ba88:	4638      	mov	r0, r7
 800ba8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba8e:	bf00      	nop
 800ba90:	0800d068 	.word	0x0800d068
 800ba94:	0800ce8d 	.word	0x0800ce8d
 800ba98:	0800cf14 	.word	0x0800cf14

0800ba9c <__lshift>:
 800ba9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa0:	460c      	mov	r4, r1
 800baa2:	6849      	ldr	r1, [r1, #4]
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baaa:	68a3      	ldr	r3, [r4, #8]
 800baac:	4607      	mov	r7, r0
 800baae:	4691      	mov	r9, r2
 800bab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bab4:	f108 0601 	add.w	r6, r8, #1
 800bab8:	42b3      	cmp	r3, r6
 800baba:	db0b      	blt.n	800bad4 <__lshift+0x38>
 800babc:	4638      	mov	r0, r7
 800babe:	f7ff fddb 	bl	800b678 <_Balloc>
 800bac2:	4605      	mov	r5, r0
 800bac4:	b948      	cbnz	r0, 800bada <__lshift+0x3e>
 800bac6:	4602      	mov	r2, r0
 800bac8:	4b28      	ldr	r3, [pc, #160]	; (800bb6c <__lshift+0xd0>)
 800baca:	4829      	ldr	r0, [pc, #164]	; (800bb70 <__lshift+0xd4>)
 800bacc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bad0:	f000 fa1a 	bl	800bf08 <__assert_func>
 800bad4:	3101      	adds	r1, #1
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	e7ee      	b.n	800bab8 <__lshift+0x1c>
 800bada:	2300      	movs	r3, #0
 800badc:	f100 0114 	add.w	r1, r0, #20
 800bae0:	f100 0210 	add.w	r2, r0, #16
 800bae4:	4618      	mov	r0, r3
 800bae6:	4553      	cmp	r3, sl
 800bae8:	db33      	blt.n	800bb52 <__lshift+0xb6>
 800baea:	6920      	ldr	r0, [r4, #16]
 800baec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baf0:	f104 0314 	add.w	r3, r4, #20
 800baf4:	f019 091f 	ands.w	r9, r9, #31
 800baf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bafc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb00:	d02b      	beq.n	800bb5a <__lshift+0xbe>
 800bb02:	f1c9 0e20 	rsb	lr, r9, #32
 800bb06:	468a      	mov	sl, r1
 800bb08:	2200      	movs	r2, #0
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	fa00 f009 	lsl.w	r0, r0, r9
 800bb10:	4302      	orrs	r2, r0
 800bb12:	f84a 2b04 	str.w	r2, [sl], #4
 800bb16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb1a:	459c      	cmp	ip, r3
 800bb1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb20:	d8f3      	bhi.n	800bb0a <__lshift+0x6e>
 800bb22:	ebac 0304 	sub.w	r3, ip, r4
 800bb26:	3b15      	subs	r3, #21
 800bb28:	f023 0303 	bic.w	r3, r3, #3
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	f104 0015 	add.w	r0, r4, #21
 800bb32:	4584      	cmp	ip, r0
 800bb34:	bf38      	it	cc
 800bb36:	2304      	movcc	r3, #4
 800bb38:	50ca      	str	r2, [r1, r3]
 800bb3a:	b10a      	cbz	r2, 800bb40 <__lshift+0xa4>
 800bb3c:	f108 0602 	add.w	r6, r8, #2
 800bb40:	3e01      	subs	r6, #1
 800bb42:	4638      	mov	r0, r7
 800bb44:	612e      	str	r6, [r5, #16]
 800bb46:	4621      	mov	r1, r4
 800bb48:	f7ff fdd6 	bl	800b6f8 <_Bfree>
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb52:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb56:	3301      	adds	r3, #1
 800bb58:	e7c5      	b.n	800bae6 <__lshift+0x4a>
 800bb5a:	3904      	subs	r1, #4
 800bb5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb60:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb64:	459c      	cmp	ip, r3
 800bb66:	d8f9      	bhi.n	800bb5c <__lshift+0xc0>
 800bb68:	e7ea      	b.n	800bb40 <__lshift+0xa4>
 800bb6a:	bf00      	nop
 800bb6c:	0800cf03 	.word	0x0800cf03
 800bb70:	0800cf14 	.word	0x0800cf14

0800bb74 <__mcmp>:
 800bb74:	b530      	push	{r4, r5, lr}
 800bb76:	6902      	ldr	r2, [r0, #16]
 800bb78:	690c      	ldr	r4, [r1, #16]
 800bb7a:	1b12      	subs	r2, r2, r4
 800bb7c:	d10e      	bne.n	800bb9c <__mcmp+0x28>
 800bb7e:	f100 0314 	add.w	r3, r0, #20
 800bb82:	3114      	adds	r1, #20
 800bb84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb94:	42a5      	cmp	r5, r4
 800bb96:	d003      	beq.n	800bba0 <__mcmp+0x2c>
 800bb98:	d305      	bcc.n	800bba6 <__mcmp+0x32>
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	bd30      	pop	{r4, r5, pc}
 800bba0:	4283      	cmp	r3, r0
 800bba2:	d3f3      	bcc.n	800bb8c <__mcmp+0x18>
 800bba4:	e7fa      	b.n	800bb9c <__mcmp+0x28>
 800bba6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbaa:	e7f7      	b.n	800bb9c <__mcmp+0x28>

0800bbac <__mdiff>:
 800bbac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4617      	mov	r7, r2
 800bbba:	f7ff ffdb 	bl	800bb74 <__mcmp>
 800bbbe:	1e05      	subs	r5, r0, #0
 800bbc0:	d110      	bne.n	800bbe4 <__mdiff+0x38>
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	f7ff fd57 	bl	800b678 <_Balloc>
 800bbca:	b930      	cbnz	r0, 800bbda <__mdiff+0x2e>
 800bbcc:	4b39      	ldr	r3, [pc, #228]	; (800bcb4 <__mdiff+0x108>)
 800bbce:	4602      	mov	r2, r0
 800bbd0:	f240 2132 	movw	r1, #562	; 0x232
 800bbd4:	4838      	ldr	r0, [pc, #224]	; (800bcb8 <__mdiff+0x10c>)
 800bbd6:	f000 f997 	bl	800bf08 <__assert_func>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe4:	bfa4      	itt	ge
 800bbe6:	463b      	movge	r3, r7
 800bbe8:	4627      	movge	r7, r4
 800bbea:	4630      	mov	r0, r6
 800bbec:	6879      	ldr	r1, [r7, #4]
 800bbee:	bfa6      	itte	ge
 800bbf0:	461c      	movge	r4, r3
 800bbf2:	2500      	movge	r5, #0
 800bbf4:	2501      	movlt	r5, #1
 800bbf6:	f7ff fd3f 	bl	800b678 <_Balloc>
 800bbfa:	b920      	cbnz	r0, 800bc06 <__mdiff+0x5a>
 800bbfc:	4b2d      	ldr	r3, [pc, #180]	; (800bcb4 <__mdiff+0x108>)
 800bbfe:	4602      	mov	r2, r0
 800bc00:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc04:	e7e6      	b.n	800bbd4 <__mdiff+0x28>
 800bc06:	693e      	ldr	r6, [r7, #16]
 800bc08:	60c5      	str	r5, [r0, #12]
 800bc0a:	6925      	ldr	r5, [r4, #16]
 800bc0c:	f107 0114 	add.w	r1, r7, #20
 800bc10:	f104 0914 	add.w	r9, r4, #20
 800bc14:	f100 0e14 	add.w	lr, r0, #20
 800bc18:	f107 0210 	add.w	r2, r7, #16
 800bc1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bc20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bc24:	46f2      	mov	sl, lr
 800bc26:	2700      	movs	r7, #0
 800bc28:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc30:	fa1f f883 	uxth.w	r8, r3
 800bc34:	fa17 f78b 	uxtah	r7, r7, fp
 800bc38:	0c1b      	lsrs	r3, r3, #16
 800bc3a:	eba7 0808 	sub.w	r8, r7, r8
 800bc3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc46:	fa1f f888 	uxth.w	r8, r8
 800bc4a:	141f      	asrs	r7, r3, #16
 800bc4c:	454d      	cmp	r5, r9
 800bc4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc52:	f84a 3b04 	str.w	r3, [sl], #4
 800bc56:	d8e7      	bhi.n	800bc28 <__mdiff+0x7c>
 800bc58:	1b2b      	subs	r3, r5, r4
 800bc5a:	3b15      	subs	r3, #21
 800bc5c:	f023 0303 	bic.w	r3, r3, #3
 800bc60:	3304      	adds	r3, #4
 800bc62:	3415      	adds	r4, #21
 800bc64:	42a5      	cmp	r5, r4
 800bc66:	bf38      	it	cc
 800bc68:	2304      	movcc	r3, #4
 800bc6a:	4419      	add	r1, r3
 800bc6c:	4473      	add	r3, lr
 800bc6e:	469e      	mov	lr, r3
 800bc70:	460d      	mov	r5, r1
 800bc72:	4565      	cmp	r5, ip
 800bc74:	d30e      	bcc.n	800bc94 <__mdiff+0xe8>
 800bc76:	f10c 0203 	add.w	r2, ip, #3
 800bc7a:	1a52      	subs	r2, r2, r1
 800bc7c:	f022 0203 	bic.w	r2, r2, #3
 800bc80:	3903      	subs	r1, #3
 800bc82:	458c      	cmp	ip, r1
 800bc84:	bf38      	it	cc
 800bc86:	2200      	movcc	r2, #0
 800bc88:	441a      	add	r2, r3
 800bc8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc8e:	b17b      	cbz	r3, 800bcb0 <__mdiff+0x104>
 800bc90:	6106      	str	r6, [r0, #16]
 800bc92:	e7a5      	b.n	800bbe0 <__mdiff+0x34>
 800bc94:	f855 8b04 	ldr.w	r8, [r5], #4
 800bc98:	fa17 f488 	uxtah	r4, r7, r8
 800bc9c:	1422      	asrs	r2, r4, #16
 800bc9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bca2:	b2a4      	uxth	r4, r4
 800bca4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bca8:	f84e 4b04 	str.w	r4, [lr], #4
 800bcac:	1417      	asrs	r7, r2, #16
 800bcae:	e7e0      	b.n	800bc72 <__mdiff+0xc6>
 800bcb0:	3e01      	subs	r6, #1
 800bcb2:	e7ea      	b.n	800bc8a <__mdiff+0xde>
 800bcb4:	0800cf03 	.word	0x0800cf03
 800bcb8:	0800cf14 	.word	0x0800cf14

0800bcbc <__d2b>:
 800bcbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	ec57 6b10 	vmov	r6, r7, d0
 800bcc8:	4690      	mov	r8, r2
 800bcca:	f7ff fcd5 	bl	800b678 <_Balloc>
 800bcce:	4604      	mov	r4, r0
 800bcd0:	b930      	cbnz	r0, 800bce0 <__d2b+0x24>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	4b25      	ldr	r3, [pc, #148]	; (800bd6c <__d2b+0xb0>)
 800bcd6:	4826      	ldr	r0, [pc, #152]	; (800bd70 <__d2b+0xb4>)
 800bcd8:	f240 310a 	movw	r1, #778	; 0x30a
 800bcdc:	f000 f914 	bl	800bf08 <__assert_func>
 800bce0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bce4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bce8:	bb35      	cbnz	r5, 800bd38 <__d2b+0x7c>
 800bcea:	2e00      	cmp	r6, #0
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	d028      	beq.n	800bd42 <__d2b+0x86>
 800bcf0:	4668      	mov	r0, sp
 800bcf2:	9600      	str	r6, [sp, #0]
 800bcf4:	f7ff fd8c 	bl	800b810 <__lo0bits>
 800bcf8:	9900      	ldr	r1, [sp, #0]
 800bcfa:	b300      	cbz	r0, 800bd3e <__d2b+0x82>
 800bcfc:	9a01      	ldr	r2, [sp, #4]
 800bcfe:	f1c0 0320 	rsb	r3, r0, #32
 800bd02:	fa02 f303 	lsl.w	r3, r2, r3
 800bd06:	430b      	orrs	r3, r1
 800bd08:	40c2      	lsrs	r2, r0
 800bd0a:	6163      	str	r3, [r4, #20]
 800bd0c:	9201      	str	r2, [sp, #4]
 800bd0e:	9b01      	ldr	r3, [sp, #4]
 800bd10:	61a3      	str	r3, [r4, #24]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	bf14      	ite	ne
 800bd16:	2202      	movne	r2, #2
 800bd18:	2201      	moveq	r2, #1
 800bd1a:	6122      	str	r2, [r4, #16]
 800bd1c:	b1d5      	cbz	r5, 800bd54 <__d2b+0x98>
 800bd1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd22:	4405      	add	r5, r0
 800bd24:	f8c9 5000 	str.w	r5, [r9]
 800bd28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd2c:	f8c8 0000 	str.w	r0, [r8]
 800bd30:	4620      	mov	r0, r4
 800bd32:	b003      	add	sp, #12
 800bd34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd3c:	e7d5      	b.n	800bcea <__d2b+0x2e>
 800bd3e:	6161      	str	r1, [r4, #20]
 800bd40:	e7e5      	b.n	800bd0e <__d2b+0x52>
 800bd42:	a801      	add	r0, sp, #4
 800bd44:	f7ff fd64 	bl	800b810 <__lo0bits>
 800bd48:	9b01      	ldr	r3, [sp, #4]
 800bd4a:	6163      	str	r3, [r4, #20]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	6122      	str	r2, [r4, #16]
 800bd50:	3020      	adds	r0, #32
 800bd52:	e7e3      	b.n	800bd1c <__d2b+0x60>
 800bd54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd5c:	f8c9 0000 	str.w	r0, [r9]
 800bd60:	6918      	ldr	r0, [r3, #16]
 800bd62:	f7ff fd35 	bl	800b7d0 <__hi0bits>
 800bd66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd6a:	e7df      	b.n	800bd2c <__d2b+0x70>
 800bd6c:	0800cf03 	.word	0x0800cf03
 800bd70:	0800cf14 	.word	0x0800cf14

0800bd74 <_calloc_r>:
 800bd74:	b513      	push	{r0, r1, r4, lr}
 800bd76:	434a      	muls	r2, r1
 800bd78:	4611      	mov	r1, r2
 800bd7a:	9201      	str	r2, [sp, #4]
 800bd7c:	f000 f85a 	bl	800be34 <_malloc_r>
 800bd80:	4604      	mov	r4, r0
 800bd82:	b118      	cbz	r0, 800bd8c <_calloc_r+0x18>
 800bd84:	9a01      	ldr	r2, [sp, #4]
 800bd86:	2100      	movs	r1, #0
 800bd88:	f7fe f980 	bl	800a08c <memset>
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	b002      	add	sp, #8
 800bd90:	bd10      	pop	{r4, pc}
	...

0800bd94 <_free_r>:
 800bd94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd96:	2900      	cmp	r1, #0
 800bd98:	d048      	beq.n	800be2c <_free_r+0x98>
 800bd9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd9e:	9001      	str	r0, [sp, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f1a1 0404 	sub.w	r4, r1, #4
 800bda6:	bfb8      	it	lt
 800bda8:	18e4      	addlt	r4, r4, r3
 800bdaa:	f000 f8ef 	bl	800bf8c <__malloc_lock>
 800bdae:	4a20      	ldr	r2, [pc, #128]	; (800be30 <_free_r+0x9c>)
 800bdb0:	9801      	ldr	r0, [sp, #4]
 800bdb2:	6813      	ldr	r3, [r2, #0]
 800bdb4:	4615      	mov	r5, r2
 800bdb6:	b933      	cbnz	r3, 800bdc6 <_free_r+0x32>
 800bdb8:	6063      	str	r3, [r4, #4]
 800bdba:	6014      	str	r4, [r2, #0]
 800bdbc:	b003      	add	sp, #12
 800bdbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdc2:	f000 b8e9 	b.w	800bf98 <__malloc_unlock>
 800bdc6:	42a3      	cmp	r3, r4
 800bdc8:	d90b      	bls.n	800bde2 <_free_r+0x4e>
 800bdca:	6821      	ldr	r1, [r4, #0]
 800bdcc:	1862      	adds	r2, r4, r1
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	bf04      	itt	eq
 800bdd2:	681a      	ldreq	r2, [r3, #0]
 800bdd4:	685b      	ldreq	r3, [r3, #4]
 800bdd6:	6063      	str	r3, [r4, #4]
 800bdd8:	bf04      	itt	eq
 800bdda:	1852      	addeq	r2, r2, r1
 800bddc:	6022      	streq	r2, [r4, #0]
 800bdde:	602c      	str	r4, [r5, #0]
 800bde0:	e7ec      	b.n	800bdbc <_free_r+0x28>
 800bde2:	461a      	mov	r2, r3
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	b10b      	cbz	r3, 800bdec <_free_r+0x58>
 800bde8:	42a3      	cmp	r3, r4
 800bdea:	d9fa      	bls.n	800bde2 <_free_r+0x4e>
 800bdec:	6811      	ldr	r1, [r2, #0]
 800bdee:	1855      	adds	r5, r2, r1
 800bdf0:	42a5      	cmp	r5, r4
 800bdf2:	d10b      	bne.n	800be0c <_free_r+0x78>
 800bdf4:	6824      	ldr	r4, [r4, #0]
 800bdf6:	4421      	add	r1, r4
 800bdf8:	1854      	adds	r4, r2, r1
 800bdfa:	42a3      	cmp	r3, r4
 800bdfc:	6011      	str	r1, [r2, #0]
 800bdfe:	d1dd      	bne.n	800bdbc <_free_r+0x28>
 800be00:	681c      	ldr	r4, [r3, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	6053      	str	r3, [r2, #4]
 800be06:	4421      	add	r1, r4
 800be08:	6011      	str	r1, [r2, #0]
 800be0a:	e7d7      	b.n	800bdbc <_free_r+0x28>
 800be0c:	d902      	bls.n	800be14 <_free_r+0x80>
 800be0e:	230c      	movs	r3, #12
 800be10:	6003      	str	r3, [r0, #0]
 800be12:	e7d3      	b.n	800bdbc <_free_r+0x28>
 800be14:	6825      	ldr	r5, [r4, #0]
 800be16:	1961      	adds	r1, r4, r5
 800be18:	428b      	cmp	r3, r1
 800be1a:	bf04      	itt	eq
 800be1c:	6819      	ldreq	r1, [r3, #0]
 800be1e:	685b      	ldreq	r3, [r3, #4]
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	bf04      	itt	eq
 800be24:	1949      	addeq	r1, r1, r5
 800be26:	6021      	streq	r1, [r4, #0]
 800be28:	6054      	str	r4, [r2, #4]
 800be2a:	e7c7      	b.n	800bdbc <_free_r+0x28>
 800be2c:	b003      	add	sp, #12
 800be2e:	bd30      	pop	{r4, r5, pc}
 800be30:	20004b90 	.word	0x20004b90

0800be34 <_malloc_r>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	1ccd      	adds	r5, r1, #3
 800be38:	f025 0503 	bic.w	r5, r5, #3
 800be3c:	3508      	adds	r5, #8
 800be3e:	2d0c      	cmp	r5, #12
 800be40:	bf38      	it	cc
 800be42:	250c      	movcc	r5, #12
 800be44:	2d00      	cmp	r5, #0
 800be46:	4606      	mov	r6, r0
 800be48:	db01      	blt.n	800be4e <_malloc_r+0x1a>
 800be4a:	42a9      	cmp	r1, r5
 800be4c:	d903      	bls.n	800be56 <_malloc_r+0x22>
 800be4e:	230c      	movs	r3, #12
 800be50:	6033      	str	r3, [r6, #0]
 800be52:	2000      	movs	r0, #0
 800be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be56:	f000 f899 	bl	800bf8c <__malloc_lock>
 800be5a:	4921      	ldr	r1, [pc, #132]	; (800bee0 <_malloc_r+0xac>)
 800be5c:	680a      	ldr	r2, [r1, #0]
 800be5e:	4614      	mov	r4, r2
 800be60:	b99c      	cbnz	r4, 800be8a <_malloc_r+0x56>
 800be62:	4f20      	ldr	r7, [pc, #128]	; (800bee4 <_malloc_r+0xb0>)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	b923      	cbnz	r3, 800be72 <_malloc_r+0x3e>
 800be68:	4621      	mov	r1, r4
 800be6a:	4630      	mov	r0, r6
 800be6c:	f000 f83c 	bl	800bee8 <_sbrk_r>
 800be70:	6038      	str	r0, [r7, #0]
 800be72:	4629      	mov	r1, r5
 800be74:	4630      	mov	r0, r6
 800be76:	f000 f837 	bl	800bee8 <_sbrk_r>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	d123      	bne.n	800bec6 <_malloc_r+0x92>
 800be7e:	230c      	movs	r3, #12
 800be80:	6033      	str	r3, [r6, #0]
 800be82:	4630      	mov	r0, r6
 800be84:	f000 f888 	bl	800bf98 <__malloc_unlock>
 800be88:	e7e3      	b.n	800be52 <_malloc_r+0x1e>
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	1b5b      	subs	r3, r3, r5
 800be8e:	d417      	bmi.n	800bec0 <_malloc_r+0x8c>
 800be90:	2b0b      	cmp	r3, #11
 800be92:	d903      	bls.n	800be9c <_malloc_r+0x68>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	441c      	add	r4, r3
 800be98:	6025      	str	r5, [r4, #0]
 800be9a:	e004      	b.n	800bea6 <_malloc_r+0x72>
 800be9c:	6863      	ldr	r3, [r4, #4]
 800be9e:	42a2      	cmp	r2, r4
 800bea0:	bf0c      	ite	eq
 800bea2:	600b      	streq	r3, [r1, #0]
 800bea4:	6053      	strne	r3, [r2, #4]
 800bea6:	4630      	mov	r0, r6
 800bea8:	f000 f876 	bl	800bf98 <__malloc_unlock>
 800beac:	f104 000b 	add.w	r0, r4, #11
 800beb0:	1d23      	adds	r3, r4, #4
 800beb2:	f020 0007 	bic.w	r0, r0, #7
 800beb6:	1ac2      	subs	r2, r0, r3
 800beb8:	d0cc      	beq.n	800be54 <_malloc_r+0x20>
 800beba:	1a1b      	subs	r3, r3, r0
 800bebc:	50a3      	str	r3, [r4, r2]
 800bebe:	e7c9      	b.n	800be54 <_malloc_r+0x20>
 800bec0:	4622      	mov	r2, r4
 800bec2:	6864      	ldr	r4, [r4, #4]
 800bec4:	e7cc      	b.n	800be60 <_malloc_r+0x2c>
 800bec6:	1cc4      	adds	r4, r0, #3
 800bec8:	f024 0403 	bic.w	r4, r4, #3
 800becc:	42a0      	cmp	r0, r4
 800bece:	d0e3      	beq.n	800be98 <_malloc_r+0x64>
 800bed0:	1a21      	subs	r1, r4, r0
 800bed2:	4630      	mov	r0, r6
 800bed4:	f000 f808 	bl	800bee8 <_sbrk_r>
 800bed8:	3001      	adds	r0, #1
 800beda:	d1dd      	bne.n	800be98 <_malloc_r+0x64>
 800bedc:	e7cf      	b.n	800be7e <_malloc_r+0x4a>
 800bede:	bf00      	nop
 800bee0:	20004b90 	.word	0x20004b90
 800bee4:	20004b94 	.word	0x20004b94

0800bee8 <_sbrk_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d06      	ldr	r5, [pc, #24]	; (800bf04 <_sbrk_r+0x1c>)
 800beec:	2300      	movs	r3, #0
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f7 fc9c 	bl	8003830 <_sbrk>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_sbrk_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_sbrk_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20004cf4 	.word	0x20004cf4

0800bf08 <__assert_func>:
 800bf08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf0a:	4614      	mov	r4, r2
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <__assert_func+0x2c>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4605      	mov	r5, r0
 800bf14:	68d8      	ldr	r0, [r3, #12]
 800bf16:	b14c      	cbz	r4, 800bf2c <__assert_func+0x24>
 800bf18:	4b07      	ldr	r3, [pc, #28]	; (800bf38 <__assert_func+0x30>)
 800bf1a:	9100      	str	r1, [sp, #0]
 800bf1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf20:	4906      	ldr	r1, [pc, #24]	; (800bf3c <__assert_func+0x34>)
 800bf22:	462b      	mov	r3, r5
 800bf24:	f000 f80e 	bl	800bf44 <fiprintf>
 800bf28:	f000 fa64 	bl	800c3f4 <abort>
 800bf2c:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <__assert_func+0x38>)
 800bf2e:	461c      	mov	r4, r3
 800bf30:	e7f3      	b.n	800bf1a <__assert_func+0x12>
 800bf32:	bf00      	nop
 800bf34:	2000002c 	.word	0x2000002c
 800bf38:	0800d074 	.word	0x0800d074
 800bf3c:	0800d081 	.word	0x0800d081
 800bf40:	0800d0af 	.word	0x0800d0af

0800bf44 <fiprintf>:
 800bf44:	b40e      	push	{r1, r2, r3}
 800bf46:	b503      	push	{r0, r1, lr}
 800bf48:	4601      	mov	r1, r0
 800bf4a:	ab03      	add	r3, sp, #12
 800bf4c:	4805      	ldr	r0, [pc, #20]	; (800bf64 <fiprintf+0x20>)
 800bf4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf52:	6800      	ldr	r0, [r0, #0]
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	f000 f84f 	bl	800bff8 <_vfiprintf_r>
 800bf5a:	b002      	add	sp, #8
 800bf5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf60:	b003      	add	sp, #12
 800bf62:	4770      	bx	lr
 800bf64:	2000002c 	.word	0x2000002c

0800bf68 <__ascii_mbtowc>:
 800bf68:	b082      	sub	sp, #8
 800bf6a:	b901      	cbnz	r1, 800bf6e <__ascii_mbtowc+0x6>
 800bf6c:	a901      	add	r1, sp, #4
 800bf6e:	b142      	cbz	r2, 800bf82 <__ascii_mbtowc+0x1a>
 800bf70:	b14b      	cbz	r3, 800bf86 <__ascii_mbtowc+0x1e>
 800bf72:	7813      	ldrb	r3, [r2, #0]
 800bf74:	600b      	str	r3, [r1, #0]
 800bf76:	7812      	ldrb	r2, [r2, #0]
 800bf78:	1e10      	subs	r0, r2, #0
 800bf7a:	bf18      	it	ne
 800bf7c:	2001      	movne	r0, #1
 800bf7e:	b002      	add	sp, #8
 800bf80:	4770      	bx	lr
 800bf82:	4610      	mov	r0, r2
 800bf84:	e7fb      	b.n	800bf7e <__ascii_mbtowc+0x16>
 800bf86:	f06f 0001 	mvn.w	r0, #1
 800bf8a:	e7f8      	b.n	800bf7e <__ascii_mbtowc+0x16>

0800bf8c <__malloc_lock>:
 800bf8c:	4801      	ldr	r0, [pc, #4]	; (800bf94 <__malloc_lock+0x8>)
 800bf8e:	f000 bbf1 	b.w	800c774 <__retarget_lock_acquire_recursive>
 800bf92:	bf00      	nop
 800bf94:	20004cfc 	.word	0x20004cfc

0800bf98 <__malloc_unlock>:
 800bf98:	4801      	ldr	r0, [pc, #4]	; (800bfa0 <__malloc_unlock+0x8>)
 800bf9a:	f000 bbec 	b.w	800c776 <__retarget_lock_release_recursive>
 800bf9e:	bf00      	nop
 800bfa0:	20004cfc 	.word	0x20004cfc

0800bfa4 <__sfputc_r>:
 800bfa4:	6893      	ldr	r3, [r2, #8]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	b410      	push	{r4}
 800bfac:	6093      	str	r3, [r2, #8]
 800bfae:	da08      	bge.n	800bfc2 <__sfputc_r+0x1e>
 800bfb0:	6994      	ldr	r4, [r2, #24]
 800bfb2:	42a3      	cmp	r3, r4
 800bfb4:	db01      	blt.n	800bfba <__sfputc_r+0x16>
 800bfb6:	290a      	cmp	r1, #10
 800bfb8:	d103      	bne.n	800bfc2 <__sfputc_r+0x1e>
 800bfba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfbe:	f000 b94b 	b.w	800c258 <__swbuf_r>
 800bfc2:	6813      	ldr	r3, [r2, #0]
 800bfc4:	1c58      	adds	r0, r3, #1
 800bfc6:	6010      	str	r0, [r2, #0]
 800bfc8:	7019      	strb	r1, [r3, #0]
 800bfca:	4608      	mov	r0, r1
 800bfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <__sfputs_r>:
 800bfd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	4614      	mov	r4, r2
 800bfda:	18d5      	adds	r5, r2, r3
 800bfdc:	42ac      	cmp	r4, r5
 800bfde:	d101      	bne.n	800bfe4 <__sfputs_r+0x12>
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	e007      	b.n	800bff4 <__sfputs_r+0x22>
 800bfe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe8:	463a      	mov	r2, r7
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ffda 	bl	800bfa4 <__sfputc_r>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d1f3      	bne.n	800bfdc <__sfputs_r+0xa>
 800bff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bff8 <_vfiprintf_r>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	460d      	mov	r5, r1
 800bffe:	b09d      	sub	sp, #116	; 0x74
 800c000:	4614      	mov	r4, r2
 800c002:	4698      	mov	r8, r3
 800c004:	4606      	mov	r6, r0
 800c006:	b118      	cbz	r0, 800c010 <_vfiprintf_r+0x18>
 800c008:	6983      	ldr	r3, [r0, #24]
 800c00a:	b90b      	cbnz	r3, 800c010 <_vfiprintf_r+0x18>
 800c00c:	f000 fb14 	bl	800c638 <__sinit>
 800c010:	4b89      	ldr	r3, [pc, #548]	; (800c238 <_vfiprintf_r+0x240>)
 800c012:	429d      	cmp	r5, r3
 800c014:	d11b      	bne.n	800c04e <_vfiprintf_r+0x56>
 800c016:	6875      	ldr	r5, [r6, #4]
 800c018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c01a:	07d9      	lsls	r1, r3, #31
 800c01c:	d405      	bmi.n	800c02a <_vfiprintf_r+0x32>
 800c01e:	89ab      	ldrh	r3, [r5, #12]
 800c020:	059a      	lsls	r2, r3, #22
 800c022:	d402      	bmi.n	800c02a <_vfiprintf_r+0x32>
 800c024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c026:	f000 fba5 	bl	800c774 <__retarget_lock_acquire_recursive>
 800c02a:	89ab      	ldrh	r3, [r5, #12]
 800c02c:	071b      	lsls	r3, r3, #28
 800c02e:	d501      	bpl.n	800c034 <_vfiprintf_r+0x3c>
 800c030:	692b      	ldr	r3, [r5, #16]
 800c032:	b9eb      	cbnz	r3, 800c070 <_vfiprintf_r+0x78>
 800c034:	4629      	mov	r1, r5
 800c036:	4630      	mov	r0, r6
 800c038:	f000 f96e 	bl	800c318 <__swsetup_r>
 800c03c:	b1c0      	cbz	r0, 800c070 <_vfiprintf_r+0x78>
 800c03e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c040:	07dc      	lsls	r4, r3, #31
 800c042:	d50e      	bpl.n	800c062 <_vfiprintf_r+0x6a>
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	b01d      	add	sp, #116	; 0x74
 800c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04e:	4b7b      	ldr	r3, [pc, #492]	; (800c23c <_vfiprintf_r+0x244>)
 800c050:	429d      	cmp	r5, r3
 800c052:	d101      	bne.n	800c058 <_vfiprintf_r+0x60>
 800c054:	68b5      	ldr	r5, [r6, #8]
 800c056:	e7df      	b.n	800c018 <_vfiprintf_r+0x20>
 800c058:	4b79      	ldr	r3, [pc, #484]	; (800c240 <_vfiprintf_r+0x248>)
 800c05a:	429d      	cmp	r5, r3
 800c05c:	bf08      	it	eq
 800c05e:	68f5      	ldreq	r5, [r6, #12]
 800c060:	e7da      	b.n	800c018 <_vfiprintf_r+0x20>
 800c062:	89ab      	ldrh	r3, [r5, #12]
 800c064:	0598      	lsls	r0, r3, #22
 800c066:	d4ed      	bmi.n	800c044 <_vfiprintf_r+0x4c>
 800c068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c06a:	f000 fb84 	bl	800c776 <__retarget_lock_release_recursive>
 800c06e:	e7e9      	b.n	800c044 <_vfiprintf_r+0x4c>
 800c070:	2300      	movs	r3, #0
 800c072:	9309      	str	r3, [sp, #36]	; 0x24
 800c074:	2320      	movs	r3, #32
 800c076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c07a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c07e:	2330      	movs	r3, #48	; 0x30
 800c080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c244 <_vfiprintf_r+0x24c>
 800c084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c088:	f04f 0901 	mov.w	r9, #1
 800c08c:	4623      	mov	r3, r4
 800c08e:	469a      	mov	sl, r3
 800c090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c094:	b10a      	cbz	r2, 800c09a <_vfiprintf_r+0xa2>
 800c096:	2a25      	cmp	r2, #37	; 0x25
 800c098:	d1f9      	bne.n	800c08e <_vfiprintf_r+0x96>
 800c09a:	ebba 0b04 	subs.w	fp, sl, r4
 800c09e:	d00b      	beq.n	800c0b8 <_vfiprintf_r+0xc0>
 800c0a0:	465b      	mov	r3, fp
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7ff ff93 	bl	800bfd2 <__sfputs_r>
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	f000 80aa 	beq.w	800c206 <_vfiprintf_r+0x20e>
 800c0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0b4:	445a      	add	r2, fp
 800c0b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80a2 	beq.w	800c206 <_vfiprintf_r+0x20e>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0cc:	f10a 0a01 	add.w	sl, sl, #1
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0d8:	931a      	str	r3, [sp, #104]	; 0x68
 800c0da:	4654      	mov	r4, sl
 800c0dc:	2205      	movs	r2, #5
 800c0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e2:	4858      	ldr	r0, [pc, #352]	; (800c244 <_vfiprintf_r+0x24c>)
 800c0e4:	f7f4 f884 	bl	80001f0 <memchr>
 800c0e8:	9a04      	ldr	r2, [sp, #16]
 800c0ea:	b9d8      	cbnz	r0, 800c124 <_vfiprintf_r+0x12c>
 800c0ec:	06d1      	lsls	r1, r2, #27
 800c0ee:	bf44      	itt	mi
 800c0f0:	2320      	movmi	r3, #32
 800c0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f6:	0713      	lsls	r3, r2, #28
 800c0f8:	bf44      	itt	mi
 800c0fa:	232b      	movmi	r3, #43	; 0x2b
 800c0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c100:	f89a 3000 	ldrb.w	r3, [sl]
 800c104:	2b2a      	cmp	r3, #42	; 0x2a
 800c106:	d015      	beq.n	800c134 <_vfiprintf_r+0x13c>
 800c108:	9a07      	ldr	r2, [sp, #28]
 800c10a:	4654      	mov	r4, sl
 800c10c:	2000      	movs	r0, #0
 800c10e:	f04f 0c0a 	mov.w	ip, #10
 800c112:	4621      	mov	r1, r4
 800c114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c118:	3b30      	subs	r3, #48	; 0x30
 800c11a:	2b09      	cmp	r3, #9
 800c11c:	d94e      	bls.n	800c1bc <_vfiprintf_r+0x1c4>
 800c11e:	b1b0      	cbz	r0, 800c14e <_vfiprintf_r+0x156>
 800c120:	9207      	str	r2, [sp, #28]
 800c122:	e014      	b.n	800c14e <_vfiprintf_r+0x156>
 800c124:	eba0 0308 	sub.w	r3, r0, r8
 800c128:	fa09 f303 	lsl.w	r3, r9, r3
 800c12c:	4313      	orrs	r3, r2
 800c12e:	9304      	str	r3, [sp, #16]
 800c130:	46a2      	mov	sl, r4
 800c132:	e7d2      	b.n	800c0da <_vfiprintf_r+0xe2>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	1d19      	adds	r1, r3, #4
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	9103      	str	r1, [sp, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	bfbb      	ittet	lt
 800c140:	425b      	neglt	r3, r3
 800c142:	f042 0202 	orrlt.w	r2, r2, #2
 800c146:	9307      	strge	r3, [sp, #28]
 800c148:	9307      	strlt	r3, [sp, #28]
 800c14a:	bfb8      	it	lt
 800c14c:	9204      	strlt	r2, [sp, #16]
 800c14e:	7823      	ldrb	r3, [r4, #0]
 800c150:	2b2e      	cmp	r3, #46	; 0x2e
 800c152:	d10c      	bne.n	800c16e <_vfiprintf_r+0x176>
 800c154:	7863      	ldrb	r3, [r4, #1]
 800c156:	2b2a      	cmp	r3, #42	; 0x2a
 800c158:	d135      	bne.n	800c1c6 <_vfiprintf_r+0x1ce>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	1d1a      	adds	r2, r3, #4
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	9203      	str	r2, [sp, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	bfb8      	it	lt
 800c166:	f04f 33ff 	movlt.w	r3, #4294967295
 800c16a:	3402      	adds	r4, #2
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c254 <_vfiprintf_r+0x25c>
 800c172:	7821      	ldrb	r1, [r4, #0]
 800c174:	2203      	movs	r2, #3
 800c176:	4650      	mov	r0, sl
 800c178:	f7f4 f83a 	bl	80001f0 <memchr>
 800c17c:	b140      	cbz	r0, 800c190 <_vfiprintf_r+0x198>
 800c17e:	2340      	movs	r3, #64	; 0x40
 800c180:	eba0 000a 	sub.w	r0, r0, sl
 800c184:	fa03 f000 	lsl.w	r0, r3, r0
 800c188:	9b04      	ldr	r3, [sp, #16]
 800c18a:	4303      	orrs	r3, r0
 800c18c:	3401      	adds	r4, #1
 800c18e:	9304      	str	r3, [sp, #16]
 800c190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c194:	482c      	ldr	r0, [pc, #176]	; (800c248 <_vfiprintf_r+0x250>)
 800c196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c19a:	2206      	movs	r2, #6
 800c19c:	f7f4 f828 	bl	80001f0 <memchr>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d03f      	beq.n	800c224 <_vfiprintf_r+0x22c>
 800c1a4:	4b29      	ldr	r3, [pc, #164]	; (800c24c <_vfiprintf_r+0x254>)
 800c1a6:	bb1b      	cbnz	r3, 800c1f0 <_vfiprintf_r+0x1f8>
 800c1a8:	9b03      	ldr	r3, [sp, #12]
 800c1aa:	3307      	adds	r3, #7
 800c1ac:	f023 0307 	bic.w	r3, r3, #7
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	9303      	str	r3, [sp, #12]
 800c1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b6:	443b      	add	r3, r7
 800c1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ba:	e767      	b.n	800c08c <_vfiprintf_r+0x94>
 800c1bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	e7a5      	b.n	800c112 <_vfiprintf_r+0x11a>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	3401      	adds	r4, #1
 800c1ca:	9305      	str	r3, [sp, #20]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	f04f 0c0a 	mov.w	ip, #10
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d8:	3a30      	subs	r2, #48	; 0x30
 800c1da:	2a09      	cmp	r2, #9
 800c1dc:	d903      	bls.n	800c1e6 <_vfiprintf_r+0x1ee>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d0c5      	beq.n	800c16e <_vfiprintf_r+0x176>
 800c1e2:	9105      	str	r1, [sp, #20]
 800c1e4:	e7c3      	b.n	800c16e <_vfiprintf_r+0x176>
 800c1e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e7f0      	b.n	800c1d2 <_vfiprintf_r+0x1da>
 800c1f0:	ab03      	add	r3, sp, #12
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	462a      	mov	r2, r5
 800c1f6:	4b16      	ldr	r3, [pc, #88]	; (800c250 <_vfiprintf_r+0x258>)
 800c1f8:	a904      	add	r1, sp, #16
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7fd ffee 	bl	800a1dc <_printf_float>
 800c200:	4607      	mov	r7, r0
 800c202:	1c78      	adds	r0, r7, #1
 800c204:	d1d6      	bne.n	800c1b4 <_vfiprintf_r+0x1bc>
 800c206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c208:	07d9      	lsls	r1, r3, #31
 800c20a:	d405      	bmi.n	800c218 <_vfiprintf_r+0x220>
 800c20c:	89ab      	ldrh	r3, [r5, #12]
 800c20e:	059a      	lsls	r2, r3, #22
 800c210:	d402      	bmi.n	800c218 <_vfiprintf_r+0x220>
 800c212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c214:	f000 faaf 	bl	800c776 <__retarget_lock_release_recursive>
 800c218:	89ab      	ldrh	r3, [r5, #12]
 800c21a:	065b      	lsls	r3, r3, #25
 800c21c:	f53f af12 	bmi.w	800c044 <_vfiprintf_r+0x4c>
 800c220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c222:	e711      	b.n	800c048 <_vfiprintf_r+0x50>
 800c224:	ab03      	add	r3, sp, #12
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	462a      	mov	r2, r5
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <_vfiprintf_r+0x258>)
 800c22c:	a904      	add	r1, sp, #16
 800c22e:	4630      	mov	r0, r6
 800c230:	f7fe fa78 	bl	800a724 <_printf_i>
 800c234:	e7e4      	b.n	800c200 <_vfiprintf_r+0x208>
 800c236:	bf00      	nop
 800c238:	0800d1ec 	.word	0x0800d1ec
 800c23c:	0800d20c 	.word	0x0800d20c
 800c240:	0800d1cc 	.word	0x0800d1cc
 800c244:	0800d0ba 	.word	0x0800d0ba
 800c248:	0800d0c4 	.word	0x0800d0c4
 800c24c:	0800a1dd 	.word	0x0800a1dd
 800c250:	0800bfd3 	.word	0x0800bfd3
 800c254:	0800d0c0 	.word	0x0800d0c0

0800c258 <__swbuf_r>:
 800c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25a:	460e      	mov	r6, r1
 800c25c:	4614      	mov	r4, r2
 800c25e:	4605      	mov	r5, r0
 800c260:	b118      	cbz	r0, 800c26a <__swbuf_r+0x12>
 800c262:	6983      	ldr	r3, [r0, #24]
 800c264:	b90b      	cbnz	r3, 800c26a <__swbuf_r+0x12>
 800c266:	f000 f9e7 	bl	800c638 <__sinit>
 800c26a:	4b21      	ldr	r3, [pc, #132]	; (800c2f0 <__swbuf_r+0x98>)
 800c26c:	429c      	cmp	r4, r3
 800c26e:	d12b      	bne.n	800c2c8 <__swbuf_r+0x70>
 800c270:	686c      	ldr	r4, [r5, #4]
 800c272:	69a3      	ldr	r3, [r4, #24]
 800c274:	60a3      	str	r3, [r4, #8]
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	071a      	lsls	r2, r3, #28
 800c27a:	d52f      	bpl.n	800c2dc <__swbuf_r+0x84>
 800c27c:	6923      	ldr	r3, [r4, #16]
 800c27e:	b36b      	cbz	r3, 800c2dc <__swbuf_r+0x84>
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	6820      	ldr	r0, [r4, #0]
 800c284:	1ac0      	subs	r0, r0, r3
 800c286:	6963      	ldr	r3, [r4, #20]
 800c288:	b2f6      	uxtb	r6, r6
 800c28a:	4283      	cmp	r3, r0
 800c28c:	4637      	mov	r7, r6
 800c28e:	dc04      	bgt.n	800c29a <__swbuf_r+0x42>
 800c290:	4621      	mov	r1, r4
 800c292:	4628      	mov	r0, r5
 800c294:	f000 f93c 	bl	800c510 <_fflush_r>
 800c298:	bb30      	cbnz	r0, 800c2e8 <__swbuf_r+0x90>
 800c29a:	68a3      	ldr	r3, [r4, #8]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	60a3      	str	r3, [r4, #8]
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	6022      	str	r2, [r4, #0]
 800c2a6:	701e      	strb	r6, [r3, #0]
 800c2a8:	6963      	ldr	r3, [r4, #20]
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	4283      	cmp	r3, r0
 800c2ae:	d004      	beq.n	800c2ba <__swbuf_r+0x62>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	07db      	lsls	r3, r3, #31
 800c2b4:	d506      	bpl.n	800c2c4 <__swbuf_r+0x6c>
 800c2b6:	2e0a      	cmp	r6, #10
 800c2b8:	d104      	bne.n	800c2c4 <__swbuf_r+0x6c>
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f000 f927 	bl	800c510 <_fflush_r>
 800c2c2:	b988      	cbnz	r0, 800c2e8 <__swbuf_r+0x90>
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c8:	4b0a      	ldr	r3, [pc, #40]	; (800c2f4 <__swbuf_r+0x9c>)
 800c2ca:	429c      	cmp	r4, r3
 800c2cc:	d101      	bne.n	800c2d2 <__swbuf_r+0x7a>
 800c2ce:	68ac      	ldr	r4, [r5, #8]
 800c2d0:	e7cf      	b.n	800c272 <__swbuf_r+0x1a>
 800c2d2:	4b09      	ldr	r3, [pc, #36]	; (800c2f8 <__swbuf_r+0xa0>)
 800c2d4:	429c      	cmp	r4, r3
 800c2d6:	bf08      	it	eq
 800c2d8:	68ec      	ldreq	r4, [r5, #12]
 800c2da:	e7ca      	b.n	800c272 <__swbuf_r+0x1a>
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 f81a 	bl	800c318 <__swsetup_r>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d0cb      	beq.n	800c280 <__swbuf_r+0x28>
 800c2e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c2ec:	e7ea      	b.n	800c2c4 <__swbuf_r+0x6c>
 800c2ee:	bf00      	nop
 800c2f0:	0800d1ec 	.word	0x0800d1ec
 800c2f4:	0800d20c 	.word	0x0800d20c
 800c2f8:	0800d1cc 	.word	0x0800d1cc

0800c2fc <__ascii_wctomb>:
 800c2fc:	b149      	cbz	r1, 800c312 <__ascii_wctomb+0x16>
 800c2fe:	2aff      	cmp	r2, #255	; 0xff
 800c300:	bf85      	ittet	hi
 800c302:	238a      	movhi	r3, #138	; 0x8a
 800c304:	6003      	strhi	r3, [r0, #0]
 800c306:	700a      	strbls	r2, [r1, #0]
 800c308:	f04f 30ff 	movhi.w	r0, #4294967295
 800c30c:	bf98      	it	ls
 800c30e:	2001      	movls	r0, #1
 800c310:	4770      	bx	lr
 800c312:	4608      	mov	r0, r1
 800c314:	4770      	bx	lr
	...

0800c318 <__swsetup_r>:
 800c318:	4b32      	ldr	r3, [pc, #200]	; (800c3e4 <__swsetup_r+0xcc>)
 800c31a:	b570      	push	{r4, r5, r6, lr}
 800c31c:	681d      	ldr	r5, [r3, #0]
 800c31e:	4606      	mov	r6, r0
 800c320:	460c      	mov	r4, r1
 800c322:	b125      	cbz	r5, 800c32e <__swsetup_r+0x16>
 800c324:	69ab      	ldr	r3, [r5, #24]
 800c326:	b913      	cbnz	r3, 800c32e <__swsetup_r+0x16>
 800c328:	4628      	mov	r0, r5
 800c32a:	f000 f985 	bl	800c638 <__sinit>
 800c32e:	4b2e      	ldr	r3, [pc, #184]	; (800c3e8 <__swsetup_r+0xd0>)
 800c330:	429c      	cmp	r4, r3
 800c332:	d10f      	bne.n	800c354 <__swsetup_r+0x3c>
 800c334:	686c      	ldr	r4, [r5, #4]
 800c336:	89a3      	ldrh	r3, [r4, #12]
 800c338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c33c:	0719      	lsls	r1, r3, #28
 800c33e:	d42c      	bmi.n	800c39a <__swsetup_r+0x82>
 800c340:	06dd      	lsls	r5, r3, #27
 800c342:	d411      	bmi.n	800c368 <__swsetup_r+0x50>
 800c344:	2309      	movs	r3, #9
 800c346:	6033      	str	r3, [r6, #0]
 800c348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c34c:	81a3      	strh	r3, [r4, #12]
 800c34e:	f04f 30ff 	mov.w	r0, #4294967295
 800c352:	e03e      	b.n	800c3d2 <__swsetup_r+0xba>
 800c354:	4b25      	ldr	r3, [pc, #148]	; (800c3ec <__swsetup_r+0xd4>)
 800c356:	429c      	cmp	r4, r3
 800c358:	d101      	bne.n	800c35e <__swsetup_r+0x46>
 800c35a:	68ac      	ldr	r4, [r5, #8]
 800c35c:	e7eb      	b.n	800c336 <__swsetup_r+0x1e>
 800c35e:	4b24      	ldr	r3, [pc, #144]	; (800c3f0 <__swsetup_r+0xd8>)
 800c360:	429c      	cmp	r4, r3
 800c362:	bf08      	it	eq
 800c364:	68ec      	ldreq	r4, [r5, #12]
 800c366:	e7e6      	b.n	800c336 <__swsetup_r+0x1e>
 800c368:	0758      	lsls	r0, r3, #29
 800c36a:	d512      	bpl.n	800c392 <__swsetup_r+0x7a>
 800c36c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c36e:	b141      	cbz	r1, 800c382 <__swsetup_r+0x6a>
 800c370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c374:	4299      	cmp	r1, r3
 800c376:	d002      	beq.n	800c37e <__swsetup_r+0x66>
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff fd0b 	bl	800bd94 <_free_r>
 800c37e:	2300      	movs	r3, #0
 800c380:	6363      	str	r3, [r4, #52]	; 0x34
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	2300      	movs	r3, #0
 800c38c:	6063      	str	r3, [r4, #4]
 800c38e:	6923      	ldr	r3, [r4, #16]
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	f043 0308 	orr.w	r3, r3, #8
 800c398:	81a3      	strh	r3, [r4, #12]
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	b94b      	cbnz	r3, 800c3b2 <__swsetup_r+0x9a>
 800c39e:	89a3      	ldrh	r3, [r4, #12]
 800c3a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a8:	d003      	beq.n	800c3b2 <__swsetup_r+0x9a>
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f000 fa07 	bl	800c7c0 <__smakebuf_r>
 800c3b2:	89a0      	ldrh	r0, [r4, #12]
 800c3b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3b8:	f010 0301 	ands.w	r3, r0, #1
 800c3bc:	d00a      	beq.n	800c3d4 <__swsetup_r+0xbc>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60a3      	str	r3, [r4, #8]
 800c3c2:	6963      	ldr	r3, [r4, #20]
 800c3c4:	425b      	negs	r3, r3
 800c3c6:	61a3      	str	r3, [r4, #24]
 800c3c8:	6923      	ldr	r3, [r4, #16]
 800c3ca:	b943      	cbnz	r3, 800c3de <__swsetup_r+0xc6>
 800c3cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3d0:	d1ba      	bne.n	800c348 <__swsetup_r+0x30>
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	0781      	lsls	r1, r0, #30
 800c3d6:	bf58      	it	pl
 800c3d8:	6963      	ldrpl	r3, [r4, #20]
 800c3da:	60a3      	str	r3, [r4, #8]
 800c3dc:	e7f4      	b.n	800c3c8 <__swsetup_r+0xb0>
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e7f7      	b.n	800c3d2 <__swsetup_r+0xba>
 800c3e2:	bf00      	nop
 800c3e4:	2000002c 	.word	0x2000002c
 800c3e8:	0800d1ec 	.word	0x0800d1ec
 800c3ec:	0800d20c 	.word	0x0800d20c
 800c3f0:	0800d1cc 	.word	0x0800d1cc

0800c3f4 <abort>:
 800c3f4:	b508      	push	{r3, lr}
 800c3f6:	2006      	movs	r0, #6
 800c3f8:	f000 fa4a 	bl	800c890 <raise>
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	f7f7 f99f 	bl	8003740 <_exit>
	...

0800c404 <__sflush_r>:
 800c404:	898a      	ldrh	r2, [r1, #12]
 800c406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40a:	4605      	mov	r5, r0
 800c40c:	0710      	lsls	r0, r2, #28
 800c40e:	460c      	mov	r4, r1
 800c410:	d458      	bmi.n	800c4c4 <__sflush_r+0xc0>
 800c412:	684b      	ldr	r3, [r1, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	dc05      	bgt.n	800c424 <__sflush_r+0x20>
 800c418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dc02      	bgt.n	800c424 <__sflush_r+0x20>
 800c41e:	2000      	movs	r0, #0
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c426:	2e00      	cmp	r6, #0
 800c428:	d0f9      	beq.n	800c41e <__sflush_r+0x1a>
 800c42a:	2300      	movs	r3, #0
 800c42c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c430:	682f      	ldr	r7, [r5, #0]
 800c432:	602b      	str	r3, [r5, #0]
 800c434:	d032      	beq.n	800c49c <__sflush_r+0x98>
 800c436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	075a      	lsls	r2, r3, #29
 800c43c:	d505      	bpl.n	800c44a <__sflush_r+0x46>
 800c43e:	6863      	ldr	r3, [r4, #4]
 800c440:	1ac0      	subs	r0, r0, r3
 800c442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c444:	b10b      	cbz	r3, 800c44a <__sflush_r+0x46>
 800c446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c448:	1ac0      	subs	r0, r0, r3
 800c44a:	2300      	movs	r3, #0
 800c44c:	4602      	mov	r2, r0
 800c44e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c450:	6a21      	ldr	r1, [r4, #32]
 800c452:	4628      	mov	r0, r5
 800c454:	47b0      	blx	r6
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	d106      	bne.n	800c46a <__sflush_r+0x66>
 800c45c:	6829      	ldr	r1, [r5, #0]
 800c45e:	291d      	cmp	r1, #29
 800c460:	d82c      	bhi.n	800c4bc <__sflush_r+0xb8>
 800c462:	4a2a      	ldr	r2, [pc, #168]	; (800c50c <__sflush_r+0x108>)
 800c464:	40ca      	lsrs	r2, r1
 800c466:	07d6      	lsls	r6, r2, #31
 800c468:	d528      	bpl.n	800c4bc <__sflush_r+0xb8>
 800c46a:	2200      	movs	r2, #0
 800c46c:	6062      	str	r2, [r4, #4]
 800c46e:	04d9      	lsls	r1, r3, #19
 800c470:	6922      	ldr	r2, [r4, #16]
 800c472:	6022      	str	r2, [r4, #0]
 800c474:	d504      	bpl.n	800c480 <__sflush_r+0x7c>
 800c476:	1c42      	adds	r2, r0, #1
 800c478:	d101      	bne.n	800c47e <__sflush_r+0x7a>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	b903      	cbnz	r3, 800c480 <__sflush_r+0x7c>
 800c47e:	6560      	str	r0, [r4, #84]	; 0x54
 800c480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c482:	602f      	str	r7, [r5, #0]
 800c484:	2900      	cmp	r1, #0
 800c486:	d0ca      	beq.n	800c41e <__sflush_r+0x1a>
 800c488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c48c:	4299      	cmp	r1, r3
 800c48e:	d002      	beq.n	800c496 <__sflush_r+0x92>
 800c490:	4628      	mov	r0, r5
 800c492:	f7ff fc7f 	bl	800bd94 <_free_r>
 800c496:	2000      	movs	r0, #0
 800c498:	6360      	str	r0, [r4, #52]	; 0x34
 800c49a:	e7c1      	b.n	800c420 <__sflush_r+0x1c>
 800c49c:	6a21      	ldr	r1, [r4, #32]
 800c49e:	2301      	movs	r3, #1
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	47b0      	blx	r6
 800c4a4:	1c41      	adds	r1, r0, #1
 800c4a6:	d1c7      	bne.n	800c438 <__sflush_r+0x34>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0c4      	beq.n	800c438 <__sflush_r+0x34>
 800c4ae:	2b1d      	cmp	r3, #29
 800c4b0:	d001      	beq.n	800c4b6 <__sflush_r+0xb2>
 800c4b2:	2b16      	cmp	r3, #22
 800c4b4:	d101      	bne.n	800c4ba <__sflush_r+0xb6>
 800c4b6:	602f      	str	r7, [r5, #0]
 800c4b8:	e7b1      	b.n	800c41e <__sflush_r+0x1a>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c0:	81a3      	strh	r3, [r4, #12]
 800c4c2:	e7ad      	b.n	800c420 <__sflush_r+0x1c>
 800c4c4:	690f      	ldr	r7, [r1, #16]
 800c4c6:	2f00      	cmp	r7, #0
 800c4c8:	d0a9      	beq.n	800c41e <__sflush_r+0x1a>
 800c4ca:	0793      	lsls	r3, r2, #30
 800c4cc:	680e      	ldr	r6, [r1, #0]
 800c4ce:	bf08      	it	eq
 800c4d0:	694b      	ldreq	r3, [r1, #20]
 800c4d2:	600f      	str	r7, [r1, #0]
 800c4d4:	bf18      	it	ne
 800c4d6:	2300      	movne	r3, #0
 800c4d8:	eba6 0807 	sub.w	r8, r6, r7
 800c4dc:	608b      	str	r3, [r1, #8]
 800c4de:	f1b8 0f00 	cmp.w	r8, #0
 800c4e2:	dd9c      	ble.n	800c41e <__sflush_r+0x1a>
 800c4e4:	6a21      	ldr	r1, [r4, #32]
 800c4e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4e8:	4643      	mov	r3, r8
 800c4ea:	463a      	mov	r2, r7
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b0      	blx	r6
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	dc06      	bgt.n	800c502 <__sflush_r+0xfe>
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4fa:	81a3      	strh	r3, [r4, #12]
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	e78e      	b.n	800c420 <__sflush_r+0x1c>
 800c502:	4407      	add	r7, r0
 800c504:	eba8 0800 	sub.w	r8, r8, r0
 800c508:	e7e9      	b.n	800c4de <__sflush_r+0xda>
 800c50a:	bf00      	nop
 800c50c:	20400001 	.word	0x20400001

0800c510 <_fflush_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	690b      	ldr	r3, [r1, #16]
 800c514:	4605      	mov	r5, r0
 800c516:	460c      	mov	r4, r1
 800c518:	b913      	cbnz	r3, 800c520 <_fflush_r+0x10>
 800c51a:	2500      	movs	r5, #0
 800c51c:	4628      	mov	r0, r5
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	b118      	cbz	r0, 800c52a <_fflush_r+0x1a>
 800c522:	6983      	ldr	r3, [r0, #24]
 800c524:	b90b      	cbnz	r3, 800c52a <_fflush_r+0x1a>
 800c526:	f000 f887 	bl	800c638 <__sinit>
 800c52a:	4b14      	ldr	r3, [pc, #80]	; (800c57c <_fflush_r+0x6c>)
 800c52c:	429c      	cmp	r4, r3
 800c52e:	d11b      	bne.n	800c568 <_fflush_r+0x58>
 800c530:	686c      	ldr	r4, [r5, #4]
 800c532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0ef      	beq.n	800c51a <_fflush_r+0xa>
 800c53a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c53c:	07d0      	lsls	r0, r2, #31
 800c53e:	d404      	bmi.n	800c54a <_fflush_r+0x3a>
 800c540:	0599      	lsls	r1, r3, #22
 800c542:	d402      	bmi.n	800c54a <_fflush_r+0x3a>
 800c544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c546:	f000 f915 	bl	800c774 <__retarget_lock_acquire_recursive>
 800c54a:	4628      	mov	r0, r5
 800c54c:	4621      	mov	r1, r4
 800c54e:	f7ff ff59 	bl	800c404 <__sflush_r>
 800c552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c554:	07da      	lsls	r2, r3, #31
 800c556:	4605      	mov	r5, r0
 800c558:	d4e0      	bmi.n	800c51c <_fflush_r+0xc>
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	059b      	lsls	r3, r3, #22
 800c55e:	d4dd      	bmi.n	800c51c <_fflush_r+0xc>
 800c560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c562:	f000 f908 	bl	800c776 <__retarget_lock_release_recursive>
 800c566:	e7d9      	b.n	800c51c <_fflush_r+0xc>
 800c568:	4b05      	ldr	r3, [pc, #20]	; (800c580 <_fflush_r+0x70>)
 800c56a:	429c      	cmp	r4, r3
 800c56c:	d101      	bne.n	800c572 <_fflush_r+0x62>
 800c56e:	68ac      	ldr	r4, [r5, #8]
 800c570:	e7df      	b.n	800c532 <_fflush_r+0x22>
 800c572:	4b04      	ldr	r3, [pc, #16]	; (800c584 <_fflush_r+0x74>)
 800c574:	429c      	cmp	r4, r3
 800c576:	bf08      	it	eq
 800c578:	68ec      	ldreq	r4, [r5, #12]
 800c57a:	e7da      	b.n	800c532 <_fflush_r+0x22>
 800c57c:	0800d1ec 	.word	0x0800d1ec
 800c580:	0800d20c 	.word	0x0800d20c
 800c584:	0800d1cc 	.word	0x0800d1cc

0800c588 <std>:
 800c588:	2300      	movs	r3, #0
 800c58a:	b510      	push	{r4, lr}
 800c58c:	4604      	mov	r4, r0
 800c58e:	e9c0 3300 	strd	r3, r3, [r0]
 800c592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c596:	6083      	str	r3, [r0, #8]
 800c598:	8181      	strh	r1, [r0, #12]
 800c59a:	6643      	str	r3, [r0, #100]	; 0x64
 800c59c:	81c2      	strh	r2, [r0, #14]
 800c59e:	6183      	str	r3, [r0, #24]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	305c      	adds	r0, #92	; 0x5c
 800c5a6:	f7fd fd71 	bl	800a08c <memset>
 800c5aa:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <std+0x38>)
 800c5ac:	6263      	str	r3, [r4, #36]	; 0x24
 800c5ae:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <std+0x3c>)
 800c5b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5b2:	4b05      	ldr	r3, [pc, #20]	; (800c5c8 <std+0x40>)
 800c5b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5b6:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <std+0x44>)
 800c5b8:	6224      	str	r4, [r4, #32]
 800c5ba:	6323      	str	r3, [r4, #48]	; 0x30
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	bf00      	nop
 800c5c0:	0800c8c9 	.word	0x0800c8c9
 800c5c4:	0800c8eb 	.word	0x0800c8eb
 800c5c8:	0800c923 	.word	0x0800c923
 800c5cc:	0800c947 	.word	0x0800c947

0800c5d0 <_cleanup_r>:
 800c5d0:	4901      	ldr	r1, [pc, #4]	; (800c5d8 <_cleanup_r+0x8>)
 800c5d2:	f000 b8af 	b.w	800c734 <_fwalk_reent>
 800c5d6:	bf00      	nop
 800c5d8:	0800c511 	.word	0x0800c511

0800c5dc <__sfmoreglue>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	1e4a      	subs	r2, r1, #1
 800c5e0:	2568      	movs	r5, #104	; 0x68
 800c5e2:	4355      	muls	r5, r2
 800c5e4:	460e      	mov	r6, r1
 800c5e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5ea:	f7ff fc23 	bl	800be34 <_malloc_r>
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	b140      	cbz	r0, 800c604 <__sfmoreglue+0x28>
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	e9c0 1600 	strd	r1, r6, [r0]
 800c5f8:	300c      	adds	r0, #12
 800c5fa:	60a0      	str	r0, [r4, #8]
 800c5fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c600:	f7fd fd44 	bl	800a08c <memset>
 800c604:	4620      	mov	r0, r4
 800c606:	bd70      	pop	{r4, r5, r6, pc}

0800c608 <__sfp_lock_acquire>:
 800c608:	4801      	ldr	r0, [pc, #4]	; (800c610 <__sfp_lock_acquire+0x8>)
 800c60a:	f000 b8b3 	b.w	800c774 <__retarget_lock_acquire_recursive>
 800c60e:	bf00      	nop
 800c610:	20004d00 	.word	0x20004d00

0800c614 <__sfp_lock_release>:
 800c614:	4801      	ldr	r0, [pc, #4]	; (800c61c <__sfp_lock_release+0x8>)
 800c616:	f000 b8ae 	b.w	800c776 <__retarget_lock_release_recursive>
 800c61a:	bf00      	nop
 800c61c:	20004d00 	.word	0x20004d00

0800c620 <__sinit_lock_acquire>:
 800c620:	4801      	ldr	r0, [pc, #4]	; (800c628 <__sinit_lock_acquire+0x8>)
 800c622:	f000 b8a7 	b.w	800c774 <__retarget_lock_acquire_recursive>
 800c626:	bf00      	nop
 800c628:	20004cfb 	.word	0x20004cfb

0800c62c <__sinit_lock_release>:
 800c62c:	4801      	ldr	r0, [pc, #4]	; (800c634 <__sinit_lock_release+0x8>)
 800c62e:	f000 b8a2 	b.w	800c776 <__retarget_lock_release_recursive>
 800c632:	bf00      	nop
 800c634:	20004cfb 	.word	0x20004cfb

0800c638 <__sinit>:
 800c638:	b510      	push	{r4, lr}
 800c63a:	4604      	mov	r4, r0
 800c63c:	f7ff fff0 	bl	800c620 <__sinit_lock_acquire>
 800c640:	69a3      	ldr	r3, [r4, #24]
 800c642:	b11b      	cbz	r3, 800c64c <__sinit+0x14>
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c648:	f7ff bff0 	b.w	800c62c <__sinit_lock_release>
 800c64c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c650:	6523      	str	r3, [r4, #80]	; 0x50
 800c652:	4b13      	ldr	r3, [pc, #76]	; (800c6a0 <__sinit+0x68>)
 800c654:	4a13      	ldr	r2, [pc, #76]	; (800c6a4 <__sinit+0x6c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	62a2      	str	r2, [r4, #40]	; 0x28
 800c65a:	42a3      	cmp	r3, r4
 800c65c:	bf04      	itt	eq
 800c65e:	2301      	moveq	r3, #1
 800c660:	61a3      	streq	r3, [r4, #24]
 800c662:	4620      	mov	r0, r4
 800c664:	f000 f820 	bl	800c6a8 <__sfp>
 800c668:	6060      	str	r0, [r4, #4]
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 f81c 	bl	800c6a8 <__sfp>
 800c670:	60a0      	str	r0, [r4, #8]
 800c672:	4620      	mov	r0, r4
 800c674:	f000 f818 	bl	800c6a8 <__sfp>
 800c678:	2200      	movs	r2, #0
 800c67a:	60e0      	str	r0, [r4, #12]
 800c67c:	2104      	movs	r1, #4
 800c67e:	6860      	ldr	r0, [r4, #4]
 800c680:	f7ff ff82 	bl	800c588 <std>
 800c684:	68a0      	ldr	r0, [r4, #8]
 800c686:	2201      	movs	r2, #1
 800c688:	2109      	movs	r1, #9
 800c68a:	f7ff ff7d 	bl	800c588 <std>
 800c68e:	68e0      	ldr	r0, [r4, #12]
 800c690:	2202      	movs	r2, #2
 800c692:	2112      	movs	r1, #18
 800c694:	f7ff ff78 	bl	800c588 <std>
 800c698:	2301      	movs	r3, #1
 800c69a:	61a3      	str	r3, [r4, #24]
 800c69c:	e7d2      	b.n	800c644 <__sinit+0xc>
 800c69e:	bf00      	nop
 800c6a0:	0800ce48 	.word	0x0800ce48
 800c6a4:	0800c5d1 	.word	0x0800c5d1

0800c6a8 <__sfp>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	4607      	mov	r7, r0
 800c6ac:	f7ff ffac 	bl	800c608 <__sfp_lock_acquire>
 800c6b0:	4b1e      	ldr	r3, [pc, #120]	; (800c72c <__sfp+0x84>)
 800c6b2:	681e      	ldr	r6, [r3, #0]
 800c6b4:	69b3      	ldr	r3, [r6, #24]
 800c6b6:	b913      	cbnz	r3, 800c6be <__sfp+0x16>
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f7ff ffbd 	bl	800c638 <__sinit>
 800c6be:	3648      	adds	r6, #72	; 0x48
 800c6c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	d503      	bpl.n	800c6d0 <__sfp+0x28>
 800c6c8:	6833      	ldr	r3, [r6, #0]
 800c6ca:	b30b      	cbz	r3, 800c710 <__sfp+0x68>
 800c6cc:	6836      	ldr	r6, [r6, #0]
 800c6ce:	e7f7      	b.n	800c6c0 <__sfp+0x18>
 800c6d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6d4:	b9d5      	cbnz	r5, 800c70c <__sfp+0x64>
 800c6d6:	4b16      	ldr	r3, [pc, #88]	; (800c730 <__sfp+0x88>)
 800c6d8:	60e3      	str	r3, [r4, #12]
 800c6da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6de:	6665      	str	r5, [r4, #100]	; 0x64
 800c6e0:	f000 f847 	bl	800c772 <__retarget_lock_init_recursive>
 800c6e4:	f7ff ff96 	bl	800c614 <__sfp_lock_release>
 800c6e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6f0:	6025      	str	r5, [r4, #0]
 800c6f2:	61a5      	str	r5, [r4, #24]
 800c6f4:	2208      	movs	r2, #8
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6fc:	f7fd fcc6 	bl	800a08c <memset>
 800c700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c708:	4620      	mov	r0, r4
 800c70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c70c:	3468      	adds	r4, #104	; 0x68
 800c70e:	e7d9      	b.n	800c6c4 <__sfp+0x1c>
 800c710:	2104      	movs	r1, #4
 800c712:	4638      	mov	r0, r7
 800c714:	f7ff ff62 	bl	800c5dc <__sfmoreglue>
 800c718:	4604      	mov	r4, r0
 800c71a:	6030      	str	r0, [r6, #0]
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d1d5      	bne.n	800c6cc <__sfp+0x24>
 800c720:	f7ff ff78 	bl	800c614 <__sfp_lock_release>
 800c724:	230c      	movs	r3, #12
 800c726:	603b      	str	r3, [r7, #0]
 800c728:	e7ee      	b.n	800c708 <__sfp+0x60>
 800c72a:	bf00      	nop
 800c72c:	0800ce48 	.word	0x0800ce48
 800c730:	ffff0001 	.word	0xffff0001

0800c734 <_fwalk_reent>:
 800c734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c738:	4606      	mov	r6, r0
 800c73a:	4688      	mov	r8, r1
 800c73c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c740:	2700      	movs	r7, #0
 800c742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c746:	f1b9 0901 	subs.w	r9, r9, #1
 800c74a:	d505      	bpl.n	800c758 <_fwalk_reent+0x24>
 800c74c:	6824      	ldr	r4, [r4, #0]
 800c74e:	2c00      	cmp	r4, #0
 800c750:	d1f7      	bne.n	800c742 <_fwalk_reent+0xe>
 800c752:	4638      	mov	r0, r7
 800c754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c758:	89ab      	ldrh	r3, [r5, #12]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d907      	bls.n	800c76e <_fwalk_reent+0x3a>
 800c75e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c762:	3301      	adds	r3, #1
 800c764:	d003      	beq.n	800c76e <_fwalk_reent+0x3a>
 800c766:	4629      	mov	r1, r5
 800c768:	4630      	mov	r0, r6
 800c76a:	47c0      	blx	r8
 800c76c:	4307      	orrs	r7, r0
 800c76e:	3568      	adds	r5, #104	; 0x68
 800c770:	e7e9      	b.n	800c746 <_fwalk_reent+0x12>

0800c772 <__retarget_lock_init_recursive>:
 800c772:	4770      	bx	lr

0800c774 <__retarget_lock_acquire_recursive>:
 800c774:	4770      	bx	lr

0800c776 <__retarget_lock_release_recursive>:
 800c776:	4770      	bx	lr

0800c778 <__swhatbuf_r>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	460e      	mov	r6, r1
 800c77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c780:	2900      	cmp	r1, #0
 800c782:	b096      	sub	sp, #88	; 0x58
 800c784:	4614      	mov	r4, r2
 800c786:	461d      	mov	r5, r3
 800c788:	da07      	bge.n	800c79a <__swhatbuf_r+0x22>
 800c78a:	2300      	movs	r3, #0
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	89b3      	ldrh	r3, [r6, #12]
 800c790:	061a      	lsls	r2, r3, #24
 800c792:	d410      	bmi.n	800c7b6 <__swhatbuf_r+0x3e>
 800c794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c798:	e00e      	b.n	800c7b8 <__swhatbuf_r+0x40>
 800c79a:	466a      	mov	r2, sp
 800c79c:	f000 f8fa 	bl	800c994 <_fstat_r>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	dbf2      	blt.n	800c78a <__swhatbuf_r+0x12>
 800c7a4:	9a01      	ldr	r2, [sp, #4]
 800c7a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7ae:	425a      	negs	r2, r3
 800c7b0:	415a      	adcs	r2, r3
 800c7b2:	602a      	str	r2, [r5, #0]
 800c7b4:	e7ee      	b.n	800c794 <__swhatbuf_r+0x1c>
 800c7b6:	2340      	movs	r3, #64	; 0x40
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	6023      	str	r3, [r4, #0]
 800c7bc:	b016      	add	sp, #88	; 0x58
 800c7be:	bd70      	pop	{r4, r5, r6, pc}

0800c7c0 <__smakebuf_r>:
 800c7c0:	898b      	ldrh	r3, [r1, #12]
 800c7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7c4:	079d      	lsls	r5, r3, #30
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	d507      	bpl.n	800c7dc <__smakebuf_r+0x1c>
 800c7cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	6123      	str	r3, [r4, #16]
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	6163      	str	r3, [r4, #20]
 800c7d8:	b002      	add	sp, #8
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	ab01      	add	r3, sp, #4
 800c7de:	466a      	mov	r2, sp
 800c7e0:	f7ff ffca 	bl	800c778 <__swhatbuf_r>
 800c7e4:	9900      	ldr	r1, [sp, #0]
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7ff fb23 	bl	800be34 <_malloc_r>
 800c7ee:	b948      	cbnz	r0, 800c804 <__smakebuf_r+0x44>
 800c7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7f4:	059a      	lsls	r2, r3, #22
 800c7f6:	d4ef      	bmi.n	800c7d8 <__smakebuf_r+0x18>
 800c7f8:	f023 0303 	bic.w	r3, r3, #3
 800c7fc:	f043 0302 	orr.w	r3, r3, #2
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	e7e3      	b.n	800c7cc <__smakebuf_r+0xc>
 800c804:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <__smakebuf_r+0x7c>)
 800c806:	62b3      	str	r3, [r6, #40]	; 0x28
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	6020      	str	r0, [r4, #0]
 800c80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	9b00      	ldr	r3, [sp, #0]
 800c814:	6163      	str	r3, [r4, #20]
 800c816:	9b01      	ldr	r3, [sp, #4]
 800c818:	6120      	str	r0, [r4, #16]
 800c81a:	b15b      	cbz	r3, 800c834 <__smakebuf_r+0x74>
 800c81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c820:	4630      	mov	r0, r6
 800c822:	f000 f8c9 	bl	800c9b8 <_isatty_r>
 800c826:	b128      	cbz	r0, 800c834 <__smakebuf_r+0x74>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	f023 0303 	bic.w	r3, r3, #3
 800c82e:	f043 0301 	orr.w	r3, r3, #1
 800c832:	81a3      	strh	r3, [r4, #12]
 800c834:	89a0      	ldrh	r0, [r4, #12]
 800c836:	4305      	orrs	r5, r0
 800c838:	81a5      	strh	r5, [r4, #12]
 800c83a:	e7cd      	b.n	800c7d8 <__smakebuf_r+0x18>
 800c83c:	0800c5d1 	.word	0x0800c5d1

0800c840 <_raise_r>:
 800c840:	291f      	cmp	r1, #31
 800c842:	b538      	push	{r3, r4, r5, lr}
 800c844:	4604      	mov	r4, r0
 800c846:	460d      	mov	r5, r1
 800c848:	d904      	bls.n	800c854 <_raise_r+0x14>
 800c84a:	2316      	movs	r3, #22
 800c84c:	6003      	str	r3, [r0, #0]
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295
 800c852:	bd38      	pop	{r3, r4, r5, pc}
 800c854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c856:	b112      	cbz	r2, 800c85e <_raise_r+0x1e>
 800c858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c85c:	b94b      	cbnz	r3, 800c872 <_raise_r+0x32>
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 f830 	bl	800c8c4 <_getpid_r>
 800c864:	462a      	mov	r2, r5
 800c866:	4601      	mov	r1, r0
 800c868:	4620      	mov	r0, r4
 800c86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c86e:	f000 b817 	b.w	800c8a0 <_kill_r>
 800c872:	2b01      	cmp	r3, #1
 800c874:	d00a      	beq.n	800c88c <_raise_r+0x4c>
 800c876:	1c59      	adds	r1, r3, #1
 800c878:	d103      	bne.n	800c882 <_raise_r+0x42>
 800c87a:	2316      	movs	r3, #22
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	2001      	movs	r0, #1
 800c880:	e7e7      	b.n	800c852 <_raise_r+0x12>
 800c882:	2400      	movs	r4, #0
 800c884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c888:	4628      	mov	r0, r5
 800c88a:	4798      	blx	r3
 800c88c:	2000      	movs	r0, #0
 800c88e:	e7e0      	b.n	800c852 <_raise_r+0x12>

0800c890 <raise>:
 800c890:	4b02      	ldr	r3, [pc, #8]	; (800c89c <raise+0xc>)
 800c892:	4601      	mov	r1, r0
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	f7ff bfd3 	b.w	800c840 <_raise_r>
 800c89a:	bf00      	nop
 800c89c:	2000002c 	.word	0x2000002c

0800c8a0 <_kill_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d07      	ldr	r5, [pc, #28]	; (800c8c0 <_kill_r+0x20>)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	602b      	str	r3, [r5, #0]
 800c8ae:	f7f6 ff37 	bl	8003720 <_kill>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	d102      	bne.n	800c8bc <_kill_r+0x1c>
 800c8b6:	682b      	ldr	r3, [r5, #0]
 800c8b8:	b103      	cbz	r3, 800c8bc <_kill_r+0x1c>
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	20004cf4 	.word	0x20004cf4

0800c8c4 <_getpid_r>:
 800c8c4:	f7f6 bf24 	b.w	8003710 <_getpid>

0800c8c8 <__sread>:
 800c8c8:	b510      	push	{r4, lr}
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d0:	f000 f894 	bl	800c9fc <_read_r>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	bfab      	itete	ge
 800c8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8da:	89a3      	ldrhlt	r3, [r4, #12]
 800c8dc:	181b      	addge	r3, r3, r0
 800c8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8e2:	bfac      	ite	ge
 800c8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8e6:	81a3      	strhlt	r3, [r4, #12]
 800c8e8:	bd10      	pop	{r4, pc}

0800c8ea <__swrite>:
 800c8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ee:	461f      	mov	r7, r3
 800c8f0:	898b      	ldrh	r3, [r1, #12]
 800c8f2:	05db      	lsls	r3, r3, #23
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	4616      	mov	r6, r2
 800c8fa:	d505      	bpl.n	800c908 <__swrite+0x1e>
 800c8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c900:	2302      	movs	r3, #2
 800c902:	2200      	movs	r2, #0
 800c904:	f000 f868 	bl	800c9d8 <_lseek_r>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c912:	81a3      	strh	r3, [r4, #12]
 800c914:	4632      	mov	r2, r6
 800c916:	463b      	mov	r3, r7
 800c918:	4628      	mov	r0, r5
 800c91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c91e:	f000 b817 	b.w	800c950 <_write_r>

0800c922 <__sseek>:
 800c922:	b510      	push	{r4, lr}
 800c924:	460c      	mov	r4, r1
 800c926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c92a:	f000 f855 	bl	800c9d8 <_lseek_r>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	bf15      	itete	ne
 800c934:	6560      	strne	r0, [r4, #84]	; 0x54
 800c936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c93e:	81a3      	strheq	r3, [r4, #12]
 800c940:	bf18      	it	ne
 800c942:	81a3      	strhne	r3, [r4, #12]
 800c944:	bd10      	pop	{r4, pc}

0800c946 <__sclose>:
 800c946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c94a:	f000 b813 	b.w	800c974 <_close_r>
	...

0800c950 <_write_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4d07      	ldr	r5, [pc, #28]	; (800c970 <_write_r+0x20>)
 800c954:	4604      	mov	r4, r0
 800c956:	4608      	mov	r0, r1
 800c958:	4611      	mov	r1, r2
 800c95a:	2200      	movs	r2, #0
 800c95c:	602a      	str	r2, [r5, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	f7f6 ff15 	bl	800378e <_write>
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	d102      	bne.n	800c96e <_write_r+0x1e>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	b103      	cbz	r3, 800c96e <_write_r+0x1e>
 800c96c:	6023      	str	r3, [r4, #0]
 800c96e:	bd38      	pop	{r3, r4, r5, pc}
 800c970:	20004cf4 	.word	0x20004cf4

0800c974 <_close_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	4d06      	ldr	r5, [pc, #24]	; (800c990 <_close_r+0x1c>)
 800c978:	2300      	movs	r3, #0
 800c97a:	4604      	mov	r4, r0
 800c97c:	4608      	mov	r0, r1
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	f7f6 ff21 	bl	80037c6 <_close>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d102      	bne.n	800c98e <_close_r+0x1a>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	b103      	cbz	r3, 800c98e <_close_r+0x1a>
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	bd38      	pop	{r3, r4, r5, pc}
 800c990:	20004cf4 	.word	0x20004cf4

0800c994 <_fstat_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d07      	ldr	r5, [pc, #28]	; (800c9b4 <_fstat_r+0x20>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	4611      	mov	r1, r2
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	f7f6 ff1c 	bl	80037de <_fstat>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	d102      	bne.n	800c9b0 <_fstat_r+0x1c>
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	b103      	cbz	r3, 800c9b0 <_fstat_r+0x1c>
 800c9ae:	6023      	str	r3, [r4, #0]
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20004cf4 	.word	0x20004cf4

0800c9b8 <_isatty_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4d06      	ldr	r5, [pc, #24]	; (800c9d4 <_isatty_r+0x1c>)
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4604      	mov	r4, r0
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	f7f6 ff1b 	bl	80037fe <_isatty>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_isatty_r+0x1a>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_isatty_r+0x1a>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	20004cf4 	.word	0x20004cf4

0800c9d8 <_lseek_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	4d07      	ldr	r5, [pc, #28]	; (800c9f8 <_lseek_r+0x20>)
 800c9dc:	4604      	mov	r4, r0
 800c9de:	4608      	mov	r0, r1
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	602a      	str	r2, [r5, #0]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f7f6 ff14 	bl	8003814 <_lseek>
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d102      	bne.n	800c9f6 <_lseek_r+0x1e>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	b103      	cbz	r3, 800c9f6 <_lseek_r+0x1e>
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	20004cf4 	.word	0x20004cf4

0800c9fc <_read_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d07      	ldr	r5, [pc, #28]	; (800ca1c <_read_r+0x20>)
 800ca00:	4604      	mov	r4, r0
 800ca02:	4608      	mov	r0, r1
 800ca04:	4611      	mov	r1, r2
 800ca06:	2200      	movs	r2, #0
 800ca08:	602a      	str	r2, [r5, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f7f6 fea2 	bl	8003754 <_read>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_read_r+0x1e>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_read_r+0x1e>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	20004cf4 	.word	0x20004cf4

0800ca20 <_init>:
 800ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca22:	bf00      	nop
 800ca24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca26:	bc08      	pop	{r3}
 800ca28:	469e      	mov	lr, r3
 800ca2a:	4770      	bx	lr

0800ca2c <_fini>:
 800ca2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2e:	bf00      	nop
 800ca30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca32:	bc08      	pop	{r3}
 800ca34:	469e      	mov	lr, r3
 800ca36:	4770      	bx	lr
